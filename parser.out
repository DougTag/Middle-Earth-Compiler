Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BITWISE_NOT

Grammar

Rule 0     S' -> program
Rule 1     program -> global main_statement
Rule 2     global -> declaration_statement end global
Rule 3     global -> function_statement global
Rule 4     global -> empty
Rule 5     function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block
Rule 6     params -> params_list
Rule 7     params -> empty
Rule 8     params_list -> declaration_statement
Rule 9     params_list -> params_list COMMA declaration_statement
Rule 10    main_statement -> THE_1 JOURNEY BEGINS HERE block
Rule 11    declaration_statement -> type ID
Rule 12    declaration_statement_list -> declaration_statement
Rule 13    declaration_statement_list -> declaration_statement_list COMMA ID
Rule 14    type -> UNSIGNED
Rule 15    type -> SHORT
Rule 16    type -> INT
Rule 17    type -> LONG
Rule 18    type -> FLOAT
Rule 19    type -> DOUBLE
Rule 20    type -> CHAR
Rule 21    type -> STRING
Rule 22    type -> BOOL
Rule 23    type -> VOID
Rule 24    end -> SEMICOLON
Rule 25    empty -> <empty>
Rule 26    block -> OPEN_BRACE statements_list CLOSE_BRACE
Rule 27    statements_list -> statements_list statements
Rule 28    statements_list -> empty
Rule 29    statements -> declaration_statement_list end
Rule 30    statements -> while_statement
Rule 31    statements -> continue_statement end
Rule 32    statements -> break_statement end
Rule 33    statements -> if_else_statement
Rule 34    statements -> return_statement end
Rule 35    statements -> assign_statement end
Rule 36    while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block
Rule 37    continue_statement -> THE_1 QUEST CONTINUES
Rule 38    break_statement -> YOU SHALL NOT PASS
Rule 39    if_else_statement -> if_statement elif_statement else_statement
Rule 40    if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block
Rule 41    else_statement -> ELSE block
Rule 42    else_statement -> empty
Rule 43    elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block
Rule 44    elif_statement -> empty
Rule 45    return_statement -> GO BACK TO THE_2 ABYSS
Rule 46    return_statement -> GO BACK TO THE_2 ABYSS ID
Rule 47    return_statement -> GO BACK TO THE_2 ABYSS literal
Rule 48    comparasion_list -> comparasion
Rule 49    comparasion_list -> comparasion_list logic_operator comparasion
Rule 50    comparasion -> expression
Rule 51    comparasion -> expression value_operators expression
Rule 52    value_operators -> EQUAL
Rule 53    value_operators -> LESS
Rule 54    value_operators -> LESS_EQUAL
Rule 55    value_operators -> GREATER
Rule 56    value_operators -> GREATER_EQUAL
Rule 57    logic_operator -> AND
Rule 58    logic_operator -> OR
Rule 59    logic_operator -> XOR
Rule 60    literal -> INT_LITERAL
Rule 61    literal -> FLOAT_LITERAL
Rule 62    literal -> CHAR_LITERAL
Rule 63    literal -> STRING_LITERAL
Rule 64    literal -> BOOL_FALSE
Rule 65    literal -> BOOL_TRUE
Rule 66    assign_statement -> ID ASSIGN call_function
Rule 67    assign_statement -> ID ASSIGN expression
Rule 68    call_function -> ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS
Rule 69    args -> args_list
Rule 70    args -> empty
Rule 71    args_list -> values
Rule 72    args_list -> args_list COMMA values
Rule 73    expression -> expression ADD values
Rule 74    expression -> expression SUB values
Rule 75    expression -> expression DIV values
Rule 76    expression -> expression MULT values
Rule 77    expression -> expression MOD values
Rule 78    expression -> expression POW values
Rule 79    expression -> expression BITWISE_OR values
Rule 80    expression -> expression BITWISE_AND values
Rule 81    expression -> expression BITWISE_XOR values
Rule 82    expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
Rule 83    expression -> values
Rule 84    values -> literal
Rule 85    values -> ID

Terminals, with rules where they appear

ABYSS                : 45 46 47
ADD                  : 73
AND                  : 57
ASSIGN               : 66 67
BACK                 : 45 46 47
BEGINS               : 10
BITWISE_AND          : 80
BITWISE_NOT          : 
BITWISE_OR           : 79
BITWISE_XOR          : 81
BOOL                 : 22
BOOL_FALSE           : 64
BOOL_TRUE            : 65
CHAR                 : 20
CHAR_LITERAL         : 62
CLOSE_BRACE          : 26
CLOSE_PARENTHESIS    : 5 36 40 43 68 82
COMMA                : 9 13 72
CONTINUES            : 37
DIV                  : 75
DOUBLE               : 19
ELSE                 : 41
EQUAL                : 52
FLOAT                : 18
FLOAT_LITERAL        : 61
FUNCTION             : 5
GO                   : 45 46 47
GREATER              : 55
GREATER_EQUAL        : 56
HERE                 : 10
HOWEVER              : 43
ID                   : 5 11 13 46 66 67 68 85
IF                   : 40
INT                  : 16
INT_LITERAL          : 60
JOURNEY              : 10
LESS                 : 53
LESS_EQUAL           : 54
LONG                 : 17
MOD                  : 77
MULT                 : 76
NOT                  : 38
OPEN_BRACE           : 26
OPEN_PARENTHESIS     : 5 36 40 43 68 82
OR                   : 58
PASS                 : 38
POW                  : 78
QUEST                : 37
SEMICOLON            : 24
SHALL                : 38
SHORT                : 15
STRING               : 21
STRING_LITERAL       : 63
SUB                  : 74
THE_1                : 10 37
THE_2                : 45 46 47
TO                   : 45 46 47
UNSIGNED             : 14
VOID                 : 23
WHEN                 : 43
WHILE                : 36
XOR                  : 59
YOU                  : 38
error                : 

Nonterminals, with rules where they appear

args                 : 68
args_list            : 69 72
assign_statement     : 35
block                : 5 10 36 40 41 43
break_statement      : 32
call_function        : 66
comparasion          : 48 49
comparasion_list     : 36 40 43 49
continue_statement   : 31
declaration_statement : 2 8 9 12
declaration_statement_list : 13 29
elif_statement       : 39 43
else_statement       : 39
empty                : 4 7 28 42 44 70
end                  : 2 29 31 32 34 35
expression           : 50 51 51 67 73 74 75 76 77 78 79 80 81 82
function_statement   : 3
global               : 1 2 3
if_else_statement    : 33
if_statement         : 39
literal              : 47 84
logic_operator       : 49
main_statement       : 1
params               : 5
params_list          : 6 9
program              : 0
return_statement     : 34
statements           : 27
statements_list      : 26 27
type                 : 5 11
value_operators      : 51
values               : 71 72 73 74 75 76 77 78 79 80 81 83
while_statement      : 30

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global main_statement
    (2) global -> . declaration_statement end global
    (3) global -> . function_statement global
    (4) global -> . empty
    (11) declaration_statement -> . type ID
    (5) function_statement -> . FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block
    (25) empty -> .
    (14) type -> . UNSIGNED
    (15) type -> . SHORT
    (16) type -> . INT
    (17) type -> . LONG
    (18) type -> . FLOAT
    (19) type -> . DOUBLE
    (20) type -> . CHAR
    (21) type -> . STRING
    (22) type -> . BOOL
    (23) type -> . VOID

    FUNCTION        shift and go to state 7
    THE_1           reduce using rule 25 (empty -> .)
    UNSIGNED        shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 15
    BOOL            shift and go to state 16
    VOID            shift and go to state 17

    program                        shift and go to state 1
    global                         shift and go to state 2
    declaration_statement          shift and go to state 3
    function_statement             shift and go to state 4
    empty                          shift and go to state 5
    type                           shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> global . main_statement
    (10) main_statement -> . THE_1 JOURNEY BEGINS HERE block

    THE_1           shift and go to state 19

    main_statement                 shift and go to state 18

state 3

    (2) global -> declaration_statement . end global
    (24) end -> . SEMICOLON

    SEMICOLON       shift and go to state 21

    end                            shift and go to state 20

state 4

    (3) global -> function_statement . global
    (2) global -> . declaration_statement end global
    (3) global -> . function_statement global
    (4) global -> . empty
    (11) declaration_statement -> . type ID
    (5) function_statement -> . FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block
    (25) empty -> .
    (14) type -> . UNSIGNED
    (15) type -> . SHORT
    (16) type -> . INT
    (17) type -> . LONG
    (18) type -> . FLOAT
    (19) type -> . DOUBLE
    (20) type -> . CHAR
    (21) type -> . STRING
    (22) type -> . BOOL
    (23) type -> . VOID

    FUNCTION        shift and go to state 7
    THE_1           reduce using rule 25 (empty -> .)
    UNSIGNED        shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 15
    BOOL            shift and go to state 16
    VOID            shift and go to state 17

    function_statement             shift and go to state 4
    global                         shift and go to state 22
    declaration_statement          shift and go to state 3
    empty                          shift and go to state 5
    type                           shift and go to state 6

state 5

    (4) global -> empty .

    THE_1           reduce using rule 4 (global -> empty .)


state 6

    (11) declaration_statement -> type . ID

    ID              shift and go to state 23


state 7

    (5) function_statement -> FUNCTION . type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block
    (14) type -> . UNSIGNED
    (15) type -> . SHORT
    (16) type -> . INT
    (17) type -> . LONG
    (18) type -> . FLOAT
    (19) type -> . DOUBLE
    (20) type -> . CHAR
    (21) type -> . STRING
    (22) type -> . BOOL
    (23) type -> . VOID

    UNSIGNED        shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 15
    BOOL            shift and go to state 16
    VOID            shift and go to state 17

    type                           shift and go to state 24

state 8

    (14) type -> UNSIGNED .

    ID              reduce using rule 14 (type -> UNSIGNED .)


state 9

    (15) type -> SHORT .

    ID              reduce using rule 15 (type -> SHORT .)


state 10

    (16) type -> INT .

    ID              reduce using rule 16 (type -> INT .)


state 11

    (17) type -> LONG .

    ID              reduce using rule 17 (type -> LONG .)


state 12

    (18) type -> FLOAT .

    ID              reduce using rule 18 (type -> FLOAT .)


state 13

    (19) type -> DOUBLE .

    ID              reduce using rule 19 (type -> DOUBLE .)


state 14

    (20) type -> CHAR .

    ID              reduce using rule 20 (type -> CHAR .)


state 15

    (21) type -> STRING .

    ID              reduce using rule 21 (type -> STRING .)


state 16

    (22) type -> BOOL .

    ID              reduce using rule 22 (type -> BOOL .)


state 17

    (23) type -> VOID .

    ID              reduce using rule 23 (type -> VOID .)


state 18

    (1) program -> global main_statement .

    $end            reduce using rule 1 (program -> global main_statement .)


state 19

    (10) main_statement -> THE_1 . JOURNEY BEGINS HERE block

    JOURNEY         shift and go to state 25


state 20

    (2) global -> declaration_statement end . global
    (2) global -> . declaration_statement end global
    (3) global -> . function_statement global
    (4) global -> . empty
    (11) declaration_statement -> . type ID
    (5) function_statement -> . FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block
    (25) empty -> .
    (14) type -> . UNSIGNED
    (15) type -> . SHORT
    (16) type -> . INT
    (17) type -> . LONG
    (18) type -> . FLOAT
    (19) type -> . DOUBLE
    (20) type -> . CHAR
    (21) type -> . STRING
    (22) type -> . BOOL
    (23) type -> . VOID

    FUNCTION        shift and go to state 7
    THE_1           reduce using rule 25 (empty -> .)
    UNSIGNED        shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 15
    BOOL            shift and go to state 16
    VOID            shift and go to state 17

    declaration_statement          shift and go to state 3
    global                         shift and go to state 26
    function_statement             shift and go to state 4
    empty                          shift and go to state 5
    type                           shift and go to state 6

state 21

    (24) end -> SEMICOLON .

    FUNCTION        reduce using rule 24 (end -> SEMICOLON .)
    UNSIGNED        reduce using rule 24 (end -> SEMICOLON .)
    SHORT           reduce using rule 24 (end -> SEMICOLON .)
    INT             reduce using rule 24 (end -> SEMICOLON .)
    LONG            reduce using rule 24 (end -> SEMICOLON .)
    FLOAT           reduce using rule 24 (end -> SEMICOLON .)
    DOUBLE          reduce using rule 24 (end -> SEMICOLON .)
    CHAR            reduce using rule 24 (end -> SEMICOLON .)
    STRING          reduce using rule 24 (end -> SEMICOLON .)
    BOOL            reduce using rule 24 (end -> SEMICOLON .)
    VOID            reduce using rule 24 (end -> SEMICOLON .)
    THE_1           reduce using rule 24 (end -> SEMICOLON .)
    CLOSE_BRACE     reduce using rule 24 (end -> SEMICOLON .)
    WHILE           reduce using rule 24 (end -> SEMICOLON .)
    YOU             reduce using rule 24 (end -> SEMICOLON .)
    GO              reduce using rule 24 (end -> SEMICOLON .)
    ID              reduce using rule 24 (end -> SEMICOLON .)
    IF              reduce using rule 24 (end -> SEMICOLON .)


state 22

    (3) global -> function_statement global .

    THE_1           reduce using rule 3 (global -> function_statement global .)


state 23

    (11) declaration_statement -> type ID .

    SEMICOLON       reduce using rule 11 (declaration_statement -> type ID .)
    COMMA           reduce using rule 11 (declaration_statement -> type ID .)
    CLOSE_PARENTHESIS reduce using rule 11 (declaration_statement -> type ID .)


state 24

    (5) function_statement -> FUNCTION type . ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block

    ID              shift and go to state 27


state 25

    (10) main_statement -> THE_1 JOURNEY . BEGINS HERE block

    BEGINS          shift and go to state 28


state 26

    (2) global -> declaration_statement end global .

    THE_1           reduce using rule 2 (global -> declaration_statement end global .)


state 27

    (5) function_statement -> FUNCTION type ID . OPEN_PARENTHESIS params CLOSE_PARENTHESIS block

    OPEN_PARENTHESIS shift and go to state 29


state 28

    (10) main_statement -> THE_1 JOURNEY BEGINS . HERE block

    HERE            shift and go to state 30


state 29

    (5) function_statement -> FUNCTION type ID OPEN_PARENTHESIS . params CLOSE_PARENTHESIS block
    (6) params -> . params_list
    (7) params -> . empty
    (8) params_list -> . declaration_statement
    (9) params_list -> . params_list COMMA declaration_statement
    (25) empty -> .
    (11) declaration_statement -> . type ID
    (14) type -> . UNSIGNED
    (15) type -> . SHORT
    (16) type -> . INT
    (17) type -> . LONG
    (18) type -> . FLOAT
    (19) type -> . DOUBLE
    (20) type -> . CHAR
    (21) type -> . STRING
    (22) type -> . BOOL
    (23) type -> . VOID

    CLOSE_PARENTHESIS reduce using rule 25 (empty -> .)
    UNSIGNED        shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 15
    BOOL            shift and go to state 16
    VOID            shift and go to state 17

    type                           shift and go to state 6
    params                         shift and go to state 31
    params_list                    shift and go to state 32
    empty                          shift and go to state 33
    declaration_statement          shift and go to state 34

state 30

    (10) main_statement -> THE_1 JOURNEY BEGINS HERE . block
    (26) block -> . OPEN_BRACE statements_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 36

    block                          shift and go to state 35

state 31

    (5) function_statement -> FUNCTION type ID OPEN_PARENTHESIS params . CLOSE_PARENTHESIS block

    CLOSE_PARENTHESIS shift and go to state 37


state 32

    (6) params -> params_list .
    (9) params_list -> params_list . COMMA declaration_statement

    CLOSE_PARENTHESIS reduce using rule 6 (params -> params_list .)
    COMMA           shift and go to state 38


state 33

    (7) params -> empty .

    CLOSE_PARENTHESIS reduce using rule 7 (params -> empty .)


state 34

    (8) params_list -> declaration_statement .

    COMMA           reduce using rule 8 (params_list -> declaration_statement .)
    CLOSE_PARENTHESIS reduce using rule 8 (params_list -> declaration_statement .)


state 35

    (10) main_statement -> THE_1 JOURNEY BEGINS HERE block .

    $end            reduce using rule 10 (main_statement -> THE_1 JOURNEY BEGINS HERE block .)


state 36

    (26) block -> OPEN_BRACE . statements_list CLOSE_BRACE
    (27) statements_list -> . statements_list statements
    (28) statements_list -> . empty
    (25) empty -> .

    CLOSE_BRACE     reduce using rule 25 (empty -> .)
    WHILE           reduce using rule 25 (empty -> .)
    THE_1           reduce using rule 25 (empty -> .)
    YOU             reduce using rule 25 (empty -> .)
    GO              reduce using rule 25 (empty -> .)
    ID              reduce using rule 25 (empty -> .)
    IF              reduce using rule 25 (empty -> .)
    UNSIGNED        reduce using rule 25 (empty -> .)
    SHORT           reduce using rule 25 (empty -> .)
    INT             reduce using rule 25 (empty -> .)
    LONG            reduce using rule 25 (empty -> .)
    FLOAT           reduce using rule 25 (empty -> .)
    DOUBLE          reduce using rule 25 (empty -> .)
    CHAR            reduce using rule 25 (empty -> .)
    STRING          reduce using rule 25 (empty -> .)
    BOOL            reduce using rule 25 (empty -> .)
    VOID            reduce using rule 25 (empty -> .)

    statements_list                shift and go to state 39
    empty                          shift and go to state 40

state 37

    (5) function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS . block
    (26) block -> . OPEN_BRACE statements_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 36

    block                          shift and go to state 41

state 38

    (9) params_list -> params_list COMMA . declaration_statement
    (11) declaration_statement -> . type ID
    (14) type -> . UNSIGNED
    (15) type -> . SHORT
    (16) type -> . INT
    (17) type -> . LONG
    (18) type -> . FLOAT
    (19) type -> . DOUBLE
    (20) type -> . CHAR
    (21) type -> . STRING
    (22) type -> . BOOL
    (23) type -> . VOID

    UNSIGNED        shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 15
    BOOL            shift and go to state 16
    VOID            shift and go to state 17

    declaration_statement          shift and go to state 42
    type                           shift and go to state 6

state 39

    (26) block -> OPEN_BRACE statements_list . CLOSE_BRACE
    (27) statements_list -> statements_list . statements
    (29) statements -> . declaration_statement_list end
    (30) statements -> . while_statement
    (31) statements -> . continue_statement end
    (32) statements -> . break_statement end
    (33) statements -> . if_else_statement
    (34) statements -> . return_statement end
    (35) statements -> . assign_statement end
    (12) declaration_statement_list -> . declaration_statement
    (13) declaration_statement_list -> . declaration_statement_list COMMA ID
    (36) while_statement -> . WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block
    (37) continue_statement -> . THE_1 QUEST CONTINUES
    (38) break_statement -> . YOU SHALL NOT PASS
    (39) if_else_statement -> . if_statement elif_statement else_statement
    (45) return_statement -> . GO BACK TO THE_2 ABYSS
    (46) return_statement -> . GO BACK TO THE_2 ABYSS ID
    (47) return_statement -> . GO BACK TO THE_2 ABYSS literal
    (66) assign_statement -> . ID ASSIGN call_function
    (67) assign_statement -> . ID ASSIGN expression
    (11) declaration_statement -> . type ID
    (40) if_statement -> . IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block
    (14) type -> . UNSIGNED
    (15) type -> . SHORT
    (16) type -> . INT
    (17) type -> . LONG
    (18) type -> . FLOAT
    (19) type -> . DOUBLE
    (20) type -> . CHAR
    (21) type -> . STRING
    (22) type -> . BOOL
    (23) type -> . VOID

    CLOSE_BRACE     shift and go to state 43
    WHILE           shift and go to state 54
    THE_1           shift and go to state 55
    YOU             shift and go to state 56
    GO              shift and go to state 58
    ID              shift and go to state 53
    IF              shift and go to state 59
    UNSIGNED        shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 15
    BOOL            shift and go to state 16
    VOID            shift and go to state 17

    statements                     shift and go to state 44
    declaration_statement_list     shift and go to state 45
    while_statement                shift and go to state 46
    continue_statement             shift and go to state 47
    break_statement                shift and go to state 48
    if_else_statement              shift and go to state 49
    return_statement               shift and go to state 50
    assign_statement               shift and go to state 51
    declaration_statement          shift and go to state 52
    if_statement                   shift and go to state 57
    type                           shift and go to state 6

state 40

    (28) statements_list -> empty .

    CLOSE_BRACE     reduce using rule 28 (statements_list -> empty .)
    WHILE           reduce using rule 28 (statements_list -> empty .)
    THE_1           reduce using rule 28 (statements_list -> empty .)
    YOU             reduce using rule 28 (statements_list -> empty .)
    GO              reduce using rule 28 (statements_list -> empty .)
    ID              reduce using rule 28 (statements_list -> empty .)
    IF              reduce using rule 28 (statements_list -> empty .)
    UNSIGNED        reduce using rule 28 (statements_list -> empty .)
    SHORT           reduce using rule 28 (statements_list -> empty .)
    INT             reduce using rule 28 (statements_list -> empty .)
    LONG            reduce using rule 28 (statements_list -> empty .)
    FLOAT           reduce using rule 28 (statements_list -> empty .)
    DOUBLE          reduce using rule 28 (statements_list -> empty .)
    CHAR            reduce using rule 28 (statements_list -> empty .)
    STRING          reduce using rule 28 (statements_list -> empty .)
    BOOL            reduce using rule 28 (statements_list -> empty .)
    VOID            reduce using rule 28 (statements_list -> empty .)


state 41

    (5) function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .

    FUNCTION        reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    UNSIGNED        reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    SHORT           reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    INT             reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    LONG            reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    FLOAT           reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    DOUBLE          reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    CHAR            reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    STRING          reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    BOOL            reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    VOID            reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    THE_1           reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)


state 42

    (9) params_list -> params_list COMMA declaration_statement .

    COMMA           reduce using rule 9 (params_list -> params_list COMMA declaration_statement .)
    CLOSE_PARENTHESIS reduce using rule 9 (params_list -> params_list COMMA declaration_statement .)


state 43

    (26) block -> OPEN_BRACE statements_list CLOSE_BRACE .

    $end            reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    FUNCTION        reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    UNSIGNED        reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    SHORT           reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    INT             reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    LONG            reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    FLOAT           reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    DOUBLE          reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    CHAR            reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    STRING          reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    BOOL            reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    VOID            reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    THE_1           reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    WHILE           reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    YOU             reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    GO              reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    ID              reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    IF              reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    HOWEVER         reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    ELSE            reduce using rule 26 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)


state 44

    (27) statements_list -> statements_list statements .

    CLOSE_BRACE     reduce using rule 27 (statements_list -> statements_list statements .)
    WHILE           reduce using rule 27 (statements_list -> statements_list statements .)
    THE_1           reduce using rule 27 (statements_list -> statements_list statements .)
    YOU             reduce using rule 27 (statements_list -> statements_list statements .)
    GO              reduce using rule 27 (statements_list -> statements_list statements .)
    ID              reduce using rule 27 (statements_list -> statements_list statements .)
    IF              reduce using rule 27 (statements_list -> statements_list statements .)
    UNSIGNED        reduce using rule 27 (statements_list -> statements_list statements .)
    SHORT           reduce using rule 27 (statements_list -> statements_list statements .)
    INT             reduce using rule 27 (statements_list -> statements_list statements .)
    LONG            reduce using rule 27 (statements_list -> statements_list statements .)
    FLOAT           reduce using rule 27 (statements_list -> statements_list statements .)
    DOUBLE          reduce using rule 27 (statements_list -> statements_list statements .)
    CHAR            reduce using rule 27 (statements_list -> statements_list statements .)
    STRING          reduce using rule 27 (statements_list -> statements_list statements .)
    BOOL            reduce using rule 27 (statements_list -> statements_list statements .)
    VOID            reduce using rule 27 (statements_list -> statements_list statements .)


state 45

    (29) statements -> declaration_statement_list . end
    (13) declaration_statement_list -> declaration_statement_list . COMMA ID
    (24) end -> . SEMICOLON

    COMMA           shift and go to state 61
    SEMICOLON       shift and go to state 21

    end                            shift and go to state 60

state 46

    (30) statements -> while_statement .

    CLOSE_BRACE     reduce using rule 30 (statements -> while_statement .)
    WHILE           reduce using rule 30 (statements -> while_statement .)
    THE_1           reduce using rule 30 (statements -> while_statement .)
    YOU             reduce using rule 30 (statements -> while_statement .)
    GO              reduce using rule 30 (statements -> while_statement .)
    ID              reduce using rule 30 (statements -> while_statement .)
    IF              reduce using rule 30 (statements -> while_statement .)
    UNSIGNED        reduce using rule 30 (statements -> while_statement .)
    SHORT           reduce using rule 30 (statements -> while_statement .)
    INT             reduce using rule 30 (statements -> while_statement .)
    LONG            reduce using rule 30 (statements -> while_statement .)
    FLOAT           reduce using rule 30 (statements -> while_statement .)
    DOUBLE          reduce using rule 30 (statements -> while_statement .)
    CHAR            reduce using rule 30 (statements -> while_statement .)
    STRING          reduce using rule 30 (statements -> while_statement .)
    BOOL            reduce using rule 30 (statements -> while_statement .)
    VOID            reduce using rule 30 (statements -> while_statement .)


state 47

    (31) statements -> continue_statement . end
    (24) end -> . SEMICOLON

    SEMICOLON       shift and go to state 21

    end                            shift and go to state 62

state 48

    (32) statements -> break_statement . end
    (24) end -> . SEMICOLON

    SEMICOLON       shift and go to state 21

    end                            shift and go to state 63

state 49

    (33) statements -> if_else_statement .

    CLOSE_BRACE     reduce using rule 33 (statements -> if_else_statement .)
    WHILE           reduce using rule 33 (statements -> if_else_statement .)
    THE_1           reduce using rule 33 (statements -> if_else_statement .)
    YOU             reduce using rule 33 (statements -> if_else_statement .)
    GO              reduce using rule 33 (statements -> if_else_statement .)
    ID              reduce using rule 33 (statements -> if_else_statement .)
    IF              reduce using rule 33 (statements -> if_else_statement .)
    UNSIGNED        reduce using rule 33 (statements -> if_else_statement .)
    SHORT           reduce using rule 33 (statements -> if_else_statement .)
    INT             reduce using rule 33 (statements -> if_else_statement .)
    LONG            reduce using rule 33 (statements -> if_else_statement .)
    FLOAT           reduce using rule 33 (statements -> if_else_statement .)
    DOUBLE          reduce using rule 33 (statements -> if_else_statement .)
    CHAR            reduce using rule 33 (statements -> if_else_statement .)
    STRING          reduce using rule 33 (statements -> if_else_statement .)
    BOOL            reduce using rule 33 (statements -> if_else_statement .)
    VOID            reduce using rule 33 (statements -> if_else_statement .)


state 50

    (34) statements -> return_statement . end
    (24) end -> . SEMICOLON

    SEMICOLON       shift and go to state 21

    end                            shift and go to state 64

state 51

    (35) statements -> assign_statement . end
    (24) end -> . SEMICOLON

    SEMICOLON       shift and go to state 21

    end                            shift and go to state 65

state 52

    (12) declaration_statement_list -> declaration_statement .

    COMMA           reduce using rule 12 (declaration_statement_list -> declaration_statement .)
    SEMICOLON       reduce using rule 12 (declaration_statement_list -> declaration_statement .)


state 53

    (66) assign_statement -> ID . ASSIGN call_function
    (67) assign_statement -> ID . ASSIGN expression

    ASSIGN          shift and go to state 66


state 54

    (36) while_statement -> WHILE . OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block

    OPEN_PARENTHESIS shift and go to state 67


state 55

    (37) continue_statement -> THE_1 . QUEST CONTINUES

    QUEST           shift and go to state 68


state 56

    (38) break_statement -> YOU . SHALL NOT PASS

    SHALL           shift and go to state 69


state 57

    (39) if_else_statement -> if_statement . elif_statement else_statement
    (43) elif_statement -> . elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block
    (44) elif_statement -> . empty
    (25) empty -> .

    HOWEVER         reduce using rule 25 (empty -> .)
    ELSE            reduce using rule 25 (empty -> .)
    CLOSE_BRACE     reduce using rule 25 (empty -> .)
    WHILE           reduce using rule 25 (empty -> .)
    THE_1           reduce using rule 25 (empty -> .)
    YOU             reduce using rule 25 (empty -> .)
    GO              reduce using rule 25 (empty -> .)
    ID              reduce using rule 25 (empty -> .)
    IF              reduce using rule 25 (empty -> .)
    UNSIGNED        reduce using rule 25 (empty -> .)
    SHORT           reduce using rule 25 (empty -> .)
    INT             reduce using rule 25 (empty -> .)
    LONG            reduce using rule 25 (empty -> .)
    FLOAT           reduce using rule 25 (empty -> .)
    DOUBLE          reduce using rule 25 (empty -> .)
    CHAR            reduce using rule 25 (empty -> .)
    STRING          reduce using rule 25 (empty -> .)
    BOOL            reduce using rule 25 (empty -> .)
    VOID            reduce using rule 25 (empty -> .)

    elif_statement                 shift and go to state 70
    empty                          shift and go to state 71

state 58

    (45) return_statement -> GO . BACK TO THE_2 ABYSS
    (46) return_statement -> GO . BACK TO THE_2 ABYSS ID
    (47) return_statement -> GO . BACK TO THE_2 ABYSS literal

    BACK            shift and go to state 72


state 59

    (40) if_statement -> IF . OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block

    OPEN_PARENTHESIS shift and go to state 73


state 60

    (29) statements -> declaration_statement_list end .

    CLOSE_BRACE     reduce using rule 29 (statements -> declaration_statement_list end .)
    WHILE           reduce using rule 29 (statements -> declaration_statement_list end .)
    THE_1           reduce using rule 29 (statements -> declaration_statement_list end .)
    YOU             reduce using rule 29 (statements -> declaration_statement_list end .)
    GO              reduce using rule 29 (statements -> declaration_statement_list end .)
    ID              reduce using rule 29 (statements -> declaration_statement_list end .)
    IF              reduce using rule 29 (statements -> declaration_statement_list end .)
    UNSIGNED        reduce using rule 29 (statements -> declaration_statement_list end .)
    SHORT           reduce using rule 29 (statements -> declaration_statement_list end .)
    INT             reduce using rule 29 (statements -> declaration_statement_list end .)
    LONG            reduce using rule 29 (statements -> declaration_statement_list end .)
    FLOAT           reduce using rule 29 (statements -> declaration_statement_list end .)
    DOUBLE          reduce using rule 29 (statements -> declaration_statement_list end .)
    CHAR            reduce using rule 29 (statements -> declaration_statement_list end .)
    STRING          reduce using rule 29 (statements -> declaration_statement_list end .)
    BOOL            reduce using rule 29 (statements -> declaration_statement_list end .)
    VOID            reduce using rule 29 (statements -> declaration_statement_list end .)


state 61

    (13) declaration_statement_list -> declaration_statement_list COMMA . ID

    ID              shift and go to state 74


state 62

    (31) statements -> continue_statement end .

    CLOSE_BRACE     reduce using rule 31 (statements -> continue_statement end .)
    WHILE           reduce using rule 31 (statements -> continue_statement end .)
    THE_1           reduce using rule 31 (statements -> continue_statement end .)
    YOU             reduce using rule 31 (statements -> continue_statement end .)
    GO              reduce using rule 31 (statements -> continue_statement end .)
    ID              reduce using rule 31 (statements -> continue_statement end .)
    IF              reduce using rule 31 (statements -> continue_statement end .)
    UNSIGNED        reduce using rule 31 (statements -> continue_statement end .)
    SHORT           reduce using rule 31 (statements -> continue_statement end .)
    INT             reduce using rule 31 (statements -> continue_statement end .)
    LONG            reduce using rule 31 (statements -> continue_statement end .)
    FLOAT           reduce using rule 31 (statements -> continue_statement end .)
    DOUBLE          reduce using rule 31 (statements -> continue_statement end .)
    CHAR            reduce using rule 31 (statements -> continue_statement end .)
    STRING          reduce using rule 31 (statements -> continue_statement end .)
    BOOL            reduce using rule 31 (statements -> continue_statement end .)
    VOID            reduce using rule 31 (statements -> continue_statement end .)


state 63

    (32) statements -> break_statement end .

    CLOSE_BRACE     reduce using rule 32 (statements -> break_statement end .)
    WHILE           reduce using rule 32 (statements -> break_statement end .)
    THE_1           reduce using rule 32 (statements -> break_statement end .)
    YOU             reduce using rule 32 (statements -> break_statement end .)
    GO              reduce using rule 32 (statements -> break_statement end .)
    ID              reduce using rule 32 (statements -> break_statement end .)
    IF              reduce using rule 32 (statements -> break_statement end .)
    UNSIGNED        reduce using rule 32 (statements -> break_statement end .)
    SHORT           reduce using rule 32 (statements -> break_statement end .)
    INT             reduce using rule 32 (statements -> break_statement end .)
    LONG            reduce using rule 32 (statements -> break_statement end .)
    FLOAT           reduce using rule 32 (statements -> break_statement end .)
    DOUBLE          reduce using rule 32 (statements -> break_statement end .)
    CHAR            reduce using rule 32 (statements -> break_statement end .)
    STRING          reduce using rule 32 (statements -> break_statement end .)
    BOOL            reduce using rule 32 (statements -> break_statement end .)
    VOID            reduce using rule 32 (statements -> break_statement end .)


state 64

    (34) statements -> return_statement end .

    CLOSE_BRACE     reduce using rule 34 (statements -> return_statement end .)
    WHILE           reduce using rule 34 (statements -> return_statement end .)
    THE_1           reduce using rule 34 (statements -> return_statement end .)
    YOU             reduce using rule 34 (statements -> return_statement end .)
    GO              reduce using rule 34 (statements -> return_statement end .)
    ID              reduce using rule 34 (statements -> return_statement end .)
    IF              reduce using rule 34 (statements -> return_statement end .)
    UNSIGNED        reduce using rule 34 (statements -> return_statement end .)
    SHORT           reduce using rule 34 (statements -> return_statement end .)
    INT             reduce using rule 34 (statements -> return_statement end .)
    LONG            reduce using rule 34 (statements -> return_statement end .)
    FLOAT           reduce using rule 34 (statements -> return_statement end .)
    DOUBLE          reduce using rule 34 (statements -> return_statement end .)
    CHAR            reduce using rule 34 (statements -> return_statement end .)
    STRING          reduce using rule 34 (statements -> return_statement end .)
    BOOL            reduce using rule 34 (statements -> return_statement end .)
    VOID            reduce using rule 34 (statements -> return_statement end .)


state 65

    (35) statements -> assign_statement end .

    CLOSE_BRACE     reduce using rule 35 (statements -> assign_statement end .)
    WHILE           reduce using rule 35 (statements -> assign_statement end .)
    THE_1           reduce using rule 35 (statements -> assign_statement end .)
    YOU             reduce using rule 35 (statements -> assign_statement end .)
    GO              reduce using rule 35 (statements -> assign_statement end .)
    ID              reduce using rule 35 (statements -> assign_statement end .)
    IF              reduce using rule 35 (statements -> assign_statement end .)
    UNSIGNED        reduce using rule 35 (statements -> assign_statement end .)
    SHORT           reduce using rule 35 (statements -> assign_statement end .)
    INT             reduce using rule 35 (statements -> assign_statement end .)
    LONG            reduce using rule 35 (statements -> assign_statement end .)
    FLOAT           reduce using rule 35 (statements -> assign_statement end .)
    DOUBLE          reduce using rule 35 (statements -> assign_statement end .)
    CHAR            reduce using rule 35 (statements -> assign_statement end .)
    STRING          reduce using rule 35 (statements -> assign_statement end .)
    BOOL            reduce using rule 35 (statements -> assign_statement end .)
    VOID            reduce using rule 35 (statements -> assign_statement end .)


state 66

    (66) assign_statement -> ID ASSIGN . call_function
    (67) assign_statement -> ID ASSIGN . expression
    (68) call_function -> . ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS
    (73) expression -> . expression ADD values
    (74) expression -> . expression SUB values
    (75) expression -> . expression DIV values
    (76) expression -> . expression MULT values
    (77) expression -> . expression MOD values
    (78) expression -> . expression POW values
    (79) expression -> . expression BITWISE_OR values
    (80) expression -> . expression BITWISE_AND values
    (81) expression -> . expression BITWISE_XOR values
    (82) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (83) expression -> . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    ID              shift and go to state 75
    OPEN_PARENTHESIS shift and go to state 78
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    call_function                  shift and go to state 76
    expression                     shift and go to state 77
    values                         shift and go to state 79
    literal                        shift and go to state 80

state 67

    (36) while_statement -> WHILE OPEN_PARENTHESIS . comparasion_list CLOSE_PARENTHESIS block
    (48) comparasion_list -> . comparasion
    (49) comparasion_list -> . comparasion_list logic_operator comparasion
    (50) comparasion -> . expression
    (51) comparasion -> . expression value_operators expression
    (73) expression -> . expression ADD values
    (74) expression -> . expression SUB values
    (75) expression -> . expression DIV values
    (76) expression -> . expression MULT values
    (77) expression -> . expression MOD values
    (78) expression -> . expression POW values
    (79) expression -> . expression BITWISE_OR values
    (80) expression -> . expression BITWISE_AND values
    (81) expression -> . expression BITWISE_XOR values
    (82) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (83) expression -> . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    OPEN_PARENTHESIS shift and go to state 78
    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    comparasion_list               shift and go to state 87
    comparasion                    shift and go to state 88
    expression                     shift and go to state 89
    values                         shift and go to state 79
    literal                        shift and go to state 80

state 68

    (37) continue_statement -> THE_1 QUEST . CONTINUES

    CONTINUES       shift and go to state 91


state 69

    (38) break_statement -> YOU SHALL . NOT PASS

    NOT             shift and go to state 92


state 70

    (39) if_else_statement -> if_statement elif_statement . else_statement
    (43) elif_statement -> elif_statement . HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block
    (41) else_statement -> . ELSE block
    (42) else_statement -> . empty
    (25) empty -> .

    HOWEVER         shift and go to state 94
    ELSE            shift and go to state 95
    CLOSE_BRACE     reduce using rule 25 (empty -> .)
    WHILE           reduce using rule 25 (empty -> .)
    THE_1           reduce using rule 25 (empty -> .)
    YOU             reduce using rule 25 (empty -> .)
    GO              reduce using rule 25 (empty -> .)
    ID              reduce using rule 25 (empty -> .)
    IF              reduce using rule 25 (empty -> .)
    UNSIGNED        reduce using rule 25 (empty -> .)
    SHORT           reduce using rule 25 (empty -> .)
    INT             reduce using rule 25 (empty -> .)
    LONG            reduce using rule 25 (empty -> .)
    FLOAT           reduce using rule 25 (empty -> .)
    DOUBLE          reduce using rule 25 (empty -> .)
    CHAR            reduce using rule 25 (empty -> .)
    STRING          reduce using rule 25 (empty -> .)
    BOOL            reduce using rule 25 (empty -> .)
    VOID            reduce using rule 25 (empty -> .)

    else_statement                 shift and go to state 93
    empty                          shift and go to state 96

state 71

    (44) elif_statement -> empty .

    HOWEVER         reduce using rule 44 (elif_statement -> empty .)
    ELSE            reduce using rule 44 (elif_statement -> empty .)
    CLOSE_BRACE     reduce using rule 44 (elif_statement -> empty .)
    WHILE           reduce using rule 44 (elif_statement -> empty .)
    THE_1           reduce using rule 44 (elif_statement -> empty .)
    YOU             reduce using rule 44 (elif_statement -> empty .)
    GO              reduce using rule 44 (elif_statement -> empty .)
    ID              reduce using rule 44 (elif_statement -> empty .)
    IF              reduce using rule 44 (elif_statement -> empty .)
    UNSIGNED        reduce using rule 44 (elif_statement -> empty .)
    SHORT           reduce using rule 44 (elif_statement -> empty .)
    INT             reduce using rule 44 (elif_statement -> empty .)
    LONG            reduce using rule 44 (elif_statement -> empty .)
    FLOAT           reduce using rule 44 (elif_statement -> empty .)
    DOUBLE          reduce using rule 44 (elif_statement -> empty .)
    CHAR            reduce using rule 44 (elif_statement -> empty .)
    STRING          reduce using rule 44 (elif_statement -> empty .)
    BOOL            reduce using rule 44 (elif_statement -> empty .)
    VOID            reduce using rule 44 (elif_statement -> empty .)


state 72

    (45) return_statement -> GO BACK . TO THE_2 ABYSS
    (46) return_statement -> GO BACK . TO THE_2 ABYSS ID
    (47) return_statement -> GO BACK . TO THE_2 ABYSS literal

    TO              shift and go to state 97


state 73

    (40) if_statement -> IF OPEN_PARENTHESIS . comparasion_list CLOSE_PARENTHESIS block
    (48) comparasion_list -> . comparasion
    (49) comparasion_list -> . comparasion_list logic_operator comparasion
    (50) comparasion -> . expression
    (51) comparasion -> . expression value_operators expression
    (73) expression -> . expression ADD values
    (74) expression -> . expression SUB values
    (75) expression -> . expression DIV values
    (76) expression -> . expression MULT values
    (77) expression -> . expression MOD values
    (78) expression -> . expression POW values
    (79) expression -> . expression BITWISE_OR values
    (80) expression -> . expression BITWISE_AND values
    (81) expression -> . expression BITWISE_XOR values
    (82) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (83) expression -> . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    OPEN_PARENTHESIS shift and go to state 78
    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    comparasion_list               shift and go to state 98
    comparasion                    shift and go to state 88
    expression                     shift and go to state 89
    values                         shift and go to state 79
    literal                        shift and go to state 80

state 74

    (13) declaration_statement_list -> declaration_statement_list COMMA ID .

    COMMA           reduce using rule 13 (declaration_statement_list -> declaration_statement_list COMMA ID .)
    SEMICOLON       reduce using rule 13 (declaration_statement_list -> declaration_statement_list COMMA ID .)


state 75

    (68) call_function -> ID . OPEN_PARENTHESIS args CLOSE_PARENTHESIS
    (85) values -> ID .

    OPEN_PARENTHESIS shift and go to state 99
    ADD             reduce using rule 85 (values -> ID .)
    SUB             reduce using rule 85 (values -> ID .)
    DIV             reduce using rule 85 (values -> ID .)
    MULT            reduce using rule 85 (values -> ID .)
    MOD             reduce using rule 85 (values -> ID .)
    POW             reduce using rule 85 (values -> ID .)
    BITWISE_OR      reduce using rule 85 (values -> ID .)
    BITWISE_AND     reduce using rule 85 (values -> ID .)
    BITWISE_XOR     reduce using rule 85 (values -> ID .)
    SEMICOLON       reduce using rule 85 (values -> ID .)


state 76

    (66) assign_statement -> ID ASSIGN call_function .

    SEMICOLON       reduce using rule 66 (assign_statement -> ID ASSIGN call_function .)


state 77

    (67) assign_statement -> ID ASSIGN expression .
    (73) expression -> expression . ADD values
    (74) expression -> expression . SUB values
    (75) expression -> expression . DIV values
    (76) expression -> expression . MULT values
    (77) expression -> expression . MOD values
    (78) expression -> expression . POW values
    (79) expression -> expression . BITWISE_OR values
    (80) expression -> expression . BITWISE_AND values
    (81) expression -> expression . BITWISE_XOR values

    SEMICOLON       reduce using rule 67 (assign_statement -> ID ASSIGN expression .)
    ADD             shift and go to state 100
    SUB             shift and go to state 101
    DIV             shift and go to state 102
    MULT            shift and go to state 103
    MOD             shift and go to state 104
    POW             shift and go to state 105
    BITWISE_OR      shift and go to state 106
    BITWISE_AND     shift and go to state 107
    BITWISE_XOR     shift and go to state 108


state 78

    (82) expression -> OPEN_PARENTHESIS . expression CLOSE_PARENTHESIS
    (73) expression -> . expression ADD values
    (74) expression -> . expression SUB values
    (75) expression -> . expression DIV values
    (76) expression -> . expression MULT values
    (77) expression -> . expression MOD values
    (78) expression -> . expression POW values
    (79) expression -> . expression BITWISE_OR values
    (80) expression -> . expression BITWISE_AND values
    (81) expression -> . expression BITWISE_XOR values
    (82) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (83) expression -> . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    OPEN_PARENTHESIS shift and go to state 78
    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    expression                     shift and go to state 109
    values                         shift and go to state 79
    literal                        shift and go to state 80

state 79

    (83) expression -> values .

    ADD             reduce using rule 83 (expression -> values .)
    SUB             reduce using rule 83 (expression -> values .)
    DIV             reduce using rule 83 (expression -> values .)
    MULT            reduce using rule 83 (expression -> values .)
    MOD             reduce using rule 83 (expression -> values .)
    POW             reduce using rule 83 (expression -> values .)
    BITWISE_OR      reduce using rule 83 (expression -> values .)
    BITWISE_AND     reduce using rule 83 (expression -> values .)
    BITWISE_XOR     reduce using rule 83 (expression -> values .)
    SEMICOLON       reduce using rule 83 (expression -> values .)
    EQUAL           reduce using rule 83 (expression -> values .)
    LESS            reduce using rule 83 (expression -> values .)
    LESS_EQUAL      reduce using rule 83 (expression -> values .)
    GREATER         reduce using rule 83 (expression -> values .)
    GREATER_EQUAL   reduce using rule 83 (expression -> values .)
    CLOSE_PARENTHESIS reduce using rule 83 (expression -> values .)
    AND             reduce using rule 83 (expression -> values .)
    OR              reduce using rule 83 (expression -> values .)
    XOR             reduce using rule 83 (expression -> values .)


state 80

    (84) values -> literal .

    ADD             reduce using rule 84 (values -> literal .)
    SUB             reduce using rule 84 (values -> literal .)
    DIV             reduce using rule 84 (values -> literal .)
    MULT            reduce using rule 84 (values -> literal .)
    MOD             reduce using rule 84 (values -> literal .)
    POW             reduce using rule 84 (values -> literal .)
    BITWISE_OR      reduce using rule 84 (values -> literal .)
    BITWISE_AND     reduce using rule 84 (values -> literal .)
    BITWISE_XOR     reduce using rule 84 (values -> literal .)
    SEMICOLON       reduce using rule 84 (values -> literal .)
    EQUAL           reduce using rule 84 (values -> literal .)
    LESS            reduce using rule 84 (values -> literal .)
    LESS_EQUAL      reduce using rule 84 (values -> literal .)
    GREATER         reduce using rule 84 (values -> literal .)
    GREATER_EQUAL   reduce using rule 84 (values -> literal .)
    CLOSE_PARENTHESIS reduce using rule 84 (values -> literal .)
    AND             reduce using rule 84 (values -> literal .)
    OR              reduce using rule 84 (values -> literal .)
    XOR             reduce using rule 84 (values -> literal .)
    COMMA           reduce using rule 84 (values -> literal .)


state 81

    (60) literal -> INT_LITERAL .

    ADD             reduce using rule 60 (literal -> INT_LITERAL .)
    SUB             reduce using rule 60 (literal -> INT_LITERAL .)
    DIV             reduce using rule 60 (literal -> INT_LITERAL .)
    MULT            reduce using rule 60 (literal -> INT_LITERAL .)
    MOD             reduce using rule 60 (literal -> INT_LITERAL .)
    POW             reduce using rule 60 (literal -> INT_LITERAL .)
    BITWISE_OR      reduce using rule 60 (literal -> INT_LITERAL .)
    BITWISE_AND     reduce using rule 60 (literal -> INT_LITERAL .)
    BITWISE_XOR     reduce using rule 60 (literal -> INT_LITERAL .)
    SEMICOLON       reduce using rule 60 (literal -> INT_LITERAL .)
    EQUAL           reduce using rule 60 (literal -> INT_LITERAL .)
    LESS            reduce using rule 60 (literal -> INT_LITERAL .)
    LESS_EQUAL      reduce using rule 60 (literal -> INT_LITERAL .)
    GREATER         reduce using rule 60 (literal -> INT_LITERAL .)
    GREATER_EQUAL   reduce using rule 60 (literal -> INT_LITERAL .)
    CLOSE_PARENTHESIS reduce using rule 60 (literal -> INT_LITERAL .)
    AND             reduce using rule 60 (literal -> INT_LITERAL .)
    OR              reduce using rule 60 (literal -> INT_LITERAL .)
    XOR             reduce using rule 60 (literal -> INT_LITERAL .)
    COMMA           reduce using rule 60 (literal -> INT_LITERAL .)


state 82

    (61) literal -> FLOAT_LITERAL .

    ADD             reduce using rule 61 (literal -> FLOAT_LITERAL .)
    SUB             reduce using rule 61 (literal -> FLOAT_LITERAL .)
    DIV             reduce using rule 61 (literal -> FLOAT_LITERAL .)
    MULT            reduce using rule 61 (literal -> FLOAT_LITERAL .)
    MOD             reduce using rule 61 (literal -> FLOAT_LITERAL .)
    POW             reduce using rule 61 (literal -> FLOAT_LITERAL .)
    BITWISE_OR      reduce using rule 61 (literal -> FLOAT_LITERAL .)
    BITWISE_AND     reduce using rule 61 (literal -> FLOAT_LITERAL .)
    BITWISE_XOR     reduce using rule 61 (literal -> FLOAT_LITERAL .)
    SEMICOLON       reduce using rule 61 (literal -> FLOAT_LITERAL .)
    EQUAL           reduce using rule 61 (literal -> FLOAT_LITERAL .)
    LESS            reduce using rule 61 (literal -> FLOAT_LITERAL .)
    LESS_EQUAL      reduce using rule 61 (literal -> FLOAT_LITERAL .)
    GREATER         reduce using rule 61 (literal -> FLOAT_LITERAL .)
    GREATER_EQUAL   reduce using rule 61 (literal -> FLOAT_LITERAL .)
    CLOSE_PARENTHESIS reduce using rule 61 (literal -> FLOAT_LITERAL .)
    AND             reduce using rule 61 (literal -> FLOAT_LITERAL .)
    OR              reduce using rule 61 (literal -> FLOAT_LITERAL .)
    XOR             reduce using rule 61 (literal -> FLOAT_LITERAL .)
    COMMA           reduce using rule 61 (literal -> FLOAT_LITERAL .)


state 83

    (62) literal -> CHAR_LITERAL .

    ADD             reduce using rule 62 (literal -> CHAR_LITERAL .)
    SUB             reduce using rule 62 (literal -> CHAR_LITERAL .)
    DIV             reduce using rule 62 (literal -> CHAR_LITERAL .)
    MULT            reduce using rule 62 (literal -> CHAR_LITERAL .)
    MOD             reduce using rule 62 (literal -> CHAR_LITERAL .)
    POW             reduce using rule 62 (literal -> CHAR_LITERAL .)
    BITWISE_OR      reduce using rule 62 (literal -> CHAR_LITERAL .)
    BITWISE_AND     reduce using rule 62 (literal -> CHAR_LITERAL .)
    BITWISE_XOR     reduce using rule 62 (literal -> CHAR_LITERAL .)
    SEMICOLON       reduce using rule 62 (literal -> CHAR_LITERAL .)
    EQUAL           reduce using rule 62 (literal -> CHAR_LITERAL .)
    LESS            reduce using rule 62 (literal -> CHAR_LITERAL .)
    LESS_EQUAL      reduce using rule 62 (literal -> CHAR_LITERAL .)
    GREATER         reduce using rule 62 (literal -> CHAR_LITERAL .)
    GREATER_EQUAL   reduce using rule 62 (literal -> CHAR_LITERAL .)
    CLOSE_PARENTHESIS reduce using rule 62 (literal -> CHAR_LITERAL .)
    AND             reduce using rule 62 (literal -> CHAR_LITERAL .)
    OR              reduce using rule 62 (literal -> CHAR_LITERAL .)
    XOR             reduce using rule 62 (literal -> CHAR_LITERAL .)
    COMMA           reduce using rule 62 (literal -> CHAR_LITERAL .)


state 84

    (63) literal -> STRING_LITERAL .

    ADD             reduce using rule 63 (literal -> STRING_LITERAL .)
    SUB             reduce using rule 63 (literal -> STRING_LITERAL .)
    DIV             reduce using rule 63 (literal -> STRING_LITERAL .)
    MULT            reduce using rule 63 (literal -> STRING_LITERAL .)
    MOD             reduce using rule 63 (literal -> STRING_LITERAL .)
    POW             reduce using rule 63 (literal -> STRING_LITERAL .)
    BITWISE_OR      reduce using rule 63 (literal -> STRING_LITERAL .)
    BITWISE_AND     reduce using rule 63 (literal -> STRING_LITERAL .)
    BITWISE_XOR     reduce using rule 63 (literal -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 63 (literal -> STRING_LITERAL .)
    EQUAL           reduce using rule 63 (literal -> STRING_LITERAL .)
    LESS            reduce using rule 63 (literal -> STRING_LITERAL .)
    LESS_EQUAL      reduce using rule 63 (literal -> STRING_LITERAL .)
    GREATER         reduce using rule 63 (literal -> STRING_LITERAL .)
    GREATER_EQUAL   reduce using rule 63 (literal -> STRING_LITERAL .)
    CLOSE_PARENTHESIS reduce using rule 63 (literal -> STRING_LITERAL .)
    AND             reduce using rule 63 (literal -> STRING_LITERAL .)
    OR              reduce using rule 63 (literal -> STRING_LITERAL .)
    XOR             reduce using rule 63 (literal -> STRING_LITERAL .)
    COMMA           reduce using rule 63 (literal -> STRING_LITERAL .)


state 85

    (64) literal -> BOOL_FALSE .

    ADD             reduce using rule 64 (literal -> BOOL_FALSE .)
    SUB             reduce using rule 64 (literal -> BOOL_FALSE .)
    DIV             reduce using rule 64 (literal -> BOOL_FALSE .)
    MULT            reduce using rule 64 (literal -> BOOL_FALSE .)
    MOD             reduce using rule 64 (literal -> BOOL_FALSE .)
    POW             reduce using rule 64 (literal -> BOOL_FALSE .)
    BITWISE_OR      reduce using rule 64 (literal -> BOOL_FALSE .)
    BITWISE_AND     reduce using rule 64 (literal -> BOOL_FALSE .)
    BITWISE_XOR     reduce using rule 64 (literal -> BOOL_FALSE .)
    SEMICOLON       reduce using rule 64 (literal -> BOOL_FALSE .)
    EQUAL           reduce using rule 64 (literal -> BOOL_FALSE .)
    LESS            reduce using rule 64 (literal -> BOOL_FALSE .)
    LESS_EQUAL      reduce using rule 64 (literal -> BOOL_FALSE .)
    GREATER         reduce using rule 64 (literal -> BOOL_FALSE .)
    GREATER_EQUAL   reduce using rule 64 (literal -> BOOL_FALSE .)
    CLOSE_PARENTHESIS reduce using rule 64 (literal -> BOOL_FALSE .)
    AND             reduce using rule 64 (literal -> BOOL_FALSE .)
    OR              reduce using rule 64 (literal -> BOOL_FALSE .)
    XOR             reduce using rule 64 (literal -> BOOL_FALSE .)
    COMMA           reduce using rule 64 (literal -> BOOL_FALSE .)


state 86

    (65) literal -> BOOL_TRUE .

    ADD             reduce using rule 65 (literal -> BOOL_TRUE .)
    SUB             reduce using rule 65 (literal -> BOOL_TRUE .)
    DIV             reduce using rule 65 (literal -> BOOL_TRUE .)
    MULT            reduce using rule 65 (literal -> BOOL_TRUE .)
    MOD             reduce using rule 65 (literal -> BOOL_TRUE .)
    POW             reduce using rule 65 (literal -> BOOL_TRUE .)
    BITWISE_OR      reduce using rule 65 (literal -> BOOL_TRUE .)
    BITWISE_AND     reduce using rule 65 (literal -> BOOL_TRUE .)
    BITWISE_XOR     reduce using rule 65 (literal -> BOOL_TRUE .)
    SEMICOLON       reduce using rule 65 (literal -> BOOL_TRUE .)
    EQUAL           reduce using rule 65 (literal -> BOOL_TRUE .)
    LESS            reduce using rule 65 (literal -> BOOL_TRUE .)
    LESS_EQUAL      reduce using rule 65 (literal -> BOOL_TRUE .)
    GREATER         reduce using rule 65 (literal -> BOOL_TRUE .)
    GREATER_EQUAL   reduce using rule 65 (literal -> BOOL_TRUE .)
    CLOSE_PARENTHESIS reduce using rule 65 (literal -> BOOL_TRUE .)
    AND             reduce using rule 65 (literal -> BOOL_TRUE .)
    OR              reduce using rule 65 (literal -> BOOL_TRUE .)
    XOR             reduce using rule 65 (literal -> BOOL_TRUE .)
    COMMA           reduce using rule 65 (literal -> BOOL_TRUE .)


state 87

    (36) while_statement -> WHILE OPEN_PARENTHESIS comparasion_list . CLOSE_PARENTHESIS block
    (49) comparasion_list -> comparasion_list . logic_operator comparasion
    (57) logic_operator -> . AND
    (58) logic_operator -> . OR
    (59) logic_operator -> . XOR

    CLOSE_PARENTHESIS shift and go to state 110
    AND             shift and go to state 112
    OR              shift and go to state 113
    XOR             shift and go to state 114

    logic_operator                 shift and go to state 111

state 88

    (48) comparasion_list -> comparasion .

    CLOSE_PARENTHESIS reduce using rule 48 (comparasion_list -> comparasion .)
    AND             reduce using rule 48 (comparasion_list -> comparasion .)
    OR              reduce using rule 48 (comparasion_list -> comparasion .)
    XOR             reduce using rule 48 (comparasion_list -> comparasion .)


state 89

    (50) comparasion -> expression .
    (51) comparasion -> expression . value_operators expression
    (73) expression -> expression . ADD values
    (74) expression -> expression . SUB values
    (75) expression -> expression . DIV values
    (76) expression -> expression . MULT values
    (77) expression -> expression . MOD values
    (78) expression -> expression . POW values
    (79) expression -> expression . BITWISE_OR values
    (80) expression -> expression . BITWISE_AND values
    (81) expression -> expression . BITWISE_XOR values
    (52) value_operators -> . EQUAL
    (53) value_operators -> . LESS
    (54) value_operators -> . LESS_EQUAL
    (55) value_operators -> . GREATER
    (56) value_operators -> . GREATER_EQUAL

    CLOSE_PARENTHESIS reduce using rule 50 (comparasion -> expression .)
    AND             reduce using rule 50 (comparasion -> expression .)
    OR              reduce using rule 50 (comparasion -> expression .)
    XOR             reduce using rule 50 (comparasion -> expression .)
    ADD             shift and go to state 100
    SUB             shift and go to state 101
    DIV             shift and go to state 102
    MULT            shift and go to state 103
    MOD             shift and go to state 104
    POW             shift and go to state 105
    BITWISE_OR      shift and go to state 106
    BITWISE_AND     shift and go to state 107
    BITWISE_XOR     shift and go to state 108
    EQUAL           shift and go to state 116
    LESS            shift and go to state 117
    LESS_EQUAL      shift and go to state 118
    GREATER         shift and go to state 119
    GREATER_EQUAL   shift and go to state 120

    value_operators                shift and go to state 115

state 90

    (85) values -> ID .

    ADD             reduce using rule 85 (values -> ID .)
    SUB             reduce using rule 85 (values -> ID .)
    DIV             reduce using rule 85 (values -> ID .)
    MULT            reduce using rule 85 (values -> ID .)
    MOD             reduce using rule 85 (values -> ID .)
    POW             reduce using rule 85 (values -> ID .)
    BITWISE_OR      reduce using rule 85 (values -> ID .)
    BITWISE_AND     reduce using rule 85 (values -> ID .)
    BITWISE_XOR     reduce using rule 85 (values -> ID .)
    EQUAL           reduce using rule 85 (values -> ID .)
    LESS            reduce using rule 85 (values -> ID .)
    LESS_EQUAL      reduce using rule 85 (values -> ID .)
    GREATER         reduce using rule 85 (values -> ID .)
    GREATER_EQUAL   reduce using rule 85 (values -> ID .)
    CLOSE_PARENTHESIS reduce using rule 85 (values -> ID .)
    AND             reduce using rule 85 (values -> ID .)
    OR              reduce using rule 85 (values -> ID .)
    XOR             reduce using rule 85 (values -> ID .)
    COMMA           reduce using rule 85 (values -> ID .)
    SEMICOLON       reduce using rule 85 (values -> ID .)


state 91

    (37) continue_statement -> THE_1 QUEST CONTINUES .

    SEMICOLON       reduce using rule 37 (continue_statement -> THE_1 QUEST CONTINUES .)


state 92

    (38) break_statement -> YOU SHALL NOT . PASS

    PASS            shift and go to state 121


state 93

    (39) if_else_statement -> if_statement elif_statement else_statement .

    CLOSE_BRACE     reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    WHILE           reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    THE_1           reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    YOU             reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    GO              reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    ID              reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    IF              reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    UNSIGNED        reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    SHORT           reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    INT             reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    LONG            reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    FLOAT           reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    DOUBLE          reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    CHAR            reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    STRING          reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    BOOL            reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)
    VOID            reduce using rule 39 (if_else_statement -> if_statement elif_statement else_statement .)


state 94

    (43) elif_statement -> elif_statement HOWEVER . WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block

    WHEN            shift and go to state 122


state 95

    (41) else_statement -> ELSE . block
    (26) block -> . OPEN_BRACE statements_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 36

    block                          shift and go to state 123

state 96

    (42) else_statement -> empty .

    CLOSE_BRACE     reduce using rule 42 (else_statement -> empty .)
    WHILE           reduce using rule 42 (else_statement -> empty .)
    THE_1           reduce using rule 42 (else_statement -> empty .)
    YOU             reduce using rule 42 (else_statement -> empty .)
    GO              reduce using rule 42 (else_statement -> empty .)
    ID              reduce using rule 42 (else_statement -> empty .)
    IF              reduce using rule 42 (else_statement -> empty .)
    UNSIGNED        reduce using rule 42 (else_statement -> empty .)
    SHORT           reduce using rule 42 (else_statement -> empty .)
    INT             reduce using rule 42 (else_statement -> empty .)
    LONG            reduce using rule 42 (else_statement -> empty .)
    FLOAT           reduce using rule 42 (else_statement -> empty .)
    DOUBLE          reduce using rule 42 (else_statement -> empty .)
    CHAR            reduce using rule 42 (else_statement -> empty .)
    STRING          reduce using rule 42 (else_statement -> empty .)
    BOOL            reduce using rule 42 (else_statement -> empty .)
    VOID            reduce using rule 42 (else_statement -> empty .)


state 97

    (45) return_statement -> GO BACK TO . THE_2 ABYSS
    (46) return_statement -> GO BACK TO . THE_2 ABYSS ID
    (47) return_statement -> GO BACK TO . THE_2 ABYSS literal

    THE_2           shift and go to state 124


state 98

    (40) if_statement -> IF OPEN_PARENTHESIS comparasion_list . CLOSE_PARENTHESIS block
    (49) comparasion_list -> comparasion_list . logic_operator comparasion
    (57) logic_operator -> . AND
    (58) logic_operator -> . OR
    (59) logic_operator -> . XOR

    CLOSE_PARENTHESIS shift and go to state 125
    AND             shift and go to state 112
    OR              shift and go to state 113
    XOR             shift and go to state 114

    logic_operator                 shift and go to state 111

state 99

    (68) call_function -> ID OPEN_PARENTHESIS . args CLOSE_PARENTHESIS
    (69) args -> . args_list
    (70) args -> . empty
    (71) args_list -> . values
    (72) args_list -> . args_list COMMA values
    (25) empty -> .
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    CLOSE_PARENTHESIS reduce using rule 25 (empty -> .)
    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    args                           shift and go to state 126
    args_list                      shift and go to state 127
    empty                          shift and go to state 128
    values                         shift and go to state 129
    literal                        shift and go to state 80

state 100

    (73) expression -> expression ADD . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    values                         shift and go to state 130
    literal                        shift and go to state 80

state 101

    (74) expression -> expression SUB . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    values                         shift and go to state 131
    literal                        shift and go to state 80

state 102

    (75) expression -> expression DIV . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    values                         shift and go to state 132
    literal                        shift and go to state 80

state 103

    (76) expression -> expression MULT . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    values                         shift and go to state 133
    literal                        shift and go to state 80

state 104

    (77) expression -> expression MOD . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    values                         shift and go to state 134
    literal                        shift and go to state 80

state 105

    (78) expression -> expression POW . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    values                         shift and go to state 135
    literal                        shift and go to state 80

state 106

    (79) expression -> expression BITWISE_OR . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    values                         shift and go to state 136
    literal                        shift and go to state 80

state 107

    (80) expression -> expression BITWISE_AND . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    values                         shift and go to state 137
    literal                        shift and go to state 80

state 108

    (81) expression -> expression BITWISE_XOR . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    values                         shift and go to state 138
    literal                        shift and go to state 80

state 109

    (82) expression -> OPEN_PARENTHESIS expression . CLOSE_PARENTHESIS
    (73) expression -> expression . ADD values
    (74) expression -> expression . SUB values
    (75) expression -> expression . DIV values
    (76) expression -> expression . MULT values
    (77) expression -> expression . MOD values
    (78) expression -> expression . POW values
    (79) expression -> expression . BITWISE_OR values
    (80) expression -> expression . BITWISE_AND values
    (81) expression -> expression . BITWISE_XOR values

    CLOSE_PARENTHESIS shift and go to state 139
    ADD             shift and go to state 100
    SUB             shift and go to state 101
    DIV             shift and go to state 102
    MULT            shift and go to state 103
    MOD             shift and go to state 104
    POW             shift and go to state 105
    BITWISE_OR      shift and go to state 106
    BITWISE_AND     shift and go to state 107
    BITWISE_XOR     shift and go to state 108


state 110

    (36) while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS . block
    (26) block -> . OPEN_BRACE statements_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 36

    block                          shift and go to state 140

state 111

    (49) comparasion_list -> comparasion_list logic_operator . comparasion
    (50) comparasion -> . expression
    (51) comparasion -> . expression value_operators expression
    (73) expression -> . expression ADD values
    (74) expression -> . expression SUB values
    (75) expression -> . expression DIV values
    (76) expression -> . expression MULT values
    (77) expression -> . expression MOD values
    (78) expression -> . expression POW values
    (79) expression -> . expression BITWISE_OR values
    (80) expression -> . expression BITWISE_AND values
    (81) expression -> . expression BITWISE_XOR values
    (82) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (83) expression -> . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    OPEN_PARENTHESIS shift and go to state 78
    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    comparasion                    shift and go to state 141
    expression                     shift and go to state 89
    values                         shift and go to state 79
    literal                        shift and go to state 80

state 112

    (57) logic_operator -> AND .

    OPEN_PARENTHESIS reduce using rule 57 (logic_operator -> AND .)
    ID              reduce using rule 57 (logic_operator -> AND .)
    INT_LITERAL     reduce using rule 57 (logic_operator -> AND .)
    FLOAT_LITERAL   reduce using rule 57 (logic_operator -> AND .)
    CHAR_LITERAL    reduce using rule 57 (logic_operator -> AND .)
    STRING_LITERAL  reduce using rule 57 (logic_operator -> AND .)
    BOOL_FALSE      reduce using rule 57 (logic_operator -> AND .)
    BOOL_TRUE       reduce using rule 57 (logic_operator -> AND .)


state 113

    (58) logic_operator -> OR .

    OPEN_PARENTHESIS reduce using rule 58 (logic_operator -> OR .)
    ID              reduce using rule 58 (logic_operator -> OR .)
    INT_LITERAL     reduce using rule 58 (logic_operator -> OR .)
    FLOAT_LITERAL   reduce using rule 58 (logic_operator -> OR .)
    CHAR_LITERAL    reduce using rule 58 (logic_operator -> OR .)
    STRING_LITERAL  reduce using rule 58 (logic_operator -> OR .)
    BOOL_FALSE      reduce using rule 58 (logic_operator -> OR .)
    BOOL_TRUE       reduce using rule 58 (logic_operator -> OR .)


state 114

    (59) logic_operator -> XOR .

    OPEN_PARENTHESIS reduce using rule 59 (logic_operator -> XOR .)
    ID              reduce using rule 59 (logic_operator -> XOR .)
    INT_LITERAL     reduce using rule 59 (logic_operator -> XOR .)
    FLOAT_LITERAL   reduce using rule 59 (logic_operator -> XOR .)
    CHAR_LITERAL    reduce using rule 59 (logic_operator -> XOR .)
    STRING_LITERAL  reduce using rule 59 (logic_operator -> XOR .)
    BOOL_FALSE      reduce using rule 59 (logic_operator -> XOR .)
    BOOL_TRUE       reduce using rule 59 (logic_operator -> XOR .)


state 115

    (51) comparasion -> expression value_operators . expression
    (73) expression -> . expression ADD values
    (74) expression -> . expression SUB values
    (75) expression -> . expression DIV values
    (76) expression -> . expression MULT values
    (77) expression -> . expression MOD values
    (78) expression -> . expression POW values
    (79) expression -> . expression BITWISE_OR values
    (80) expression -> . expression BITWISE_AND values
    (81) expression -> . expression BITWISE_XOR values
    (82) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (83) expression -> . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    OPEN_PARENTHESIS shift and go to state 78
    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    expression                     shift and go to state 142
    values                         shift and go to state 79
    literal                        shift and go to state 80

state 116

    (52) value_operators -> EQUAL .

    OPEN_PARENTHESIS reduce using rule 52 (value_operators -> EQUAL .)
    ID              reduce using rule 52 (value_operators -> EQUAL .)
    INT_LITERAL     reduce using rule 52 (value_operators -> EQUAL .)
    FLOAT_LITERAL   reduce using rule 52 (value_operators -> EQUAL .)
    CHAR_LITERAL    reduce using rule 52 (value_operators -> EQUAL .)
    STRING_LITERAL  reduce using rule 52 (value_operators -> EQUAL .)
    BOOL_FALSE      reduce using rule 52 (value_operators -> EQUAL .)
    BOOL_TRUE       reduce using rule 52 (value_operators -> EQUAL .)


state 117

    (53) value_operators -> LESS .

    OPEN_PARENTHESIS reduce using rule 53 (value_operators -> LESS .)
    ID              reduce using rule 53 (value_operators -> LESS .)
    INT_LITERAL     reduce using rule 53 (value_operators -> LESS .)
    FLOAT_LITERAL   reduce using rule 53 (value_operators -> LESS .)
    CHAR_LITERAL    reduce using rule 53 (value_operators -> LESS .)
    STRING_LITERAL  reduce using rule 53 (value_operators -> LESS .)
    BOOL_FALSE      reduce using rule 53 (value_operators -> LESS .)
    BOOL_TRUE       reduce using rule 53 (value_operators -> LESS .)


state 118

    (54) value_operators -> LESS_EQUAL .

    OPEN_PARENTHESIS reduce using rule 54 (value_operators -> LESS_EQUAL .)
    ID              reduce using rule 54 (value_operators -> LESS_EQUAL .)
    INT_LITERAL     reduce using rule 54 (value_operators -> LESS_EQUAL .)
    FLOAT_LITERAL   reduce using rule 54 (value_operators -> LESS_EQUAL .)
    CHAR_LITERAL    reduce using rule 54 (value_operators -> LESS_EQUAL .)
    STRING_LITERAL  reduce using rule 54 (value_operators -> LESS_EQUAL .)
    BOOL_FALSE      reduce using rule 54 (value_operators -> LESS_EQUAL .)
    BOOL_TRUE       reduce using rule 54 (value_operators -> LESS_EQUAL .)


state 119

    (55) value_operators -> GREATER .

    OPEN_PARENTHESIS reduce using rule 55 (value_operators -> GREATER .)
    ID              reduce using rule 55 (value_operators -> GREATER .)
    INT_LITERAL     reduce using rule 55 (value_operators -> GREATER .)
    FLOAT_LITERAL   reduce using rule 55 (value_operators -> GREATER .)
    CHAR_LITERAL    reduce using rule 55 (value_operators -> GREATER .)
    STRING_LITERAL  reduce using rule 55 (value_operators -> GREATER .)
    BOOL_FALSE      reduce using rule 55 (value_operators -> GREATER .)
    BOOL_TRUE       reduce using rule 55 (value_operators -> GREATER .)


state 120

    (56) value_operators -> GREATER_EQUAL .

    OPEN_PARENTHESIS reduce using rule 56 (value_operators -> GREATER_EQUAL .)
    ID              reduce using rule 56 (value_operators -> GREATER_EQUAL .)
    INT_LITERAL     reduce using rule 56 (value_operators -> GREATER_EQUAL .)
    FLOAT_LITERAL   reduce using rule 56 (value_operators -> GREATER_EQUAL .)
    CHAR_LITERAL    reduce using rule 56 (value_operators -> GREATER_EQUAL .)
    STRING_LITERAL  reduce using rule 56 (value_operators -> GREATER_EQUAL .)
    BOOL_FALSE      reduce using rule 56 (value_operators -> GREATER_EQUAL .)
    BOOL_TRUE       reduce using rule 56 (value_operators -> GREATER_EQUAL .)


state 121

    (38) break_statement -> YOU SHALL NOT PASS .

    SEMICOLON       reduce using rule 38 (break_statement -> YOU SHALL NOT PASS .)


state 122

    (43) elif_statement -> elif_statement HOWEVER WHEN . OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block

    OPEN_PARENTHESIS shift and go to state 143


state 123

    (41) else_statement -> ELSE block .

    CLOSE_BRACE     reduce using rule 41 (else_statement -> ELSE block .)
    WHILE           reduce using rule 41 (else_statement -> ELSE block .)
    THE_1           reduce using rule 41 (else_statement -> ELSE block .)
    YOU             reduce using rule 41 (else_statement -> ELSE block .)
    GO              reduce using rule 41 (else_statement -> ELSE block .)
    ID              reduce using rule 41 (else_statement -> ELSE block .)
    IF              reduce using rule 41 (else_statement -> ELSE block .)
    UNSIGNED        reduce using rule 41 (else_statement -> ELSE block .)
    SHORT           reduce using rule 41 (else_statement -> ELSE block .)
    INT             reduce using rule 41 (else_statement -> ELSE block .)
    LONG            reduce using rule 41 (else_statement -> ELSE block .)
    FLOAT           reduce using rule 41 (else_statement -> ELSE block .)
    DOUBLE          reduce using rule 41 (else_statement -> ELSE block .)
    CHAR            reduce using rule 41 (else_statement -> ELSE block .)
    STRING          reduce using rule 41 (else_statement -> ELSE block .)
    BOOL            reduce using rule 41 (else_statement -> ELSE block .)
    VOID            reduce using rule 41 (else_statement -> ELSE block .)


state 124

    (45) return_statement -> GO BACK TO THE_2 . ABYSS
    (46) return_statement -> GO BACK TO THE_2 . ABYSS ID
    (47) return_statement -> GO BACK TO THE_2 . ABYSS literal

    ABYSS           shift and go to state 144


state 125

    (40) if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS . block
    (26) block -> . OPEN_BRACE statements_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 36

    block                          shift and go to state 145

state 126

    (68) call_function -> ID OPEN_PARENTHESIS args . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 146


state 127

    (69) args -> args_list .
    (72) args_list -> args_list . COMMA values

    CLOSE_PARENTHESIS reduce using rule 69 (args -> args_list .)
    COMMA           shift and go to state 147


state 128

    (70) args -> empty .

    CLOSE_PARENTHESIS reduce using rule 70 (args -> empty .)


state 129

    (71) args_list -> values .

    COMMA           reduce using rule 71 (args_list -> values .)
    CLOSE_PARENTHESIS reduce using rule 71 (args_list -> values .)


state 130

    (73) expression -> expression ADD values .

    ADD             reduce using rule 73 (expression -> expression ADD values .)
    SUB             reduce using rule 73 (expression -> expression ADD values .)
    DIV             reduce using rule 73 (expression -> expression ADD values .)
    MULT            reduce using rule 73 (expression -> expression ADD values .)
    MOD             reduce using rule 73 (expression -> expression ADD values .)
    POW             reduce using rule 73 (expression -> expression ADD values .)
    BITWISE_OR      reduce using rule 73 (expression -> expression ADD values .)
    BITWISE_AND     reduce using rule 73 (expression -> expression ADD values .)
    BITWISE_XOR     reduce using rule 73 (expression -> expression ADD values .)
    SEMICOLON       reduce using rule 73 (expression -> expression ADD values .)
    EQUAL           reduce using rule 73 (expression -> expression ADD values .)
    LESS            reduce using rule 73 (expression -> expression ADD values .)
    LESS_EQUAL      reduce using rule 73 (expression -> expression ADD values .)
    GREATER         reduce using rule 73 (expression -> expression ADD values .)
    GREATER_EQUAL   reduce using rule 73 (expression -> expression ADD values .)
    CLOSE_PARENTHESIS reduce using rule 73 (expression -> expression ADD values .)
    AND             reduce using rule 73 (expression -> expression ADD values .)
    OR              reduce using rule 73 (expression -> expression ADD values .)
    XOR             reduce using rule 73 (expression -> expression ADD values .)


state 131

    (74) expression -> expression SUB values .

    ADD             reduce using rule 74 (expression -> expression SUB values .)
    SUB             reduce using rule 74 (expression -> expression SUB values .)
    DIV             reduce using rule 74 (expression -> expression SUB values .)
    MULT            reduce using rule 74 (expression -> expression SUB values .)
    MOD             reduce using rule 74 (expression -> expression SUB values .)
    POW             reduce using rule 74 (expression -> expression SUB values .)
    BITWISE_OR      reduce using rule 74 (expression -> expression SUB values .)
    BITWISE_AND     reduce using rule 74 (expression -> expression SUB values .)
    BITWISE_XOR     reduce using rule 74 (expression -> expression SUB values .)
    SEMICOLON       reduce using rule 74 (expression -> expression SUB values .)
    EQUAL           reduce using rule 74 (expression -> expression SUB values .)
    LESS            reduce using rule 74 (expression -> expression SUB values .)
    LESS_EQUAL      reduce using rule 74 (expression -> expression SUB values .)
    GREATER         reduce using rule 74 (expression -> expression SUB values .)
    GREATER_EQUAL   reduce using rule 74 (expression -> expression SUB values .)
    CLOSE_PARENTHESIS reduce using rule 74 (expression -> expression SUB values .)
    AND             reduce using rule 74 (expression -> expression SUB values .)
    OR              reduce using rule 74 (expression -> expression SUB values .)
    XOR             reduce using rule 74 (expression -> expression SUB values .)


state 132

    (75) expression -> expression DIV values .

    ADD             reduce using rule 75 (expression -> expression DIV values .)
    SUB             reduce using rule 75 (expression -> expression DIV values .)
    DIV             reduce using rule 75 (expression -> expression DIV values .)
    MULT            reduce using rule 75 (expression -> expression DIV values .)
    MOD             reduce using rule 75 (expression -> expression DIV values .)
    POW             reduce using rule 75 (expression -> expression DIV values .)
    BITWISE_OR      reduce using rule 75 (expression -> expression DIV values .)
    BITWISE_AND     reduce using rule 75 (expression -> expression DIV values .)
    BITWISE_XOR     reduce using rule 75 (expression -> expression DIV values .)
    SEMICOLON       reduce using rule 75 (expression -> expression DIV values .)
    EQUAL           reduce using rule 75 (expression -> expression DIV values .)
    LESS            reduce using rule 75 (expression -> expression DIV values .)
    LESS_EQUAL      reduce using rule 75 (expression -> expression DIV values .)
    GREATER         reduce using rule 75 (expression -> expression DIV values .)
    GREATER_EQUAL   reduce using rule 75 (expression -> expression DIV values .)
    CLOSE_PARENTHESIS reduce using rule 75 (expression -> expression DIV values .)
    AND             reduce using rule 75 (expression -> expression DIV values .)
    OR              reduce using rule 75 (expression -> expression DIV values .)
    XOR             reduce using rule 75 (expression -> expression DIV values .)


state 133

    (76) expression -> expression MULT values .

    ADD             reduce using rule 76 (expression -> expression MULT values .)
    SUB             reduce using rule 76 (expression -> expression MULT values .)
    DIV             reduce using rule 76 (expression -> expression MULT values .)
    MULT            reduce using rule 76 (expression -> expression MULT values .)
    MOD             reduce using rule 76 (expression -> expression MULT values .)
    POW             reduce using rule 76 (expression -> expression MULT values .)
    BITWISE_OR      reduce using rule 76 (expression -> expression MULT values .)
    BITWISE_AND     reduce using rule 76 (expression -> expression MULT values .)
    BITWISE_XOR     reduce using rule 76 (expression -> expression MULT values .)
    SEMICOLON       reduce using rule 76 (expression -> expression MULT values .)
    EQUAL           reduce using rule 76 (expression -> expression MULT values .)
    LESS            reduce using rule 76 (expression -> expression MULT values .)
    LESS_EQUAL      reduce using rule 76 (expression -> expression MULT values .)
    GREATER         reduce using rule 76 (expression -> expression MULT values .)
    GREATER_EQUAL   reduce using rule 76 (expression -> expression MULT values .)
    CLOSE_PARENTHESIS reduce using rule 76 (expression -> expression MULT values .)
    AND             reduce using rule 76 (expression -> expression MULT values .)
    OR              reduce using rule 76 (expression -> expression MULT values .)
    XOR             reduce using rule 76 (expression -> expression MULT values .)


state 134

    (77) expression -> expression MOD values .

    ADD             reduce using rule 77 (expression -> expression MOD values .)
    SUB             reduce using rule 77 (expression -> expression MOD values .)
    DIV             reduce using rule 77 (expression -> expression MOD values .)
    MULT            reduce using rule 77 (expression -> expression MOD values .)
    MOD             reduce using rule 77 (expression -> expression MOD values .)
    POW             reduce using rule 77 (expression -> expression MOD values .)
    BITWISE_OR      reduce using rule 77 (expression -> expression MOD values .)
    BITWISE_AND     reduce using rule 77 (expression -> expression MOD values .)
    BITWISE_XOR     reduce using rule 77 (expression -> expression MOD values .)
    SEMICOLON       reduce using rule 77 (expression -> expression MOD values .)
    EQUAL           reduce using rule 77 (expression -> expression MOD values .)
    LESS            reduce using rule 77 (expression -> expression MOD values .)
    LESS_EQUAL      reduce using rule 77 (expression -> expression MOD values .)
    GREATER         reduce using rule 77 (expression -> expression MOD values .)
    GREATER_EQUAL   reduce using rule 77 (expression -> expression MOD values .)
    CLOSE_PARENTHESIS reduce using rule 77 (expression -> expression MOD values .)
    AND             reduce using rule 77 (expression -> expression MOD values .)
    OR              reduce using rule 77 (expression -> expression MOD values .)
    XOR             reduce using rule 77 (expression -> expression MOD values .)


state 135

    (78) expression -> expression POW values .

    ADD             reduce using rule 78 (expression -> expression POW values .)
    SUB             reduce using rule 78 (expression -> expression POW values .)
    DIV             reduce using rule 78 (expression -> expression POW values .)
    MULT            reduce using rule 78 (expression -> expression POW values .)
    MOD             reduce using rule 78 (expression -> expression POW values .)
    POW             reduce using rule 78 (expression -> expression POW values .)
    BITWISE_OR      reduce using rule 78 (expression -> expression POW values .)
    BITWISE_AND     reduce using rule 78 (expression -> expression POW values .)
    BITWISE_XOR     reduce using rule 78 (expression -> expression POW values .)
    SEMICOLON       reduce using rule 78 (expression -> expression POW values .)
    EQUAL           reduce using rule 78 (expression -> expression POW values .)
    LESS            reduce using rule 78 (expression -> expression POW values .)
    LESS_EQUAL      reduce using rule 78 (expression -> expression POW values .)
    GREATER         reduce using rule 78 (expression -> expression POW values .)
    GREATER_EQUAL   reduce using rule 78 (expression -> expression POW values .)
    CLOSE_PARENTHESIS reduce using rule 78 (expression -> expression POW values .)
    AND             reduce using rule 78 (expression -> expression POW values .)
    OR              reduce using rule 78 (expression -> expression POW values .)
    XOR             reduce using rule 78 (expression -> expression POW values .)


state 136

    (79) expression -> expression BITWISE_OR values .

    ADD             reduce using rule 79 (expression -> expression BITWISE_OR values .)
    SUB             reduce using rule 79 (expression -> expression BITWISE_OR values .)
    DIV             reduce using rule 79 (expression -> expression BITWISE_OR values .)
    MULT            reduce using rule 79 (expression -> expression BITWISE_OR values .)
    MOD             reduce using rule 79 (expression -> expression BITWISE_OR values .)
    POW             reduce using rule 79 (expression -> expression BITWISE_OR values .)
    BITWISE_OR      reduce using rule 79 (expression -> expression BITWISE_OR values .)
    BITWISE_AND     reduce using rule 79 (expression -> expression BITWISE_OR values .)
    BITWISE_XOR     reduce using rule 79 (expression -> expression BITWISE_OR values .)
    SEMICOLON       reduce using rule 79 (expression -> expression BITWISE_OR values .)
    EQUAL           reduce using rule 79 (expression -> expression BITWISE_OR values .)
    LESS            reduce using rule 79 (expression -> expression BITWISE_OR values .)
    LESS_EQUAL      reduce using rule 79 (expression -> expression BITWISE_OR values .)
    GREATER         reduce using rule 79 (expression -> expression BITWISE_OR values .)
    GREATER_EQUAL   reduce using rule 79 (expression -> expression BITWISE_OR values .)
    CLOSE_PARENTHESIS reduce using rule 79 (expression -> expression BITWISE_OR values .)
    AND             reduce using rule 79 (expression -> expression BITWISE_OR values .)
    OR              reduce using rule 79 (expression -> expression BITWISE_OR values .)
    XOR             reduce using rule 79 (expression -> expression BITWISE_OR values .)


state 137

    (80) expression -> expression BITWISE_AND values .

    ADD             reduce using rule 80 (expression -> expression BITWISE_AND values .)
    SUB             reduce using rule 80 (expression -> expression BITWISE_AND values .)
    DIV             reduce using rule 80 (expression -> expression BITWISE_AND values .)
    MULT            reduce using rule 80 (expression -> expression BITWISE_AND values .)
    MOD             reduce using rule 80 (expression -> expression BITWISE_AND values .)
    POW             reduce using rule 80 (expression -> expression BITWISE_AND values .)
    BITWISE_OR      reduce using rule 80 (expression -> expression BITWISE_AND values .)
    BITWISE_AND     reduce using rule 80 (expression -> expression BITWISE_AND values .)
    BITWISE_XOR     reduce using rule 80 (expression -> expression BITWISE_AND values .)
    SEMICOLON       reduce using rule 80 (expression -> expression BITWISE_AND values .)
    EQUAL           reduce using rule 80 (expression -> expression BITWISE_AND values .)
    LESS            reduce using rule 80 (expression -> expression BITWISE_AND values .)
    LESS_EQUAL      reduce using rule 80 (expression -> expression BITWISE_AND values .)
    GREATER         reduce using rule 80 (expression -> expression BITWISE_AND values .)
    GREATER_EQUAL   reduce using rule 80 (expression -> expression BITWISE_AND values .)
    CLOSE_PARENTHESIS reduce using rule 80 (expression -> expression BITWISE_AND values .)
    AND             reduce using rule 80 (expression -> expression BITWISE_AND values .)
    OR              reduce using rule 80 (expression -> expression BITWISE_AND values .)
    XOR             reduce using rule 80 (expression -> expression BITWISE_AND values .)


state 138

    (81) expression -> expression BITWISE_XOR values .

    ADD             reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    SUB             reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    DIV             reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    MULT            reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    MOD             reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    POW             reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    BITWISE_OR      reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    BITWISE_AND     reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    BITWISE_XOR     reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    SEMICOLON       reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    EQUAL           reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    LESS            reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    LESS_EQUAL      reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    GREATER         reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    GREATER_EQUAL   reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    CLOSE_PARENTHESIS reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    AND             reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    OR              reduce using rule 81 (expression -> expression BITWISE_XOR values .)
    XOR             reduce using rule 81 (expression -> expression BITWISE_XOR values .)


state 139

    (82) expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .

    ADD             reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    SUB             reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    DIV             reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    MULT            reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    MOD             reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    POW             reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    BITWISE_OR      reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    BITWISE_AND     reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    EQUAL           reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    LESS            reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    GREATER         reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    AND             reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    OR              reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    XOR             reduce using rule 82 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)


state 140

    (36) while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .

    CLOSE_BRACE     reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    WHILE           reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    THE_1           reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    YOU             reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    GO              reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    ID              reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    IF              reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    UNSIGNED        reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    SHORT           reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    INT             reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    LONG            reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    FLOAT           reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    DOUBLE          reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    CHAR            reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    STRING          reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    BOOL            reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    VOID            reduce using rule 36 (while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)


state 141

    (49) comparasion_list -> comparasion_list logic_operator comparasion .

    CLOSE_PARENTHESIS reduce using rule 49 (comparasion_list -> comparasion_list logic_operator comparasion .)
    AND             reduce using rule 49 (comparasion_list -> comparasion_list logic_operator comparasion .)
    OR              reduce using rule 49 (comparasion_list -> comparasion_list logic_operator comparasion .)
    XOR             reduce using rule 49 (comparasion_list -> comparasion_list logic_operator comparasion .)


state 142

    (51) comparasion -> expression value_operators expression .
    (73) expression -> expression . ADD values
    (74) expression -> expression . SUB values
    (75) expression -> expression . DIV values
    (76) expression -> expression . MULT values
    (77) expression -> expression . MOD values
    (78) expression -> expression . POW values
    (79) expression -> expression . BITWISE_OR values
    (80) expression -> expression . BITWISE_AND values
    (81) expression -> expression . BITWISE_XOR values

    CLOSE_PARENTHESIS reduce using rule 51 (comparasion -> expression value_operators expression .)
    AND             reduce using rule 51 (comparasion -> expression value_operators expression .)
    OR              reduce using rule 51 (comparasion -> expression value_operators expression .)
    XOR             reduce using rule 51 (comparasion -> expression value_operators expression .)
    ADD             shift and go to state 100
    SUB             shift and go to state 101
    DIV             shift and go to state 102
    MULT            shift and go to state 103
    MOD             shift and go to state 104
    POW             shift and go to state 105
    BITWISE_OR      shift and go to state 106
    BITWISE_AND     shift and go to state 107
    BITWISE_XOR     shift and go to state 108


state 143

    (43) elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS . comparasion_list CLOSE_PARENTHESIS block
    (48) comparasion_list -> . comparasion
    (49) comparasion_list -> . comparasion_list logic_operator comparasion
    (50) comparasion -> . expression
    (51) comparasion -> . expression value_operators expression
    (73) expression -> . expression ADD values
    (74) expression -> . expression SUB values
    (75) expression -> . expression DIV values
    (76) expression -> . expression MULT values
    (77) expression -> . expression MOD values
    (78) expression -> . expression POW values
    (79) expression -> . expression BITWISE_OR values
    (80) expression -> . expression BITWISE_AND values
    (81) expression -> . expression BITWISE_XOR values
    (82) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (83) expression -> . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    OPEN_PARENTHESIS shift and go to state 78
    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    comparasion_list               shift and go to state 148
    comparasion                    shift and go to state 88
    expression                     shift and go to state 89
    values                         shift and go to state 79
    literal                        shift and go to state 80

state 144

    (45) return_statement -> GO BACK TO THE_2 ABYSS .
    (46) return_statement -> GO BACK TO THE_2 ABYSS . ID
    (47) return_statement -> GO BACK TO THE_2 ABYSS . literal
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    SEMICOLON       reduce using rule 45 (return_statement -> GO BACK TO THE_2 ABYSS .)
    ID              shift and go to state 149
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    literal                        shift and go to state 150

state 145

    (40) if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .

    HOWEVER         reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    ELSE            reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    CLOSE_BRACE     reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    WHILE           reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    THE_1           reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    YOU             reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    GO              reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    ID              reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    IF              reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    UNSIGNED        reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    SHORT           reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    INT             reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    LONG            reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    FLOAT           reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    DOUBLE          reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    CHAR            reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    STRING          reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    BOOL            reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    VOID            reduce using rule 40 (if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)


state 146

    (68) call_function -> ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS .

    SEMICOLON       reduce using rule 68 (call_function -> ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS .)


state 147

    (72) args_list -> args_list COMMA . values
    (84) values -> . literal
    (85) values -> . ID
    (60) literal -> . INT_LITERAL
    (61) literal -> . FLOAT_LITERAL
    (62) literal -> . CHAR_LITERAL
    (63) literal -> . STRING_LITERAL
    (64) literal -> . BOOL_FALSE
    (65) literal -> . BOOL_TRUE

    ID              shift and go to state 90
    INT_LITERAL     shift and go to state 81
    FLOAT_LITERAL   shift and go to state 82
    CHAR_LITERAL    shift and go to state 83
    STRING_LITERAL  shift and go to state 84
    BOOL_FALSE      shift and go to state 85
    BOOL_TRUE       shift and go to state 86

    values                         shift and go to state 151
    literal                        shift and go to state 80

state 148

    (43) elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list . CLOSE_PARENTHESIS block
    (49) comparasion_list -> comparasion_list . logic_operator comparasion
    (57) logic_operator -> . AND
    (58) logic_operator -> . OR
    (59) logic_operator -> . XOR

    CLOSE_PARENTHESIS shift and go to state 152
    AND             shift and go to state 112
    OR              shift and go to state 113
    XOR             shift and go to state 114

    logic_operator                 shift and go to state 111

state 149

    (46) return_statement -> GO BACK TO THE_2 ABYSS ID .

    SEMICOLON       reduce using rule 46 (return_statement -> GO BACK TO THE_2 ABYSS ID .)


state 150

    (47) return_statement -> GO BACK TO THE_2 ABYSS literal .

    SEMICOLON       reduce using rule 47 (return_statement -> GO BACK TO THE_2 ABYSS literal .)


state 151

    (72) args_list -> args_list COMMA values .

    COMMA           reduce using rule 72 (args_list -> args_list COMMA values .)
    CLOSE_PARENTHESIS reduce using rule 72 (args_list -> args_list COMMA values .)


state 152

    (43) elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS . block
    (26) block -> . OPEN_BRACE statements_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 36

    block                          shift and go to state 153

state 153

    (43) elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .

    HOWEVER         reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    ELSE            reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    CLOSE_BRACE     reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    WHILE           reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    THE_1           reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    YOU             reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    GO              reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    ID              reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    IF              reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    UNSIGNED        reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    SHORT           reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    INT             reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    LONG            reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    FLOAT           reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    DOUBLE          reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    CHAR            reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    STRING          reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    BOOL            reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)
    VOID            reduce using rule 43 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block .)

