Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> global main_statement
Rule 2     global -> declaration_statement end global
Rule 3     global -> function_statement global
Rule 4     global -> empty
Rule 5     function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block
Rule 6     params -> params_list
Rule 7     params -> empty
Rule 8     params_list -> declaration_statement
Rule 9     params_list -> params_list COMMA declaration_statement
Rule 10    main_statement -> THE_1 JOURNEY BEGINS HERE block
Rule 11    declaration_statement -> type ID
Rule 12    declaration_statement_list -> declaration_statement
Rule 13    declaration_statement_list -> declaration_statement_list COMMA ID
Rule 14    type -> UNSIGNED
Rule 15    type -> SHORT
Rule 16    type -> INT
Rule 17    type -> LONG
Rule 18    type -> FLOAT
Rule 19    type -> DOUBLE
Rule 20    type -> CHAR
Rule 21    type -> STRING
Rule 22    type -> BOOL
Rule 23    type -> VOID
Rule 24    end -> SEMICOLON
Rule 25    end -> EXCLAMATION
Rule 26    end -> error_end
Rule 27    error_end -> NEWLINE
Rule 28    empty -> <empty>
Rule 29    block -> OPEN_BRACE statements_list CLOSE_BRACE
Rule 30    statements_list -> statements_list statements
Rule 31    statements_list -> empty
Rule 32    statements -> declaration_statement_list end
Rule 33    statements -> while_statement
Rule 34    statements -> continue_statement end
Rule 35    statements -> break_statement end
Rule 36    statements -> if_else_statement
Rule 37    statements -> return_statement end
Rule 38    statements -> assign_statement end
Rule 39    while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block
Rule 40    continue_statement -> THE_1 QUEST CONTINUES
Rule 41    break_statement -> YOU SHALL NOT PASS
Rule 42    if_else_statement -> if_statement elif_statement else_statement
Rule 43    if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block
Rule 44    else_statement -> ELSE block
Rule 45    else_statement -> empty
Rule 46    elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block
Rule 47    elif_statement -> empty
Rule 48    return_statement -> GO BACK TO THE_2 ABYSS
Rule 49    return_statement -> GO BACK TO THE_2 ABYSS expression
Rule 50    comparison_list -> comparison
Rule 51    comparison_list -> comparison_list logic_operator comparison
Rule 52    comparison -> expression
Rule 53    comparison -> expression value_operators expression
Rule 54    value_operators -> EQUAL
Rule 55    value_operators -> LESS
Rule 56    value_operators -> LESS_EQUAL
Rule 57    value_operators -> GREATER
Rule 58    value_operators -> GREATER_EQUAL
Rule 59    value_operators -> DIFF
Rule 60    logic_operator -> AND
Rule 61    logic_operator -> OR
Rule 62    logic_operator -> XOR
Rule 63    literal -> INT_LITERAL
Rule 64    literal -> FLOAT_LITERAL
Rule 65    literal -> CHAR_LITERAL
Rule 66    literal -> STRING_LITERAL
Rule 67    literal -> BOOL_FALSE
Rule 68    literal -> BOOL_TRUE
Rule 69    assign_statement -> ID ASSIGN call_function
Rule 70    assign_statement -> ID ASSIGN expression
Rule 71    call_function -> ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS
Rule 72    args -> args_list
Rule 73    args -> empty
Rule 74    args_list -> expression
Rule 75    args_list -> args_list COMMA expression
Rule 76    expression -> expression ADD values
Rule 77    expression -> expression SUB values
Rule 78    expression -> expression DIV values
Rule 79    expression -> expression MULT values
Rule 80    expression -> expression MOD values
Rule 81    expression -> expression POW values
Rule 82    expression -> expression BITWISE_OR values
Rule 83    expression -> expression BITWISE_AND values
Rule 84    expression -> expression BITWISE_XOR values
Rule 85    expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
Rule 86    expression -> values
Rule 87    values -> literal
Rule 88    values -> ID
Rule 89    expression -> SUB expression
Rule 90    expression -> BITWISE_NOT expression

Terminals, with rules where they appear

ABYSS                : 48 49
ADD                  : 76
AND                  : 60
ASSIGN               : 69 70
BACK                 : 48 49
BEGINS               : 10
BITWISE_AND          : 83
BITWISE_NOT          : 90
BITWISE_OR           : 82
BITWISE_XOR          : 84
BOOL                 : 22
BOOL_FALSE           : 67
BOOL_TRUE            : 68
CHAR                 : 20
CHAR_LITERAL         : 65
CLOSE_BRACE          : 29
CLOSE_PARENTHESIS    : 5 39 43 46 71 85
COMMA                : 9 13 75
CONTINUES            : 40
DIFF                 : 59
DIV                  : 78
DOUBLE               : 19
ELSE                 : 44
EQUAL                : 54
EXCLAMATION          : 25
FLOAT                : 18
FLOAT_LITERAL        : 64
FUNCTION             : 5
GO                   : 48 49
GREATER              : 57
GREATER_EQUAL        : 58
HERE                 : 10
HOWEVER              : 46
ID                   : 5 11 13 69 70 71 88
IF                   : 43
INT                  : 16
INT_LITERAL          : 63
JOURNEY              : 10
LESS                 : 55
LESS_EQUAL           : 56
LONG                 : 17
MOD                  : 80
MULT                 : 79
NEWLINE              : 27
NOT                  : 41
OPEN_BRACE           : 29
OPEN_PARENTHESIS     : 5 39 43 46 71 85
OR                   : 61
PASS                 : 41
POW                  : 81
QUEST                : 40
SEMICOLON            : 24
SHALL                : 41
SHORT                : 15
STRING               : 21
STRING_LITERAL       : 66
SUB                  : 77 89
THE_1                : 10 40
THE_2                : 48 49
TO                   : 48 49
UNSIGNED             : 14
VOID                 : 23
WHEN                 : 46
WHILE                : 39
XOR                  : 62
YOU                  : 41
error                : 

Nonterminals, with rules where they appear

args                 : 71
args_list            : 72 75
assign_statement     : 38
block                : 5 10 39 43 44 46
break_statement      : 35
call_function        : 69
comparison           : 50 51
comparison_list      : 39 43 46 51
continue_statement   : 34
declaration_statement : 2 8 9 12
declaration_statement_list : 13 32
elif_statement       : 42 46
else_statement       : 42
empty                : 4 7 31 45 47 73
end                  : 2 32 34 35 37 38
error_end            : 26
expression           : 49 52 53 53 70 74 75 76 77 78 79 80 81 82 83 84 85 89 90
function_statement   : 3
global               : 1 2 3
if_else_statement    : 36
if_statement         : 42
literal              : 87
logic_operator       : 51
main_statement       : 1
params               : 5
params_list          : 6 9
program              : 0
return_statement     : 37
statements           : 30
statements_list      : 29 30
type                 : 5 11
value_operators      : 53
values               : 76 77 78 79 80 81 82 83 84 86
while_statement      : 33

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global main_statement
    (2) global -> . declaration_statement end global
    (3) global -> . function_statement global
    (4) global -> . empty
    (11) declaration_statement -> . type ID
    (5) function_statement -> . FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block
    (28) empty -> .
    (14) type -> . UNSIGNED
    (15) type -> . SHORT
    (16) type -> . INT
    (17) type -> . LONG
    (18) type -> . FLOAT
    (19) type -> . DOUBLE
    (20) type -> . CHAR
    (21) type -> . STRING
    (22) type -> . BOOL
    (23) type -> . VOID

    FUNCTION        shift and go to state 7
    THE_1           reduce using rule 28 (empty -> .)
    UNSIGNED        shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 15
    BOOL            shift and go to state 16
    VOID            shift and go to state 17

    program                        shift and go to state 1
    global                         shift and go to state 2
    declaration_statement          shift and go to state 3
    function_statement             shift and go to state 4
    empty                          shift and go to state 5
    type                           shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> global . main_statement
    (10) main_statement -> . THE_1 JOURNEY BEGINS HERE block

    THE_1           shift and go to state 19

    main_statement                 shift and go to state 18

state 3

    (2) global -> declaration_statement . end global
    (24) end -> . SEMICOLON
    (25) end -> . EXCLAMATION
    (26) end -> . error_end
    (27) error_end -> . NEWLINE

    SEMICOLON       shift and go to state 21
    EXCLAMATION     shift and go to state 22
    NEWLINE         shift and go to state 24

    end                            shift and go to state 20
    error_end                      shift and go to state 23

state 4

    (3) global -> function_statement . global
    (2) global -> . declaration_statement end global
    (3) global -> . function_statement global
    (4) global -> . empty
    (11) declaration_statement -> . type ID
    (5) function_statement -> . FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block
    (28) empty -> .
    (14) type -> . UNSIGNED
    (15) type -> . SHORT
    (16) type -> . INT
    (17) type -> . LONG
    (18) type -> . FLOAT
    (19) type -> . DOUBLE
    (20) type -> . CHAR
    (21) type -> . STRING
    (22) type -> . BOOL
    (23) type -> . VOID

    FUNCTION        shift and go to state 7
    THE_1           reduce using rule 28 (empty -> .)
    UNSIGNED        shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 15
    BOOL            shift and go to state 16
    VOID            shift and go to state 17

    function_statement             shift and go to state 4
    global                         shift and go to state 25
    declaration_statement          shift and go to state 3
    empty                          shift and go to state 5
    type                           shift and go to state 6

state 5

    (4) global -> empty .

    THE_1           reduce using rule 4 (global -> empty .)


state 6

    (11) declaration_statement -> type . ID

    ID              shift and go to state 26


state 7

    (5) function_statement -> FUNCTION . type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block
    (14) type -> . UNSIGNED
    (15) type -> . SHORT
    (16) type -> . INT
    (17) type -> . LONG
    (18) type -> . FLOAT
    (19) type -> . DOUBLE
    (20) type -> . CHAR
    (21) type -> . STRING
    (22) type -> . BOOL
    (23) type -> . VOID

    UNSIGNED        shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 15
    BOOL            shift and go to state 16
    VOID            shift and go to state 17

    type                           shift and go to state 27

state 8

    (14) type -> UNSIGNED .

    ID              reduce using rule 14 (type -> UNSIGNED .)


state 9

    (15) type -> SHORT .

    ID              reduce using rule 15 (type -> SHORT .)


state 10

    (16) type -> INT .

    ID              reduce using rule 16 (type -> INT .)


state 11

    (17) type -> LONG .

    ID              reduce using rule 17 (type -> LONG .)


state 12

    (18) type -> FLOAT .

    ID              reduce using rule 18 (type -> FLOAT .)


state 13

    (19) type -> DOUBLE .

    ID              reduce using rule 19 (type -> DOUBLE .)


state 14

    (20) type -> CHAR .

    ID              reduce using rule 20 (type -> CHAR .)


state 15

    (21) type -> STRING .

    ID              reduce using rule 21 (type -> STRING .)


state 16

    (22) type -> BOOL .

    ID              reduce using rule 22 (type -> BOOL .)


state 17

    (23) type -> VOID .

    ID              reduce using rule 23 (type -> VOID .)


state 18

    (1) program -> global main_statement .

    $end            reduce using rule 1 (program -> global main_statement .)


state 19

    (10) main_statement -> THE_1 . JOURNEY BEGINS HERE block

    JOURNEY         shift and go to state 28


state 20

    (2) global -> declaration_statement end . global
    (2) global -> . declaration_statement end global
    (3) global -> . function_statement global
    (4) global -> . empty
    (11) declaration_statement -> . type ID
    (5) function_statement -> . FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block
    (28) empty -> .
    (14) type -> . UNSIGNED
    (15) type -> . SHORT
    (16) type -> . INT
    (17) type -> . LONG
    (18) type -> . FLOAT
    (19) type -> . DOUBLE
    (20) type -> . CHAR
    (21) type -> . STRING
    (22) type -> . BOOL
    (23) type -> . VOID

    FUNCTION        shift and go to state 7
    THE_1           reduce using rule 28 (empty -> .)
    UNSIGNED        shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 15
    BOOL            shift and go to state 16
    VOID            shift and go to state 17

    declaration_statement          shift and go to state 3
    global                         shift and go to state 29
    function_statement             shift and go to state 4
    empty                          shift and go to state 5
    type                           shift and go to state 6

state 21

    (24) end -> SEMICOLON .

    FUNCTION        reduce using rule 24 (end -> SEMICOLON .)
    UNSIGNED        reduce using rule 24 (end -> SEMICOLON .)
    SHORT           reduce using rule 24 (end -> SEMICOLON .)
    INT             reduce using rule 24 (end -> SEMICOLON .)
    LONG            reduce using rule 24 (end -> SEMICOLON .)
    FLOAT           reduce using rule 24 (end -> SEMICOLON .)
    DOUBLE          reduce using rule 24 (end -> SEMICOLON .)
    CHAR            reduce using rule 24 (end -> SEMICOLON .)
    STRING          reduce using rule 24 (end -> SEMICOLON .)
    BOOL            reduce using rule 24 (end -> SEMICOLON .)
    VOID            reduce using rule 24 (end -> SEMICOLON .)
    THE_1           reduce using rule 24 (end -> SEMICOLON .)
    CLOSE_BRACE     reduce using rule 24 (end -> SEMICOLON .)
    WHILE           reduce using rule 24 (end -> SEMICOLON .)
    YOU             reduce using rule 24 (end -> SEMICOLON .)
    GO              reduce using rule 24 (end -> SEMICOLON .)
    ID              reduce using rule 24 (end -> SEMICOLON .)
    IF              reduce using rule 24 (end -> SEMICOLON .)


state 22

    (25) end -> EXCLAMATION .

    FUNCTION        reduce using rule 25 (end -> EXCLAMATION .)
    UNSIGNED        reduce using rule 25 (end -> EXCLAMATION .)
    SHORT           reduce using rule 25 (end -> EXCLAMATION .)
    INT             reduce using rule 25 (end -> EXCLAMATION .)
    LONG            reduce using rule 25 (end -> EXCLAMATION .)
    FLOAT           reduce using rule 25 (end -> EXCLAMATION .)
    DOUBLE          reduce using rule 25 (end -> EXCLAMATION .)
    CHAR            reduce using rule 25 (end -> EXCLAMATION .)
    STRING          reduce using rule 25 (end -> EXCLAMATION .)
    BOOL            reduce using rule 25 (end -> EXCLAMATION .)
    VOID            reduce using rule 25 (end -> EXCLAMATION .)
    THE_1           reduce using rule 25 (end -> EXCLAMATION .)
    CLOSE_BRACE     reduce using rule 25 (end -> EXCLAMATION .)
    WHILE           reduce using rule 25 (end -> EXCLAMATION .)
    YOU             reduce using rule 25 (end -> EXCLAMATION .)
    GO              reduce using rule 25 (end -> EXCLAMATION .)
    ID              reduce using rule 25 (end -> EXCLAMATION .)
    IF              reduce using rule 25 (end -> EXCLAMATION .)


state 23

    (26) end -> error_end .

    FUNCTION        reduce using rule 26 (end -> error_end .)
    UNSIGNED        reduce using rule 26 (end -> error_end .)
    SHORT           reduce using rule 26 (end -> error_end .)
    INT             reduce using rule 26 (end -> error_end .)
    LONG            reduce using rule 26 (end -> error_end .)
    FLOAT           reduce using rule 26 (end -> error_end .)
    DOUBLE          reduce using rule 26 (end -> error_end .)
    CHAR            reduce using rule 26 (end -> error_end .)
    STRING          reduce using rule 26 (end -> error_end .)
    BOOL            reduce using rule 26 (end -> error_end .)
    VOID            reduce using rule 26 (end -> error_end .)
    THE_1           reduce using rule 26 (end -> error_end .)
    CLOSE_BRACE     reduce using rule 26 (end -> error_end .)
    WHILE           reduce using rule 26 (end -> error_end .)
    YOU             reduce using rule 26 (end -> error_end .)
    GO              reduce using rule 26 (end -> error_end .)
    ID              reduce using rule 26 (end -> error_end .)
    IF              reduce using rule 26 (end -> error_end .)


state 24

    (27) error_end -> NEWLINE .

    FUNCTION        reduce using rule 27 (error_end -> NEWLINE .)
    UNSIGNED        reduce using rule 27 (error_end -> NEWLINE .)
    SHORT           reduce using rule 27 (error_end -> NEWLINE .)
    INT             reduce using rule 27 (error_end -> NEWLINE .)
    LONG            reduce using rule 27 (error_end -> NEWLINE .)
    FLOAT           reduce using rule 27 (error_end -> NEWLINE .)
    DOUBLE          reduce using rule 27 (error_end -> NEWLINE .)
    CHAR            reduce using rule 27 (error_end -> NEWLINE .)
    STRING          reduce using rule 27 (error_end -> NEWLINE .)
    BOOL            reduce using rule 27 (error_end -> NEWLINE .)
    VOID            reduce using rule 27 (error_end -> NEWLINE .)
    THE_1           reduce using rule 27 (error_end -> NEWLINE .)
    CLOSE_BRACE     reduce using rule 27 (error_end -> NEWLINE .)
    WHILE           reduce using rule 27 (error_end -> NEWLINE .)
    YOU             reduce using rule 27 (error_end -> NEWLINE .)
    GO              reduce using rule 27 (error_end -> NEWLINE .)
    ID              reduce using rule 27 (error_end -> NEWLINE .)
    IF              reduce using rule 27 (error_end -> NEWLINE .)


state 25

    (3) global -> function_statement global .

    THE_1           reduce using rule 3 (global -> function_statement global .)


state 26

    (11) declaration_statement -> type ID .

    SEMICOLON       reduce using rule 11 (declaration_statement -> type ID .)
    EXCLAMATION     reduce using rule 11 (declaration_statement -> type ID .)
    NEWLINE         reduce using rule 11 (declaration_statement -> type ID .)
    COMMA           reduce using rule 11 (declaration_statement -> type ID .)
    CLOSE_PARENTHESIS reduce using rule 11 (declaration_statement -> type ID .)


state 27

    (5) function_statement -> FUNCTION type . ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block

    ID              shift and go to state 30


state 28

    (10) main_statement -> THE_1 JOURNEY . BEGINS HERE block

    BEGINS          shift and go to state 31


state 29

    (2) global -> declaration_statement end global .

    THE_1           reduce using rule 2 (global -> declaration_statement end global .)


state 30

    (5) function_statement -> FUNCTION type ID . OPEN_PARENTHESIS params CLOSE_PARENTHESIS block

    OPEN_PARENTHESIS shift and go to state 32


state 31

    (10) main_statement -> THE_1 JOURNEY BEGINS . HERE block

    HERE            shift and go to state 33


state 32

    (5) function_statement -> FUNCTION type ID OPEN_PARENTHESIS . params CLOSE_PARENTHESIS block
    (6) params -> . params_list
    (7) params -> . empty
    (8) params_list -> . declaration_statement
    (9) params_list -> . params_list COMMA declaration_statement
    (28) empty -> .
    (11) declaration_statement -> . type ID
    (14) type -> . UNSIGNED
    (15) type -> . SHORT
    (16) type -> . INT
    (17) type -> . LONG
    (18) type -> . FLOAT
    (19) type -> . DOUBLE
    (20) type -> . CHAR
    (21) type -> . STRING
    (22) type -> . BOOL
    (23) type -> . VOID

    CLOSE_PARENTHESIS reduce using rule 28 (empty -> .)
    UNSIGNED        shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 15
    BOOL            shift and go to state 16
    VOID            shift and go to state 17

    type                           shift and go to state 6
    params                         shift and go to state 34
    params_list                    shift and go to state 35
    empty                          shift and go to state 36
    declaration_statement          shift and go to state 37

state 33

    (10) main_statement -> THE_1 JOURNEY BEGINS HERE . block
    (29) block -> . OPEN_BRACE statements_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 39

    block                          shift and go to state 38

state 34

    (5) function_statement -> FUNCTION type ID OPEN_PARENTHESIS params . CLOSE_PARENTHESIS block

    CLOSE_PARENTHESIS shift and go to state 40


state 35

    (6) params -> params_list .
    (9) params_list -> params_list . COMMA declaration_statement

    CLOSE_PARENTHESIS reduce using rule 6 (params -> params_list .)
    COMMA           shift and go to state 41


state 36

    (7) params -> empty .

    CLOSE_PARENTHESIS reduce using rule 7 (params -> empty .)


state 37

    (8) params_list -> declaration_statement .

    COMMA           reduce using rule 8 (params_list -> declaration_statement .)
    CLOSE_PARENTHESIS reduce using rule 8 (params_list -> declaration_statement .)


state 38

    (10) main_statement -> THE_1 JOURNEY BEGINS HERE block .

    $end            reduce using rule 10 (main_statement -> THE_1 JOURNEY BEGINS HERE block .)


state 39

    (29) block -> OPEN_BRACE . statements_list CLOSE_BRACE
    (30) statements_list -> . statements_list statements
    (31) statements_list -> . empty
    (28) empty -> .

    CLOSE_BRACE     reduce using rule 28 (empty -> .)
    WHILE           reduce using rule 28 (empty -> .)
    THE_1           reduce using rule 28 (empty -> .)
    YOU             reduce using rule 28 (empty -> .)
    GO              reduce using rule 28 (empty -> .)
    ID              reduce using rule 28 (empty -> .)
    IF              reduce using rule 28 (empty -> .)
    UNSIGNED        reduce using rule 28 (empty -> .)
    SHORT           reduce using rule 28 (empty -> .)
    INT             reduce using rule 28 (empty -> .)
    LONG            reduce using rule 28 (empty -> .)
    FLOAT           reduce using rule 28 (empty -> .)
    DOUBLE          reduce using rule 28 (empty -> .)
    CHAR            reduce using rule 28 (empty -> .)
    STRING          reduce using rule 28 (empty -> .)
    BOOL            reduce using rule 28 (empty -> .)
    VOID            reduce using rule 28 (empty -> .)

    statements_list                shift and go to state 42
    empty                          shift and go to state 43

state 40

    (5) function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS . block
    (29) block -> . OPEN_BRACE statements_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 39

    block                          shift and go to state 44

state 41

    (9) params_list -> params_list COMMA . declaration_statement
    (11) declaration_statement -> . type ID
    (14) type -> . UNSIGNED
    (15) type -> . SHORT
    (16) type -> . INT
    (17) type -> . LONG
    (18) type -> . FLOAT
    (19) type -> . DOUBLE
    (20) type -> . CHAR
    (21) type -> . STRING
    (22) type -> . BOOL
    (23) type -> . VOID

    UNSIGNED        shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 15
    BOOL            shift and go to state 16
    VOID            shift and go to state 17

    declaration_statement          shift and go to state 45
    type                           shift and go to state 6

state 42

    (29) block -> OPEN_BRACE statements_list . CLOSE_BRACE
    (30) statements_list -> statements_list . statements
    (32) statements -> . declaration_statement_list end
    (33) statements -> . while_statement
    (34) statements -> . continue_statement end
    (35) statements -> . break_statement end
    (36) statements -> . if_else_statement
    (37) statements -> . return_statement end
    (38) statements -> . assign_statement end
    (12) declaration_statement_list -> . declaration_statement
    (13) declaration_statement_list -> . declaration_statement_list COMMA ID
    (39) while_statement -> . WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block
    (40) continue_statement -> . THE_1 QUEST CONTINUES
    (41) break_statement -> . YOU SHALL NOT PASS
    (42) if_else_statement -> . if_statement elif_statement else_statement
    (48) return_statement -> . GO BACK TO THE_2 ABYSS
    (49) return_statement -> . GO BACK TO THE_2 ABYSS expression
    (69) assign_statement -> . ID ASSIGN call_function
    (70) assign_statement -> . ID ASSIGN expression
    (11) declaration_statement -> . type ID
    (43) if_statement -> . IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block
    (14) type -> . UNSIGNED
    (15) type -> . SHORT
    (16) type -> . INT
    (17) type -> . LONG
    (18) type -> . FLOAT
    (19) type -> . DOUBLE
    (20) type -> . CHAR
    (21) type -> . STRING
    (22) type -> . BOOL
    (23) type -> . VOID

    CLOSE_BRACE     shift and go to state 46
    WHILE           shift and go to state 57
    THE_1           shift and go to state 58
    YOU             shift and go to state 59
    GO              shift and go to state 61
    ID              shift and go to state 56
    IF              shift and go to state 62
    UNSIGNED        shift and go to state 8
    SHORT           shift and go to state 9
    INT             shift and go to state 10
    LONG            shift and go to state 11
    FLOAT           shift and go to state 12
    DOUBLE          shift and go to state 13
    CHAR            shift and go to state 14
    STRING          shift and go to state 15
    BOOL            shift and go to state 16
    VOID            shift and go to state 17

    statements                     shift and go to state 47
    declaration_statement_list     shift and go to state 48
    while_statement                shift and go to state 49
    continue_statement             shift and go to state 50
    break_statement                shift and go to state 51
    if_else_statement              shift and go to state 52
    return_statement               shift and go to state 53
    assign_statement               shift and go to state 54
    declaration_statement          shift and go to state 55
    if_statement                   shift and go to state 60
    type                           shift and go to state 6

state 43

    (31) statements_list -> empty .

    CLOSE_BRACE     reduce using rule 31 (statements_list -> empty .)
    WHILE           reduce using rule 31 (statements_list -> empty .)
    THE_1           reduce using rule 31 (statements_list -> empty .)
    YOU             reduce using rule 31 (statements_list -> empty .)
    GO              reduce using rule 31 (statements_list -> empty .)
    ID              reduce using rule 31 (statements_list -> empty .)
    IF              reduce using rule 31 (statements_list -> empty .)
    UNSIGNED        reduce using rule 31 (statements_list -> empty .)
    SHORT           reduce using rule 31 (statements_list -> empty .)
    INT             reduce using rule 31 (statements_list -> empty .)
    LONG            reduce using rule 31 (statements_list -> empty .)
    FLOAT           reduce using rule 31 (statements_list -> empty .)
    DOUBLE          reduce using rule 31 (statements_list -> empty .)
    CHAR            reduce using rule 31 (statements_list -> empty .)
    STRING          reduce using rule 31 (statements_list -> empty .)
    BOOL            reduce using rule 31 (statements_list -> empty .)
    VOID            reduce using rule 31 (statements_list -> empty .)


state 44

    (5) function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .

    FUNCTION        reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    UNSIGNED        reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    SHORT           reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    INT             reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    LONG            reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    FLOAT           reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    DOUBLE          reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    CHAR            reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    STRING          reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    BOOL            reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    VOID            reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)
    THE_1           reduce using rule 5 (function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block .)


state 45

    (9) params_list -> params_list COMMA declaration_statement .

    COMMA           reduce using rule 9 (params_list -> params_list COMMA declaration_statement .)
    CLOSE_PARENTHESIS reduce using rule 9 (params_list -> params_list COMMA declaration_statement .)


state 46

    (29) block -> OPEN_BRACE statements_list CLOSE_BRACE .

    $end            reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    FUNCTION        reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    UNSIGNED        reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    SHORT           reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    INT             reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    LONG            reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    FLOAT           reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    DOUBLE          reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    CHAR            reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    STRING          reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    BOOL            reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    VOID            reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    THE_1           reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    CLOSE_BRACE     reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    WHILE           reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    YOU             reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    GO              reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    ID              reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    IF              reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    HOWEVER         reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)
    ELSE            reduce using rule 29 (block -> OPEN_BRACE statements_list CLOSE_BRACE .)


state 47

    (30) statements_list -> statements_list statements .

    CLOSE_BRACE     reduce using rule 30 (statements_list -> statements_list statements .)
    WHILE           reduce using rule 30 (statements_list -> statements_list statements .)
    THE_1           reduce using rule 30 (statements_list -> statements_list statements .)
    YOU             reduce using rule 30 (statements_list -> statements_list statements .)
    GO              reduce using rule 30 (statements_list -> statements_list statements .)
    ID              reduce using rule 30 (statements_list -> statements_list statements .)
    IF              reduce using rule 30 (statements_list -> statements_list statements .)
    UNSIGNED        reduce using rule 30 (statements_list -> statements_list statements .)
    SHORT           reduce using rule 30 (statements_list -> statements_list statements .)
    INT             reduce using rule 30 (statements_list -> statements_list statements .)
    LONG            reduce using rule 30 (statements_list -> statements_list statements .)
    FLOAT           reduce using rule 30 (statements_list -> statements_list statements .)
    DOUBLE          reduce using rule 30 (statements_list -> statements_list statements .)
    CHAR            reduce using rule 30 (statements_list -> statements_list statements .)
    STRING          reduce using rule 30 (statements_list -> statements_list statements .)
    BOOL            reduce using rule 30 (statements_list -> statements_list statements .)
    VOID            reduce using rule 30 (statements_list -> statements_list statements .)


state 48

    (32) statements -> declaration_statement_list . end
    (13) declaration_statement_list -> declaration_statement_list . COMMA ID
    (24) end -> . SEMICOLON
    (25) end -> . EXCLAMATION
    (26) end -> . error_end
    (27) error_end -> . NEWLINE

    COMMA           shift and go to state 64
    SEMICOLON       shift and go to state 21
    EXCLAMATION     shift and go to state 22
    NEWLINE         shift and go to state 24

    end                            shift and go to state 63
    error_end                      shift and go to state 23

state 49

    (33) statements -> while_statement .

    CLOSE_BRACE     reduce using rule 33 (statements -> while_statement .)
    WHILE           reduce using rule 33 (statements -> while_statement .)
    THE_1           reduce using rule 33 (statements -> while_statement .)
    YOU             reduce using rule 33 (statements -> while_statement .)
    GO              reduce using rule 33 (statements -> while_statement .)
    ID              reduce using rule 33 (statements -> while_statement .)
    IF              reduce using rule 33 (statements -> while_statement .)
    UNSIGNED        reduce using rule 33 (statements -> while_statement .)
    SHORT           reduce using rule 33 (statements -> while_statement .)
    INT             reduce using rule 33 (statements -> while_statement .)
    LONG            reduce using rule 33 (statements -> while_statement .)
    FLOAT           reduce using rule 33 (statements -> while_statement .)
    DOUBLE          reduce using rule 33 (statements -> while_statement .)
    CHAR            reduce using rule 33 (statements -> while_statement .)
    STRING          reduce using rule 33 (statements -> while_statement .)
    BOOL            reduce using rule 33 (statements -> while_statement .)
    VOID            reduce using rule 33 (statements -> while_statement .)


state 50

    (34) statements -> continue_statement . end
    (24) end -> . SEMICOLON
    (25) end -> . EXCLAMATION
    (26) end -> . error_end
    (27) error_end -> . NEWLINE

    SEMICOLON       shift and go to state 21
    EXCLAMATION     shift and go to state 22
    NEWLINE         shift and go to state 24

    end                            shift and go to state 65
    error_end                      shift and go to state 23

state 51

    (35) statements -> break_statement . end
    (24) end -> . SEMICOLON
    (25) end -> . EXCLAMATION
    (26) end -> . error_end
    (27) error_end -> . NEWLINE

    SEMICOLON       shift and go to state 21
    EXCLAMATION     shift and go to state 22
    NEWLINE         shift and go to state 24

    end                            shift and go to state 66
    error_end                      shift and go to state 23

state 52

    (36) statements -> if_else_statement .

    CLOSE_BRACE     reduce using rule 36 (statements -> if_else_statement .)
    WHILE           reduce using rule 36 (statements -> if_else_statement .)
    THE_1           reduce using rule 36 (statements -> if_else_statement .)
    YOU             reduce using rule 36 (statements -> if_else_statement .)
    GO              reduce using rule 36 (statements -> if_else_statement .)
    ID              reduce using rule 36 (statements -> if_else_statement .)
    IF              reduce using rule 36 (statements -> if_else_statement .)
    UNSIGNED        reduce using rule 36 (statements -> if_else_statement .)
    SHORT           reduce using rule 36 (statements -> if_else_statement .)
    INT             reduce using rule 36 (statements -> if_else_statement .)
    LONG            reduce using rule 36 (statements -> if_else_statement .)
    FLOAT           reduce using rule 36 (statements -> if_else_statement .)
    DOUBLE          reduce using rule 36 (statements -> if_else_statement .)
    CHAR            reduce using rule 36 (statements -> if_else_statement .)
    STRING          reduce using rule 36 (statements -> if_else_statement .)
    BOOL            reduce using rule 36 (statements -> if_else_statement .)
    VOID            reduce using rule 36 (statements -> if_else_statement .)


state 53

    (37) statements -> return_statement . end
    (24) end -> . SEMICOLON
    (25) end -> . EXCLAMATION
    (26) end -> . error_end
    (27) error_end -> . NEWLINE

    SEMICOLON       shift and go to state 21
    EXCLAMATION     shift and go to state 22
    NEWLINE         shift and go to state 24

    end                            shift and go to state 67
    error_end                      shift and go to state 23

state 54

    (38) statements -> assign_statement . end
    (24) end -> . SEMICOLON
    (25) end -> . EXCLAMATION
    (26) end -> . error_end
    (27) error_end -> . NEWLINE

    SEMICOLON       shift and go to state 21
    EXCLAMATION     shift and go to state 22
    NEWLINE         shift and go to state 24

    end                            shift and go to state 68
    error_end                      shift and go to state 23

state 55

    (12) declaration_statement_list -> declaration_statement .

    COMMA           reduce using rule 12 (declaration_statement_list -> declaration_statement .)
    SEMICOLON       reduce using rule 12 (declaration_statement_list -> declaration_statement .)
    EXCLAMATION     reduce using rule 12 (declaration_statement_list -> declaration_statement .)
    NEWLINE         reduce using rule 12 (declaration_statement_list -> declaration_statement .)


state 56

    (69) assign_statement -> ID . ASSIGN call_function
    (70) assign_statement -> ID . ASSIGN expression

    ASSIGN          shift and go to state 69


state 57

    (39) while_statement -> WHILE . OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block

    OPEN_PARENTHESIS shift and go to state 70


state 58

    (40) continue_statement -> THE_1 . QUEST CONTINUES

    QUEST           shift and go to state 71


state 59

    (41) break_statement -> YOU . SHALL NOT PASS

    SHALL           shift and go to state 72


state 60

    (42) if_else_statement -> if_statement . elif_statement else_statement
    (46) elif_statement -> . elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block
    (47) elif_statement -> . empty
    (28) empty -> .

    HOWEVER         reduce using rule 28 (empty -> .)
    ELSE            reduce using rule 28 (empty -> .)
    CLOSE_BRACE     reduce using rule 28 (empty -> .)
    WHILE           reduce using rule 28 (empty -> .)
    THE_1           reduce using rule 28 (empty -> .)
    YOU             reduce using rule 28 (empty -> .)
    GO              reduce using rule 28 (empty -> .)
    ID              reduce using rule 28 (empty -> .)
    IF              reduce using rule 28 (empty -> .)
    UNSIGNED        reduce using rule 28 (empty -> .)
    SHORT           reduce using rule 28 (empty -> .)
    INT             reduce using rule 28 (empty -> .)
    LONG            reduce using rule 28 (empty -> .)
    FLOAT           reduce using rule 28 (empty -> .)
    DOUBLE          reduce using rule 28 (empty -> .)
    CHAR            reduce using rule 28 (empty -> .)
    STRING          reduce using rule 28 (empty -> .)
    BOOL            reduce using rule 28 (empty -> .)
    VOID            reduce using rule 28 (empty -> .)

    elif_statement                 shift and go to state 73
    empty                          shift and go to state 74

state 61

    (48) return_statement -> GO . BACK TO THE_2 ABYSS
    (49) return_statement -> GO . BACK TO THE_2 ABYSS expression

    BACK            shift and go to state 75


state 62

    (43) if_statement -> IF . OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block

    OPEN_PARENTHESIS shift and go to state 76


state 63

    (32) statements -> declaration_statement_list end .

    CLOSE_BRACE     reduce using rule 32 (statements -> declaration_statement_list end .)
    WHILE           reduce using rule 32 (statements -> declaration_statement_list end .)
    THE_1           reduce using rule 32 (statements -> declaration_statement_list end .)
    YOU             reduce using rule 32 (statements -> declaration_statement_list end .)
    GO              reduce using rule 32 (statements -> declaration_statement_list end .)
    ID              reduce using rule 32 (statements -> declaration_statement_list end .)
    IF              reduce using rule 32 (statements -> declaration_statement_list end .)
    UNSIGNED        reduce using rule 32 (statements -> declaration_statement_list end .)
    SHORT           reduce using rule 32 (statements -> declaration_statement_list end .)
    INT             reduce using rule 32 (statements -> declaration_statement_list end .)
    LONG            reduce using rule 32 (statements -> declaration_statement_list end .)
    FLOAT           reduce using rule 32 (statements -> declaration_statement_list end .)
    DOUBLE          reduce using rule 32 (statements -> declaration_statement_list end .)
    CHAR            reduce using rule 32 (statements -> declaration_statement_list end .)
    STRING          reduce using rule 32 (statements -> declaration_statement_list end .)
    BOOL            reduce using rule 32 (statements -> declaration_statement_list end .)
    VOID            reduce using rule 32 (statements -> declaration_statement_list end .)


state 64

    (13) declaration_statement_list -> declaration_statement_list COMMA . ID

    ID              shift and go to state 77


state 65

    (34) statements -> continue_statement end .

    CLOSE_BRACE     reduce using rule 34 (statements -> continue_statement end .)
    WHILE           reduce using rule 34 (statements -> continue_statement end .)
    THE_1           reduce using rule 34 (statements -> continue_statement end .)
    YOU             reduce using rule 34 (statements -> continue_statement end .)
    GO              reduce using rule 34 (statements -> continue_statement end .)
    ID              reduce using rule 34 (statements -> continue_statement end .)
    IF              reduce using rule 34 (statements -> continue_statement end .)
    UNSIGNED        reduce using rule 34 (statements -> continue_statement end .)
    SHORT           reduce using rule 34 (statements -> continue_statement end .)
    INT             reduce using rule 34 (statements -> continue_statement end .)
    LONG            reduce using rule 34 (statements -> continue_statement end .)
    FLOAT           reduce using rule 34 (statements -> continue_statement end .)
    DOUBLE          reduce using rule 34 (statements -> continue_statement end .)
    CHAR            reduce using rule 34 (statements -> continue_statement end .)
    STRING          reduce using rule 34 (statements -> continue_statement end .)
    BOOL            reduce using rule 34 (statements -> continue_statement end .)
    VOID            reduce using rule 34 (statements -> continue_statement end .)


state 66

    (35) statements -> break_statement end .

    CLOSE_BRACE     reduce using rule 35 (statements -> break_statement end .)
    WHILE           reduce using rule 35 (statements -> break_statement end .)
    THE_1           reduce using rule 35 (statements -> break_statement end .)
    YOU             reduce using rule 35 (statements -> break_statement end .)
    GO              reduce using rule 35 (statements -> break_statement end .)
    ID              reduce using rule 35 (statements -> break_statement end .)
    IF              reduce using rule 35 (statements -> break_statement end .)
    UNSIGNED        reduce using rule 35 (statements -> break_statement end .)
    SHORT           reduce using rule 35 (statements -> break_statement end .)
    INT             reduce using rule 35 (statements -> break_statement end .)
    LONG            reduce using rule 35 (statements -> break_statement end .)
    FLOAT           reduce using rule 35 (statements -> break_statement end .)
    DOUBLE          reduce using rule 35 (statements -> break_statement end .)
    CHAR            reduce using rule 35 (statements -> break_statement end .)
    STRING          reduce using rule 35 (statements -> break_statement end .)
    BOOL            reduce using rule 35 (statements -> break_statement end .)
    VOID            reduce using rule 35 (statements -> break_statement end .)


state 67

    (37) statements -> return_statement end .

    CLOSE_BRACE     reduce using rule 37 (statements -> return_statement end .)
    WHILE           reduce using rule 37 (statements -> return_statement end .)
    THE_1           reduce using rule 37 (statements -> return_statement end .)
    YOU             reduce using rule 37 (statements -> return_statement end .)
    GO              reduce using rule 37 (statements -> return_statement end .)
    ID              reduce using rule 37 (statements -> return_statement end .)
    IF              reduce using rule 37 (statements -> return_statement end .)
    UNSIGNED        reduce using rule 37 (statements -> return_statement end .)
    SHORT           reduce using rule 37 (statements -> return_statement end .)
    INT             reduce using rule 37 (statements -> return_statement end .)
    LONG            reduce using rule 37 (statements -> return_statement end .)
    FLOAT           reduce using rule 37 (statements -> return_statement end .)
    DOUBLE          reduce using rule 37 (statements -> return_statement end .)
    CHAR            reduce using rule 37 (statements -> return_statement end .)
    STRING          reduce using rule 37 (statements -> return_statement end .)
    BOOL            reduce using rule 37 (statements -> return_statement end .)
    VOID            reduce using rule 37 (statements -> return_statement end .)


state 68

    (38) statements -> assign_statement end .

    CLOSE_BRACE     reduce using rule 38 (statements -> assign_statement end .)
    WHILE           reduce using rule 38 (statements -> assign_statement end .)
    THE_1           reduce using rule 38 (statements -> assign_statement end .)
    YOU             reduce using rule 38 (statements -> assign_statement end .)
    GO              reduce using rule 38 (statements -> assign_statement end .)
    ID              reduce using rule 38 (statements -> assign_statement end .)
    IF              reduce using rule 38 (statements -> assign_statement end .)
    UNSIGNED        reduce using rule 38 (statements -> assign_statement end .)
    SHORT           reduce using rule 38 (statements -> assign_statement end .)
    INT             reduce using rule 38 (statements -> assign_statement end .)
    LONG            reduce using rule 38 (statements -> assign_statement end .)
    FLOAT           reduce using rule 38 (statements -> assign_statement end .)
    DOUBLE          reduce using rule 38 (statements -> assign_statement end .)
    CHAR            reduce using rule 38 (statements -> assign_statement end .)
    STRING          reduce using rule 38 (statements -> assign_statement end .)
    BOOL            reduce using rule 38 (statements -> assign_statement end .)
    VOID            reduce using rule 38 (statements -> assign_statement end .)


state 69

    (69) assign_statement -> ID ASSIGN . call_function
    (70) assign_statement -> ID ASSIGN . expression
    (71) call_function -> . ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS
    (76) expression -> . expression ADD values
    (77) expression -> . expression SUB values
    (78) expression -> . expression DIV values
    (79) expression -> . expression MULT values
    (80) expression -> . expression MOD values
    (81) expression -> . expression POW values
    (82) expression -> . expression BITWISE_OR values
    (83) expression -> . expression BITWISE_AND values
    (84) expression -> . expression BITWISE_XOR values
    (85) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (86) expression -> . values
    (89) expression -> . SUB expression
    (90) expression -> . BITWISE_NOT expression
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    ID              shift and go to state 78
    OPEN_PARENTHESIS shift and go to state 81
    SUB             shift and go to state 83
    BITWISE_NOT     shift and go to state 84
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    call_function                  shift and go to state 79
    expression                     shift and go to state 80
    values                         shift and go to state 82
    literal                        shift and go to state 85

state 70

    (39) while_statement -> WHILE OPEN_PARENTHESIS . comparison_list CLOSE_PARENTHESIS block
    (50) comparison_list -> . comparison
    (51) comparison_list -> . comparison_list logic_operator comparison
    (52) comparison -> . expression
    (53) comparison -> . expression value_operators expression
    (76) expression -> . expression ADD values
    (77) expression -> . expression SUB values
    (78) expression -> . expression DIV values
    (79) expression -> . expression MULT values
    (80) expression -> . expression MOD values
    (81) expression -> . expression POW values
    (82) expression -> . expression BITWISE_OR values
    (83) expression -> . expression BITWISE_AND values
    (84) expression -> . expression BITWISE_XOR values
    (85) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (86) expression -> . values
    (89) expression -> . SUB expression
    (90) expression -> . BITWISE_NOT expression
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    OPEN_PARENTHESIS shift and go to state 81
    SUB             shift and go to state 83
    BITWISE_NOT     shift and go to state 84
    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    comparison_list                shift and go to state 92
    comparison                     shift and go to state 93
    expression                     shift and go to state 94
    values                         shift and go to state 82
    literal                        shift and go to state 85

state 71

    (40) continue_statement -> THE_1 QUEST . CONTINUES

    CONTINUES       shift and go to state 96


state 72

    (41) break_statement -> YOU SHALL . NOT PASS

    NOT             shift and go to state 97


state 73

    (42) if_else_statement -> if_statement elif_statement . else_statement
    (46) elif_statement -> elif_statement . HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block
    (44) else_statement -> . ELSE block
    (45) else_statement -> . empty
    (28) empty -> .

    HOWEVER         shift and go to state 99
    ELSE            shift and go to state 100
    CLOSE_BRACE     reduce using rule 28 (empty -> .)
    WHILE           reduce using rule 28 (empty -> .)
    THE_1           reduce using rule 28 (empty -> .)
    YOU             reduce using rule 28 (empty -> .)
    GO              reduce using rule 28 (empty -> .)
    ID              reduce using rule 28 (empty -> .)
    IF              reduce using rule 28 (empty -> .)
    UNSIGNED        reduce using rule 28 (empty -> .)
    SHORT           reduce using rule 28 (empty -> .)
    INT             reduce using rule 28 (empty -> .)
    LONG            reduce using rule 28 (empty -> .)
    FLOAT           reduce using rule 28 (empty -> .)
    DOUBLE          reduce using rule 28 (empty -> .)
    CHAR            reduce using rule 28 (empty -> .)
    STRING          reduce using rule 28 (empty -> .)
    BOOL            reduce using rule 28 (empty -> .)
    VOID            reduce using rule 28 (empty -> .)

    else_statement                 shift and go to state 98
    empty                          shift and go to state 101

state 74

    (47) elif_statement -> empty .

    HOWEVER         reduce using rule 47 (elif_statement -> empty .)
    ELSE            reduce using rule 47 (elif_statement -> empty .)
    CLOSE_BRACE     reduce using rule 47 (elif_statement -> empty .)
    WHILE           reduce using rule 47 (elif_statement -> empty .)
    THE_1           reduce using rule 47 (elif_statement -> empty .)
    YOU             reduce using rule 47 (elif_statement -> empty .)
    GO              reduce using rule 47 (elif_statement -> empty .)
    ID              reduce using rule 47 (elif_statement -> empty .)
    IF              reduce using rule 47 (elif_statement -> empty .)
    UNSIGNED        reduce using rule 47 (elif_statement -> empty .)
    SHORT           reduce using rule 47 (elif_statement -> empty .)
    INT             reduce using rule 47 (elif_statement -> empty .)
    LONG            reduce using rule 47 (elif_statement -> empty .)
    FLOAT           reduce using rule 47 (elif_statement -> empty .)
    DOUBLE          reduce using rule 47 (elif_statement -> empty .)
    CHAR            reduce using rule 47 (elif_statement -> empty .)
    STRING          reduce using rule 47 (elif_statement -> empty .)
    BOOL            reduce using rule 47 (elif_statement -> empty .)
    VOID            reduce using rule 47 (elif_statement -> empty .)


state 75

    (48) return_statement -> GO BACK . TO THE_2 ABYSS
    (49) return_statement -> GO BACK . TO THE_2 ABYSS expression

    TO              shift and go to state 102


state 76

    (43) if_statement -> IF OPEN_PARENTHESIS . comparison_list CLOSE_PARENTHESIS block
    (50) comparison_list -> . comparison
    (51) comparison_list -> . comparison_list logic_operator comparison
    (52) comparison -> . expression
    (53) comparison -> . expression value_operators expression
    (76) expression -> . expression ADD values
    (77) expression -> . expression SUB values
    (78) expression -> . expression DIV values
    (79) expression -> . expression MULT values
    (80) expression -> . expression MOD values
    (81) expression -> . expression POW values
    (82) expression -> . expression BITWISE_OR values
    (83) expression -> . expression BITWISE_AND values
    (84) expression -> . expression BITWISE_XOR values
    (85) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (86) expression -> . values
    (89) expression -> . SUB expression
    (90) expression -> . BITWISE_NOT expression
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    OPEN_PARENTHESIS shift and go to state 81
    SUB             shift and go to state 83
    BITWISE_NOT     shift and go to state 84
    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    comparison_list                shift and go to state 103
    comparison                     shift and go to state 93
    expression                     shift and go to state 94
    values                         shift and go to state 82
    literal                        shift and go to state 85

state 77

    (13) declaration_statement_list -> declaration_statement_list COMMA ID .

    COMMA           reduce using rule 13 (declaration_statement_list -> declaration_statement_list COMMA ID .)
    SEMICOLON       reduce using rule 13 (declaration_statement_list -> declaration_statement_list COMMA ID .)
    EXCLAMATION     reduce using rule 13 (declaration_statement_list -> declaration_statement_list COMMA ID .)
    NEWLINE         reduce using rule 13 (declaration_statement_list -> declaration_statement_list COMMA ID .)


state 78

    (71) call_function -> ID . OPEN_PARENTHESIS args CLOSE_PARENTHESIS
    (88) values -> ID .

    OPEN_PARENTHESIS shift and go to state 104
    ADD             reduce using rule 88 (values -> ID .)
    SUB             reduce using rule 88 (values -> ID .)
    DIV             reduce using rule 88 (values -> ID .)
    MULT            reduce using rule 88 (values -> ID .)
    MOD             reduce using rule 88 (values -> ID .)
    POW             reduce using rule 88 (values -> ID .)
    BITWISE_OR      reduce using rule 88 (values -> ID .)
    BITWISE_AND     reduce using rule 88 (values -> ID .)
    BITWISE_XOR     reduce using rule 88 (values -> ID .)
    SEMICOLON       reduce using rule 88 (values -> ID .)
    EXCLAMATION     reduce using rule 88 (values -> ID .)
    NEWLINE         reduce using rule 88 (values -> ID .)


state 79

    (69) assign_statement -> ID ASSIGN call_function .

    SEMICOLON       reduce using rule 69 (assign_statement -> ID ASSIGN call_function .)
    EXCLAMATION     reduce using rule 69 (assign_statement -> ID ASSIGN call_function .)
    NEWLINE         reduce using rule 69 (assign_statement -> ID ASSIGN call_function .)


state 80

    (70) assign_statement -> ID ASSIGN expression .
    (76) expression -> expression . ADD values
    (77) expression -> expression . SUB values
    (78) expression -> expression . DIV values
    (79) expression -> expression . MULT values
    (80) expression -> expression . MOD values
    (81) expression -> expression . POW values
    (82) expression -> expression . BITWISE_OR values
    (83) expression -> expression . BITWISE_AND values
    (84) expression -> expression . BITWISE_XOR values

    SEMICOLON       reduce using rule 70 (assign_statement -> ID ASSIGN expression .)
    EXCLAMATION     reduce using rule 70 (assign_statement -> ID ASSIGN expression .)
    NEWLINE         reduce using rule 70 (assign_statement -> ID ASSIGN expression .)
    ADD             shift and go to state 105
    SUB             shift and go to state 106
    DIV             shift and go to state 107
    MULT            shift and go to state 108
    MOD             shift and go to state 109
    POW             shift and go to state 110
    BITWISE_OR      shift and go to state 111
    BITWISE_AND     shift and go to state 112
    BITWISE_XOR     shift and go to state 113


state 81

    (85) expression -> OPEN_PARENTHESIS . expression CLOSE_PARENTHESIS
    (76) expression -> . expression ADD values
    (77) expression -> . expression SUB values
    (78) expression -> . expression DIV values
    (79) expression -> . expression MULT values
    (80) expression -> . expression MOD values
    (81) expression -> . expression POW values
    (82) expression -> . expression BITWISE_OR values
    (83) expression -> . expression BITWISE_AND values
    (84) expression -> . expression BITWISE_XOR values
    (85) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (86) expression -> . values
    (89) expression -> . SUB expression
    (90) expression -> . BITWISE_NOT expression
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    OPEN_PARENTHESIS shift and go to state 81
    SUB             shift and go to state 83
    BITWISE_NOT     shift and go to state 84
    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    expression                     shift and go to state 114
    values                         shift and go to state 82
    literal                        shift and go to state 85

state 82

    (86) expression -> values .

    ADD             reduce using rule 86 (expression -> values .)
    SUB             reduce using rule 86 (expression -> values .)
    DIV             reduce using rule 86 (expression -> values .)
    MULT            reduce using rule 86 (expression -> values .)
    MOD             reduce using rule 86 (expression -> values .)
    POW             reduce using rule 86 (expression -> values .)
    BITWISE_OR      reduce using rule 86 (expression -> values .)
    BITWISE_AND     reduce using rule 86 (expression -> values .)
    BITWISE_XOR     reduce using rule 86 (expression -> values .)
    SEMICOLON       reduce using rule 86 (expression -> values .)
    EXCLAMATION     reduce using rule 86 (expression -> values .)
    NEWLINE         reduce using rule 86 (expression -> values .)
    EQUAL           reduce using rule 86 (expression -> values .)
    LESS            reduce using rule 86 (expression -> values .)
    LESS_EQUAL      reduce using rule 86 (expression -> values .)
    GREATER         reduce using rule 86 (expression -> values .)
    GREATER_EQUAL   reduce using rule 86 (expression -> values .)
    DIFF            reduce using rule 86 (expression -> values .)
    CLOSE_PARENTHESIS reduce using rule 86 (expression -> values .)
    AND             reduce using rule 86 (expression -> values .)
    OR              reduce using rule 86 (expression -> values .)
    XOR             reduce using rule 86 (expression -> values .)
    COMMA           reduce using rule 86 (expression -> values .)


state 83

    (89) expression -> SUB . expression
    (76) expression -> . expression ADD values
    (77) expression -> . expression SUB values
    (78) expression -> . expression DIV values
    (79) expression -> . expression MULT values
    (80) expression -> . expression MOD values
    (81) expression -> . expression POW values
    (82) expression -> . expression BITWISE_OR values
    (83) expression -> . expression BITWISE_AND values
    (84) expression -> . expression BITWISE_XOR values
    (85) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (86) expression -> . values
    (89) expression -> . SUB expression
    (90) expression -> . BITWISE_NOT expression
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    OPEN_PARENTHESIS shift and go to state 81
    SUB             shift and go to state 83
    BITWISE_NOT     shift and go to state 84
    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    expression                     shift and go to state 115
    values                         shift and go to state 82
    literal                        shift and go to state 85

state 84

    (90) expression -> BITWISE_NOT . expression
    (76) expression -> . expression ADD values
    (77) expression -> . expression SUB values
    (78) expression -> . expression DIV values
    (79) expression -> . expression MULT values
    (80) expression -> . expression MOD values
    (81) expression -> . expression POW values
    (82) expression -> . expression BITWISE_OR values
    (83) expression -> . expression BITWISE_AND values
    (84) expression -> . expression BITWISE_XOR values
    (85) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (86) expression -> . values
    (89) expression -> . SUB expression
    (90) expression -> . BITWISE_NOT expression
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    OPEN_PARENTHESIS shift and go to state 81
    SUB             shift and go to state 83
    BITWISE_NOT     shift and go to state 84
    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    expression                     shift and go to state 116
    values                         shift and go to state 82
    literal                        shift and go to state 85

state 85

    (87) values -> literal .

    ADD             reduce using rule 87 (values -> literal .)
    SUB             reduce using rule 87 (values -> literal .)
    DIV             reduce using rule 87 (values -> literal .)
    MULT            reduce using rule 87 (values -> literal .)
    MOD             reduce using rule 87 (values -> literal .)
    POW             reduce using rule 87 (values -> literal .)
    BITWISE_OR      reduce using rule 87 (values -> literal .)
    BITWISE_AND     reduce using rule 87 (values -> literal .)
    BITWISE_XOR     reduce using rule 87 (values -> literal .)
    SEMICOLON       reduce using rule 87 (values -> literal .)
    EXCLAMATION     reduce using rule 87 (values -> literal .)
    NEWLINE         reduce using rule 87 (values -> literal .)
    EQUAL           reduce using rule 87 (values -> literal .)
    LESS            reduce using rule 87 (values -> literal .)
    LESS_EQUAL      reduce using rule 87 (values -> literal .)
    GREATER         reduce using rule 87 (values -> literal .)
    GREATER_EQUAL   reduce using rule 87 (values -> literal .)
    DIFF            reduce using rule 87 (values -> literal .)
    CLOSE_PARENTHESIS reduce using rule 87 (values -> literal .)
    AND             reduce using rule 87 (values -> literal .)
    OR              reduce using rule 87 (values -> literal .)
    XOR             reduce using rule 87 (values -> literal .)
    COMMA           reduce using rule 87 (values -> literal .)


state 86

    (63) literal -> INT_LITERAL .

    ADD             reduce using rule 63 (literal -> INT_LITERAL .)
    SUB             reduce using rule 63 (literal -> INT_LITERAL .)
    DIV             reduce using rule 63 (literal -> INT_LITERAL .)
    MULT            reduce using rule 63 (literal -> INT_LITERAL .)
    MOD             reduce using rule 63 (literal -> INT_LITERAL .)
    POW             reduce using rule 63 (literal -> INT_LITERAL .)
    BITWISE_OR      reduce using rule 63 (literal -> INT_LITERAL .)
    BITWISE_AND     reduce using rule 63 (literal -> INT_LITERAL .)
    BITWISE_XOR     reduce using rule 63 (literal -> INT_LITERAL .)
    SEMICOLON       reduce using rule 63 (literal -> INT_LITERAL .)
    EXCLAMATION     reduce using rule 63 (literal -> INT_LITERAL .)
    NEWLINE         reduce using rule 63 (literal -> INT_LITERAL .)
    EQUAL           reduce using rule 63 (literal -> INT_LITERAL .)
    LESS            reduce using rule 63 (literal -> INT_LITERAL .)
    LESS_EQUAL      reduce using rule 63 (literal -> INT_LITERAL .)
    GREATER         reduce using rule 63 (literal -> INT_LITERAL .)
    GREATER_EQUAL   reduce using rule 63 (literal -> INT_LITERAL .)
    DIFF            reduce using rule 63 (literal -> INT_LITERAL .)
    CLOSE_PARENTHESIS reduce using rule 63 (literal -> INT_LITERAL .)
    AND             reduce using rule 63 (literal -> INT_LITERAL .)
    OR              reduce using rule 63 (literal -> INT_LITERAL .)
    XOR             reduce using rule 63 (literal -> INT_LITERAL .)
    COMMA           reduce using rule 63 (literal -> INT_LITERAL .)


state 87

    (64) literal -> FLOAT_LITERAL .

    ADD             reduce using rule 64 (literal -> FLOAT_LITERAL .)
    SUB             reduce using rule 64 (literal -> FLOAT_LITERAL .)
    DIV             reduce using rule 64 (literal -> FLOAT_LITERAL .)
    MULT            reduce using rule 64 (literal -> FLOAT_LITERAL .)
    MOD             reduce using rule 64 (literal -> FLOAT_LITERAL .)
    POW             reduce using rule 64 (literal -> FLOAT_LITERAL .)
    BITWISE_OR      reduce using rule 64 (literal -> FLOAT_LITERAL .)
    BITWISE_AND     reduce using rule 64 (literal -> FLOAT_LITERAL .)
    BITWISE_XOR     reduce using rule 64 (literal -> FLOAT_LITERAL .)
    SEMICOLON       reduce using rule 64 (literal -> FLOAT_LITERAL .)
    EXCLAMATION     reduce using rule 64 (literal -> FLOAT_LITERAL .)
    NEWLINE         reduce using rule 64 (literal -> FLOAT_LITERAL .)
    EQUAL           reduce using rule 64 (literal -> FLOAT_LITERAL .)
    LESS            reduce using rule 64 (literal -> FLOAT_LITERAL .)
    LESS_EQUAL      reduce using rule 64 (literal -> FLOAT_LITERAL .)
    GREATER         reduce using rule 64 (literal -> FLOAT_LITERAL .)
    GREATER_EQUAL   reduce using rule 64 (literal -> FLOAT_LITERAL .)
    DIFF            reduce using rule 64 (literal -> FLOAT_LITERAL .)
    CLOSE_PARENTHESIS reduce using rule 64 (literal -> FLOAT_LITERAL .)
    AND             reduce using rule 64 (literal -> FLOAT_LITERAL .)
    OR              reduce using rule 64 (literal -> FLOAT_LITERAL .)
    XOR             reduce using rule 64 (literal -> FLOAT_LITERAL .)
    COMMA           reduce using rule 64 (literal -> FLOAT_LITERAL .)


state 88

    (65) literal -> CHAR_LITERAL .

    ADD             reduce using rule 65 (literal -> CHAR_LITERAL .)
    SUB             reduce using rule 65 (literal -> CHAR_LITERAL .)
    DIV             reduce using rule 65 (literal -> CHAR_LITERAL .)
    MULT            reduce using rule 65 (literal -> CHAR_LITERAL .)
    MOD             reduce using rule 65 (literal -> CHAR_LITERAL .)
    POW             reduce using rule 65 (literal -> CHAR_LITERAL .)
    BITWISE_OR      reduce using rule 65 (literal -> CHAR_LITERAL .)
    BITWISE_AND     reduce using rule 65 (literal -> CHAR_LITERAL .)
    BITWISE_XOR     reduce using rule 65 (literal -> CHAR_LITERAL .)
    SEMICOLON       reduce using rule 65 (literal -> CHAR_LITERAL .)
    EXCLAMATION     reduce using rule 65 (literal -> CHAR_LITERAL .)
    NEWLINE         reduce using rule 65 (literal -> CHAR_LITERAL .)
    EQUAL           reduce using rule 65 (literal -> CHAR_LITERAL .)
    LESS            reduce using rule 65 (literal -> CHAR_LITERAL .)
    LESS_EQUAL      reduce using rule 65 (literal -> CHAR_LITERAL .)
    GREATER         reduce using rule 65 (literal -> CHAR_LITERAL .)
    GREATER_EQUAL   reduce using rule 65 (literal -> CHAR_LITERAL .)
    DIFF            reduce using rule 65 (literal -> CHAR_LITERAL .)
    CLOSE_PARENTHESIS reduce using rule 65 (literal -> CHAR_LITERAL .)
    AND             reduce using rule 65 (literal -> CHAR_LITERAL .)
    OR              reduce using rule 65 (literal -> CHAR_LITERAL .)
    XOR             reduce using rule 65 (literal -> CHAR_LITERAL .)
    COMMA           reduce using rule 65 (literal -> CHAR_LITERAL .)


state 89

    (66) literal -> STRING_LITERAL .

    ADD             reduce using rule 66 (literal -> STRING_LITERAL .)
    SUB             reduce using rule 66 (literal -> STRING_LITERAL .)
    DIV             reduce using rule 66 (literal -> STRING_LITERAL .)
    MULT            reduce using rule 66 (literal -> STRING_LITERAL .)
    MOD             reduce using rule 66 (literal -> STRING_LITERAL .)
    POW             reduce using rule 66 (literal -> STRING_LITERAL .)
    BITWISE_OR      reduce using rule 66 (literal -> STRING_LITERAL .)
    BITWISE_AND     reduce using rule 66 (literal -> STRING_LITERAL .)
    BITWISE_XOR     reduce using rule 66 (literal -> STRING_LITERAL .)
    SEMICOLON       reduce using rule 66 (literal -> STRING_LITERAL .)
    EXCLAMATION     reduce using rule 66 (literal -> STRING_LITERAL .)
    NEWLINE         reduce using rule 66 (literal -> STRING_LITERAL .)
    EQUAL           reduce using rule 66 (literal -> STRING_LITERAL .)
    LESS            reduce using rule 66 (literal -> STRING_LITERAL .)
    LESS_EQUAL      reduce using rule 66 (literal -> STRING_LITERAL .)
    GREATER         reduce using rule 66 (literal -> STRING_LITERAL .)
    GREATER_EQUAL   reduce using rule 66 (literal -> STRING_LITERAL .)
    DIFF            reduce using rule 66 (literal -> STRING_LITERAL .)
    CLOSE_PARENTHESIS reduce using rule 66 (literal -> STRING_LITERAL .)
    AND             reduce using rule 66 (literal -> STRING_LITERAL .)
    OR              reduce using rule 66 (literal -> STRING_LITERAL .)
    XOR             reduce using rule 66 (literal -> STRING_LITERAL .)
    COMMA           reduce using rule 66 (literal -> STRING_LITERAL .)


state 90

    (67) literal -> BOOL_FALSE .

    ADD             reduce using rule 67 (literal -> BOOL_FALSE .)
    SUB             reduce using rule 67 (literal -> BOOL_FALSE .)
    DIV             reduce using rule 67 (literal -> BOOL_FALSE .)
    MULT            reduce using rule 67 (literal -> BOOL_FALSE .)
    MOD             reduce using rule 67 (literal -> BOOL_FALSE .)
    POW             reduce using rule 67 (literal -> BOOL_FALSE .)
    BITWISE_OR      reduce using rule 67 (literal -> BOOL_FALSE .)
    BITWISE_AND     reduce using rule 67 (literal -> BOOL_FALSE .)
    BITWISE_XOR     reduce using rule 67 (literal -> BOOL_FALSE .)
    SEMICOLON       reduce using rule 67 (literal -> BOOL_FALSE .)
    EXCLAMATION     reduce using rule 67 (literal -> BOOL_FALSE .)
    NEWLINE         reduce using rule 67 (literal -> BOOL_FALSE .)
    EQUAL           reduce using rule 67 (literal -> BOOL_FALSE .)
    LESS            reduce using rule 67 (literal -> BOOL_FALSE .)
    LESS_EQUAL      reduce using rule 67 (literal -> BOOL_FALSE .)
    GREATER         reduce using rule 67 (literal -> BOOL_FALSE .)
    GREATER_EQUAL   reduce using rule 67 (literal -> BOOL_FALSE .)
    DIFF            reduce using rule 67 (literal -> BOOL_FALSE .)
    CLOSE_PARENTHESIS reduce using rule 67 (literal -> BOOL_FALSE .)
    AND             reduce using rule 67 (literal -> BOOL_FALSE .)
    OR              reduce using rule 67 (literal -> BOOL_FALSE .)
    XOR             reduce using rule 67 (literal -> BOOL_FALSE .)
    COMMA           reduce using rule 67 (literal -> BOOL_FALSE .)


state 91

    (68) literal -> BOOL_TRUE .

    ADD             reduce using rule 68 (literal -> BOOL_TRUE .)
    SUB             reduce using rule 68 (literal -> BOOL_TRUE .)
    DIV             reduce using rule 68 (literal -> BOOL_TRUE .)
    MULT            reduce using rule 68 (literal -> BOOL_TRUE .)
    MOD             reduce using rule 68 (literal -> BOOL_TRUE .)
    POW             reduce using rule 68 (literal -> BOOL_TRUE .)
    BITWISE_OR      reduce using rule 68 (literal -> BOOL_TRUE .)
    BITWISE_AND     reduce using rule 68 (literal -> BOOL_TRUE .)
    BITWISE_XOR     reduce using rule 68 (literal -> BOOL_TRUE .)
    SEMICOLON       reduce using rule 68 (literal -> BOOL_TRUE .)
    EXCLAMATION     reduce using rule 68 (literal -> BOOL_TRUE .)
    NEWLINE         reduce using rule 68 (literal -> BOOL_TRUE .)
    EQUAL           reduce using rule 68 (literal -> BOOL_TRUE .)
    LESS            reduce using rule 68 (literal -> BOOL_TRUE .)
    LESS_EQUAL      reduce using rule 68 (literal -> BOOL_TRUE .)
    GREATER         reduce using rule 68 (literal -> BOOL_TRUE .)
    GREATER_EQUAL   reduce using rule 68 (literal -> BOOL_TRUE .)
    DIFF            reduce using rule 68 (literal -> BOOL_TRUE .)
    CLOSE_PARENTHESIS reduce using rule 68 (literal -> BOOL_TRUE .)
    AND             reduce using rule 68 (literal -> BOOL_TRUE .)
    OR              reduce using rule 68 (literal -> BOOL_TRUE .)
    XOR             reduce using rule 68 (literal -> BOOL_TRUE .)
    COMMA           reduce using rule 68 (literal -> BOOL_TRUE .)


state 92

    (39) while_statement -> WHILE OPEN_PARENTHESIS comparison_list . CLOSE_PARENTHESIS block
    (51) comparison_list -> comparison_list . logic_operator comparison
    (60) logic_operator -> . AND
    (61) logic_operator -> . OR
    (62) logic_operator -> . XOR

    CLOSE_PARENTHESIS shift and go to state 117
    AND             shift and go to state 119
    OR              shift and go to state 120
    XOR             shift and go to state 121

    logic_operator                 shift and go to state 118

state 93

    (50) comparison_list -> comparison .

    CLOSE_PARENTHESIS reduce using rule 50 (comparison_list -> comparison .)
    AND             reduce using rule 50 (comparison_list -> comparison .)
    OR              reduce using rule 50 (comparison_list -> comparison .)
    XOR             reduce using rule 50 (comparison_list -> comparison .)


state 94

    (52) comparison -> expression .
    (53) comparison -> expression . value_operators expression
    (76) expression -> expression . ADD values
    (77) expression -> expression . SUB values
    (78) expression -> expression . DIV values
    (79) expression -> expression . MULT values
    (80) expression -> expression . MOD values
    (81) expression -> expression . POW values
    (82) expression -> expression . BITWISE_OR values
    (83) expression -> expression . BITWISE_AND values
    (84) expression -> expression . BITWISE_XOR values
    (54) value_operators -> . EQUAL
    (55) value_operators -> . LESS
    (56) value_operators -> . LESS_EQUAL
    (57) value_operators -> . GREATER
    (58) value_operators -> . GREATER_EQUAL
    (59) value_operators -> . DIFF

    CLOSE_PARENTHESIS reduce using rule 52 (comparison -> expression .)
    AND             reduce using rule 52 (comparison -> expression .)
    OR              reduce using rule 52 (comparison -> expression .)
    XOR             reduce using rule 52 (comparison -> expression .)
    ADD             shift and go to state 105
    SUB             shift and go to state 106
    DIV             shift and go to state 107
    MULT            shift and go to state 108
    MOD             shift and go to state 109
    POW             shift and go to state 110
    BITWISE_OR      shift and go to state 111
    BITWISE_AND     shift and go to state 112
    BITWISE_XOR     shift and go to state 113
    EQUAL           shift and go to state 123
    LESS            shift and go to state 124
    LESS_EQUAL      shift and go to state 125
    GREATER         shift and go to state 126
    GREATER_EQUAL   shift and go to state 127
    DIFF            shift and go to state 128

    value_operators                shift and go to state 122

state 95

    (88) values -> ID .

    ADD             reduce using rule 88 (values -> ID .)
    SUB             reduce using rule 88 (values -> ID .)
    DIV             reduce using rule 88 (values -> ID .)
    MULT            reduce using rule 88 (values -> ID .)
    MOD             reduce using rule 88 (values -> ID .)
    POW             reduce using rule 88 (values -> ID .)
    BITWISE_OR      reduce using rule 88 (values -> ID .)
    BITWISE_AND     reduce using rule 88 (values -> ID .)
    BITWISE_XOR     reduce using rule 88 (values -> ID .)
    EQUAL           reduce using rule 88 (values -> ID .)
    LESS            reduce using rule 88 (values -> ID .)
    LESS_EQUAL      reduce using rule 88 (values -> ID .)
    GREATER         reduce using rule 88 (values -> ID .)
    GREATER_EQUAL   reduce using rule 88 (values -> ID .)
    DIFF            reduce using rule 88 (values -> ID .)
    CLOSE_PARENTHESIS reduce using rule 88 (values -> ID .)
    AND             reduce using rule 88 (values -> ID .)
    OR              reduce using rule 88 (values -> ID .)
    XOR             reduce using rule 88 (values -> ID .)
    SEMICOLON       reduce using rule 88 (values -> ID .)
    EXCLAMATION     reduce using rule 88 (values -> ID .)
    NEWLINE         reduce using rule 88 (values -> ID .)
    COMMA           reduce using rule 88 (values -> ID .)


state 96

    (40) continue_statement -> THE_1 QUEST CONTINUES .

    SEMICOLON       reduce using rule 40 (continue_statement -> THE_1 QUEST CONTINUES .)
    EXCLAMATION     reduce using rule 40 (continue_statement -> THE_1 QUEST CONTINUES .)
    NEWLINE         reduce using rule 40 (continue_statement -> THE_1 QUEST CONTINUES .)


state 97

    (41) break_statement -> YOU SHALL NOT . PASS

    PASS            shift and go to state 129


state 98

    (42) if_else_statement -> if_statement elif_statement else_statement .

    CLOSE_BRACE     reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    WHILE           reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    THE_1           reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    YOU             reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    GO              reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    ID              reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    IF              reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    UNSIGNED        reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    SHORT           reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    INT             reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    LONG            reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    FLOAT           reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    DOUBLE          reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    CHAR            reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    STRING          reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    BOOL            reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)
    VOID            reduce using rule 42 (if_else_statement -> if_statement elif_statement else_statement .)


state 99

    (46) elif_statement -> elif_statement HOWEVER . WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block

    WHEN            shift and go to state 130


state 100

    (44) else_statement -> ELSE . block
    (29) block -> . OPEN_BRACE statements_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 39

    block                          shift and go to state 131

state 101

    (45) else_statement -> empty .

    CLOSE_BRACE     reduce using rule 45 (else_statement -> empty .)
    WHILE           reduce using rule 45 (else_statement -> empty .)
    THE_1           reduce using rule 45 (else_statement -> empty .)
    YOU             reduce using rule 45 (else_statement -> empty .)
    GO              reduce using rule 45 (else_statement -> empty .)
    ID              reduce using rule 45 (else_statement -> empty .)
    IF              reduce using rule 45 (else_statement -> empty .)
    UNSIGNED        reduce using rule 45 (else_statement -> empty .)
    SHORT           reduce using rule 45 (else_statement -> empty .)
    INT             reduce using rule 45 (else_statement -> empty .)
    LONG            reduce using rule 45 (else_statement -> empty .)
    FLOAT           reduce using rule 45 (else_statement -> empty .)
    DOUBLE          reduce using rule 45 (else_statement -> empty .)
    CHAR            reduce using rule 45 (else_statement -> empty .)
    STRING          reduce using rule 45 (else_statement -> empty .)
    BOOL            reduce using rule 45 (else_statement -> empty .)
    VOID            reduce using rule 45 (else_statement -> empty .)


state 102

    (48) return_statement -> GO BACK TO . THE_2 ABYSS
    (49) return_statement -> GO BACK TO . THE_2 ABYSS expression

    THE_2           shift and go to state 132


state 103

    (43) if_statement -> IF OPEN_PARENTHESIS comparison_list . CLOSE_PARENTHESIS block
    (51) comparison_list -> comparison_list . logic_operator comparison
    (60) logic_operator -> . AND
    (61) logic_operator -> . OR
    (62) logic_operator -> . XOR

    CLOSE_PARENTHESIS shift and go to state 133
    AND             shift and go to state 119
    OR              shift and go to state 120
    XOR             shift and go to state 121

    logic_operator                 shift and go to state 118

state 104

    (71) call_function -> ID OPEN_PARENTHESIS . args CLOSE_PARENTHESIS
    (72) args -> . args_list
    (73) args -> . empty
    (74) args_list -> . expression
    (75) args_list -> . args_list COMMA expression
    (28) empty -> .
    (76) expression -> . expression ADD values
    (77) expression -> . expression SUB values
    (78) expression -> . expression DIV values
    (79) expression -> . expression MULT values
    (80) expression -> . expression MOD values
    (81) expression -> . expression POW values
    (82) expression -> . expression BITWISE_OR values
    (83) expression -> . expression BITWISE_AND values
    (84) expression -> . expression BITWISE_XOR values
    (85) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (86) expression -> . values
    (89) expression -> . SUB expression
    (90) expression -> . BITWISE_NOT expression
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    CLOSE_PARENTHESIS reduce using rule 28 (empty -> .)
    OPEN_PARENTHESIS shift and go to state 81
    SUB             shift and go to state 83
    BITWISE_NOT     shift and go to state 84
    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    args                           shift and go to state 134
    args_list                      shift and go to state 135
    empty                          shift and go to state 136
    expression                     shift and go to state 137
    values                         shift and go to state 82
    literal                        shift and go to state 85

state 105

    (76) expression -> expression ADD . values
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    values                         shift and go to state 138
    literal                        shift and go to state 85

state 106

    (77) expression -> expression SUB . values
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    values                         shift and go to state 139
    literal                        shift and go to state 85

state 107

    (78) expression -> expression DIV . values
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    values                         shift and go to state 140
    literal                        shift and go to state 85

state 108

    (79) expression -> expression MULT . values
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    values                         shift and go to state 141
    literal                        shift and go to state 85

state 109

    (80) expression -> expression MOD . values
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    values                         shift and go to state 142
    literal                        shift and go to state 85

state 110

    (81) expression -> expression POW . values
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    values                         shift and go to state 143
    literal                        shift and go to state 85

state 111

    (82) expression -> expression BITWISE_OR . values
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    values                         shift and go to state 144
    literal                        shift and go to state 85

state 112

    (83) expression -> expression BITWISE_AND . values
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    values                         shift and go to state 145
    literal                        shift and go to state 85

state 113

    (84) expression -> expression BITWISE_XOR . values
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    values                         shift and go to state 146
    literal                        shift and go to state 85

state 114

    (85) expression -> OPEN_PARENTHESIS expression . CLOSE_PARENTHESIS
    (76) expression -> expression . ADD values
    (77) expression -> expression . SUB values
    (78) expression -> expression . DIV values
    (79) expression -> expression . MULT values
    (80) expression -> expression . MOD values
    (81) expression -> expression . POW values
    (82) expression -> expression . BITWISE_OR values
    (83) expression -> expression . BITWISE_AND values
    (84) expression -> expression . BITWISE_XOR values

    CLOSE_PARENTHESIS shift and go to state 147
    ADD             shift and go to state 105
    SUB             shift and go to state 106
    DIV             shift and go to state 107
    MULT            shift and go to state 108
    MOD             shift and go to state 109
    POW             shift and go to state 110
    BITWISE_OR      shift and go to state 111
    BITWISE_AND     shift and go to state 112
    BITWISE_XOR     shift and go to state 113


state 115

    (89) expression -> SUB expression .
    (76) expression -> expression . ADD values
    (77) expression -> expression . SUB values
    (78) expression -> expression . DIV values
    (79) expression -> expression . MULT values
    (80) expression -> expression . MOD values
    (81) expression -> expression . POW values
    (82) expression -> expression . BITWISE_OR values
    (83) expression -> expression . BITWISE_AND values
    (84) expression -> expression . BITWISE_XOR values

    ADD             reduce using rule 89 (expression -> SUB expression .)
    SUB             reduce using rule 89 (expression -> SUB expression .)
    DIV             reduce using rule 89 (expression -> SUB expression .)
    MULT            reduce using rule 89 (expression -> SUB expression .)
    MOD             reduce using rule 89 (expression -> SUB expression .)
    POW             reduce using rule 89 (expression -> SUB expression .)
    BITWISE_OR      reduce using rule 89 (expression -> SUB expression .)
    BITWISE_AND     reduce using rule 89 (expression -> SUB expression .)
    BITWISE_XOR     reduce using rule 89 (expression -> SUB expression .)
    SEMICOLON       reduce using rule 89 (expression -> SUB expression .)
    EXCLAMATION     reduce using rule 89 (expression -> SUB expression .)
    NEWLINE         reduce using rule 89 (expression -> SUB expression .)
    EQUAL           reduce using rule 89 (expression -> SUB expression .)
    LESS            reduce using rule 89 (expression -> SUB expression .)
    LESS_EQUAL      reduce using rule 89 (expression -> SUB expression .)
    GREATER         reduce using rule 89 (expression -> SUB expression .)
    GREATER_EQUAL   reduce using rule 89 (expression -> SUB expression .)
    DIFF            reduce using rule 89 (expression -> SUB expression .)
    CLOSE_PARENTHESIS reduce using rule 89 (expression -> SUB expression .)
    AND             reduce using rule 89 (expression -> SUB expression .)
    OR              reduce using rule 89 (expression -> SUB expression .)
    XOR             reduce using rule 89 (expression -> SUB expression .)
    COMMA           reduce using rule 89 (expression -> SUB expression .)

  ! ADD             [ shift and go to state 105 ]
  ! SUB             [ shift and go to state 106 ]
  ! DIV             [ shift and go to state 107 ]
  ! MULT            [ shift and go to state 108 ]
  ! MOD             [ shift and go to state 109 ]
  ! POW             [ shift and go to state 110 ]
  ! BITWISE_OR      [ shift and go to state 111 ]
  ! BITWISE_AND     [ shift and go to state 112 ]
  ! BITWISE_XOR     [ shift and go to state 113 ]


state 116

    (90) expression -> BITWISE_NOT expression .
    (76) expression -> expression . ADD values
    (77) expression -> expression . SUB values
    (78) expression -> expression . DIV values
    (79) expression -> expression . MULT values
    (80) expression -> expression . MOD values
    (81) expression -> expression . POW values
    (82) expression -> expression . BITWISE_OR values
    (83) expression -> expression . BITWISE_AND values
    (84) expression -> expression . BITWISE_XOR values

    ADD             reduce using rule 90 (expression -> BITWISE_NOT expression .)
    SUB             reduce using rule 90 (expression -> BITWISE_NOT expression .)
    DIV             reduce using rule 90 (expression -> BITWISE_NOT expression .)
    MULT            reduce using rule 90 (expression -> BITWISE_NOT expression .)
    MOD             reduce using rule 90 (expression -> BITWISE_NOT expression .)
    POW             reduce using rule 90 (expression -> BITWISE_NOT expression .)
    BITWISE_OR      reduce using rule 90 (expression -> BITWISE_NOT expression .)
    BITWISE_AND     reduce using rule 90 (expression -> BITWISE_NOT expression .)
    BITWISE_XOR     reduce using rule 90 (expression -> BITWISE_NOT expression .)
    SEMICOLON       reduce using rule 90 (expression -> BITWISE_NOT expression .)
    EXCLAMATION     reduce using rule 90 (expression -> BITWISE_NOT expression .)
    NEWLINE         reduce using rule 90 (expression -> BITWISE_NOT expression .)
    EQUAL           reduce using rule 90 (expression -> BITWISE_NOT expression .)
    LESS            reduce using rule 90 (expression -> BITWISE_NOT expression .)
    LESS_EQUAL      reduce using rule 90 (expression -> BITWISE_NOT expression .)
    GREATER         reduce using rule 90 (expression -> BITWISE_NOT expression .)
    GREATER_EQUAL   reduce using rule 90 (expression -> BITWISE_NOT expression .)
    DIFF            reduce using rule 90 (expression -> BITWISE_NOT expression .)
    CLOSE_PARENTHESIS reduce using rule 90 (expression -> BITWISE_NOT expression .)
    AND             reduce using rule 90 (expression -> BITWISE_NOT expression .)
    OR              reduce using rule 90 (expression -> BITWISE_NOT expression .)
    XOR             reduce using rule 90 (expression -> BITWISE_NOT expression .)
    COMMA           reduce using rule 90 (expression -> BITWISE_NOT expression .)

  ! ADD             [ shift and go to state 105 ]
  ! SUB             [ shift and go to state 106 ]
  ! DIV             [ shift and go to state 107 ]
  ! MULT            [ shift and go to state 108 ]
  ! MOD             [ shift and go to state 109 ]
  ! POW             [ shift and go to state 110 ]
  ! BITWISE_OR      [ shift and go to state 111 ]
  ! BITWISE_AND     [ shift and go to state 112 ]
  ! BITWISE_XOR     [ shift and go to state 113 ]


state 117

    (39) while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS . block
    (29) block -> . OPEN_BRACE statements_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 39

    block                          shift and go to state 148

state 118

    (51) comparison_list -> comparison_list logic_operator . comparison
    (52) comparison -> . expression
    (53) comparison -> . expression value_operators expression
    (76) expression -> . expression ADD values
    (77) expression -> . expression SUB values
    (78) expression -> . expression DIV values
    (79) expression -> . expression MULT values
    (80) expression -> . expression MOD values
    (81) expression -> . expression POW values
    (82) expression -> . expression BITWISE_OR values
    (83) expression -> . expression BITWISE_AND values
    (84) expression -> . expression BITWISE_XOR values
    (85) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (86) expression -> . values
    (89) expression -> . SUB expression
    (90) expression -> . BITWISE_NOT expression
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    OPEN_PARENTHESIS shift and go to state 81
    SUB             shift and go to state 83
    BITWISE_NOT     shift and go to state 84
    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    comparison                     shift and go to state 149
    expression                     shift and go to state 94
    values                         shift and go to state 82
    literal                        shift and go to state 85

state 119

    (60) logic_operator -> AND .

    OPEN_PARENTHESIS reduce using rule 60 (logic_operator -> AND .)
    SUB             reduce using rule 60 (logic_operator -> AND .)
    BITWISE_NOT     reduce using rule 60 (logic_operator -> AND .)
    ID              reduce using rule 60 (logic_operator -> AND .)
    INT_LITERAL     reduce using rule 60 (logic_operator -> AND .)
    FLOAT_LITERAL   reduce using rule 60 (logic_operator -> AND .)
    CHAR_LITERAL    reduce using rule 60 (logic_operator -> AND .)
    STRING_LITERAL  reduce using rule 60 (logic_operator -> AND .)
    BOOL_FALSE      reduce using rule 60 (logic_operator -> AND .)
    BOOL_TRUE       reduce using rule 60 (logic_operator -> AND .)


state 120

    (61) logic_operator -> OR .

    OPEN_PARENTHESIS reduce using rule 61 (logic_operator -> OR .)
    SUB             reduce using rule 61 (logic_operator -> OR .)
    BITWISE_NOT     reduce using rule 61 (logic_operator -> OR .)
    ID              reduce using rule 61 (logic_operator -> OR .)
    INT_LITERAL     reduce using rule 61 (logic_operator -> OR .)
    FLOAT_LITERAL   reduce using rule 61 (logic_operator -> OR .)
    CHAR_LITERAL    reduce using rule 61 (logic_operator -> OR .)
    STRING_LITERAL  reduce using rule 61 (logic_operator -> OR .)
    BOOL_FALSE      reduce using rule 61 (logic_operator -> OR .)
    BOOL_TRUE       reduce using rule 61 (logic_operator -> OR .)


state 121

    (62) logic_operator -> XOR .

    OPEN_PARENTHESIS reduce using rule 62 (logic_operator -> XOR .)
    SUB             reduce using rule 62 (logic_operator -> XOR .)
    BITWISE_NOT     reduce using rule 62 (logic_operator -> XOR .)
    ID              reduce using rule 62 (logic_operator -> XOR .)
    INT_LITERAL     reduce using rule 62 (logic_operator -> XOR .)
    FLOAT_LITERAL   reduce using rule 62 (logic_operator -> XOR .)
    CHAR_LITERAL    reduce using rule 62 (logic_operator -> XOR .)
    STRING_LITERAL  reduce using rule 62 (logic_operator -> XOR .)
    BOOL_FALSE      reduce using rule 62 (logic_operator -> XOR .)
    BOOL_TRUE       reduce using rule 62 (logic_operator -> XOR .)


state 122

    (53) comparison -> expression value_operators . expression
    (76) expression -> . expression ADD values
    (77) expression -> . expression SUB values
    (78) expression -> . expression DIV values
    (79) expression -> . expression MULT values
    (80) expression -> . expression MOD values
    (81) expression -> . expression POW values
    (82) expression -> . expression BITWISE_OR values
    (83) expression -> . expression BITWISE_AND values
    (84) expression -> . expression BITWISE_XOR values
    (85) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (86) expression -> . values
    (89) expression -> . SUB expression
    (90) expression -> . BITWISE_NOT expression
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    OPEN_PARENTHESIS shift and go to state 81
    SUB             shift and go to state 83
    BITWISE_NOT     shift and go to state 84
    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    expression                     shift and go to state 150
    values                         shift and go to state 82
    literal                        shift and go to state 85

state 123

    (54) value_operators -> EQUAL .

    OPEN_PARENTHESIS reduce using rule 54 (value_operators -> EQUAL .)
    SUB             reduce using rule 54 (value_operators -> EQUAL .)
    BITWISE_NOT     reduce using rule 54 (value_operators -> EQUAL .)
    ID              reduce using rule 54 (value_operators -> EQUAL .)
    INT_LITERAL     reduce using rule 54 (value_operators -> EQUAL .)
    FLOAT_LITERAL   reduce using rule 54 (value_operators -> EQUAL .)
    CHAR_LITERAL    reduce using rule 54 (value_operators -> EQUAL .)
    STRING_LITERAL  reduce using rule 54 (value_operators -> EQUAL .)
    BOOL_FALSE      reduce using rule 54 (value_operators -> EQUAL .)
    BOOL_TRUE       reduce using rule 54 (value_operators -> EQUAL .)


state 124

    (55) value_operators -> LESS .

    OPEN_PARENTHESIS reduce using rule 55 (value_operators -> LESS .)
    SUB             reduce using rule 55 (value_operators -> LESS .)
    BITWISE_NOT     reduce using rule 55 (value_operators -> LESS .)
    ID              reduce using rule 55 (value_operators -> LESS .)
    INT_LITERAL     reduce using rule 55 (value_operators -> LESS .)
    FLOAT_LITERAL   reduce using rule 55 (value_operators -> LESS .)
    CHAR_LITERAL    reduce using rule 55 (value_operators -> LESS .)
    STRING_LITERAL  reduce using rule 55 (value_operators -> LESS .)
    BOOL_FALSE      reduce using rule 55 (value_operators -> LESS .)
    BOOL_TRUE       reduce using rule 55 (value_operators -> LESS .)


state 125

    (56) value_operators -> LESS_EQUAL .

    OPEN_PARENTHESIS reduce using rule 56 (value_operators -> LESS_EQUAL .)
    SUB             reduce using rule 56 (value_operators -> LESS_EQUAL .)
    BITWISE_NOT     reduce using rule 56 (value_operators -> LESS_EQUAL .)
    ID              reduce using rule 56 (value_operators -> LESS_EQUAL .)
    INT_LITERAL     reduce using rule 56 (value_operators -> LESS_EQUAL .)
    FLOAT_LITERAL   reduce using rule 56 (value_operators -> LESS_EQUAL .)
    CHAR_LITERAL    reduce using rule 56 (value_operators -> LESS_EQUAL .)
    STRING_LITERAL  reduce using rule 56 (value_operators -> LESS_EQUAL .)
    BOOL_FALSE      reduce using rule 56 (value_operators -> LESS_EQUAL .)
    BOOL_TRUE       reduce using rule 56 (value_operators -> LESS_EQUAL .)


state 126

    (57) value_operators -> GREATER .

    OPEN_PARENTHESIS reduce using rule 57 (value_operators -> GREATER .)
    SUB             reduce using rule 57 (value_operators -> GREATER .)
    BITWISE_NOT     reduce using rule 57 (value_operators -> GREATER .)
    ID              reduce using rule 57 (value_operators -> GREATER .)
    INT_LITERAL     reduce using rule 57 (value_operators -> GREATER .)
    FLOAT_LITERAL   reduce using rule 57 (value_operators -> GREATER .)
    CHAR_LITERAL    reduce using rule 57 (value_operators -> GREATER .)
    STRING_LITERAL  reduce using rule 57 (value_operators -> GREATER .)
    BOOL_FALSE      reduce using rule 57 (value_operators -> GREATER .)
    BOOL_TRUE       reduce using rule 57 (value_operators -> GREATER .)


state 127

    (58) value_operators -> GREATER_EQUAL .

    OPEN_PARENTHESIS reduce using rule 58 (value_operators -> GREATER_EQUAL .)
    SUB             reduce using rule 58 (value_operators -> GREATER_EQUAL .)
    BITWISE_NOT     reduce using rule 58 (value_operators -> GREATER_EQUAL .)
    ID              reduce using rule 58 (value_operators -> GREATER_EQUAL .)
    INT_LITERAL     reduce using rule 58 (value_operators -> GREATER_EQUAL .)
    FLOAT_LITERAL   reduce using rule 58 (value_operators -> GREATER_EQUAL .)
    CHAR_LITERAL    reduce using rule 58 (value_operators -> GREATER_EQUAL .)
    STRING_LITERAL  reduce using rule 58 (value_operators -> GREATER_EQUAL .)
    BOOL_FALSE      reduce using rule 58 (value_operators -> GREATER_EQUAL .)
    BOOL_TRUE       reduce using rule 58 (value_operators -> GREATER_EQUAL .)


state 128

    (59) value_operators -> DIFF .

    OPEN_PARENTHESIS reduce using rule 59 (value_operators -> DIFF .)
    SUB             reduce using rule 59 (value_operators -> DIFF .)
    BITWISE_NOT     reduce using rule 59 (value_operators -> DIFF .)
    ID              reduce using rule 59 (value_operators -> DIFF .)
    INT_LITERAL     reduce using rule 59 (value_operators -> DIFF .)
    FLOAT_LITERAL   reduce using rule 59 (value_operators -> DIFF .)
    CHAR_LITERAL    reduce using rule 59 (value_operators -> DIFF .)
    STRING_LITERAL  reduce using rule 59 (value_operators -> DIFF .)
    BOOL_FALSE      reduce using rule 59 (value_operators -> DIFF .)
    BOOL_TRUE       reduce using rule 59 (value_operators -> DIFF .)


state 129

    (41) break_statement -> YOU SHALL NOT PASS .

    SEMICOLON       reduce using rule 41 (break_statement -> YOU SHALL NOT PASS .)
    EXCLAMATION     reduce using rule 41 (break_statement -> YOU SHALL NOT PASS .)
    NEWLINE         reduce using rule 41 (break_statement -> YOU SHALL NOT PASS .)


state 130

    (46) elif_statement -> elif_statement HOWEVER WHEN . OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block

    OPEN_PARENTHESIS shift and go to state 151


state 131

    (44) else_statement -> ELSE block .

    CLOSE_BRACE     reduce using rule 44 (else_statement -> ELSE block .)
    WHILE           reduce using rule 44 (else_statement -> ELSE block .)
    THE_1           reduce using rule 44 (else_statement -> ELSE block .)
    YOU             reduce using rule 44 (else_statement -> ELSE block .)
    GO              reduce using rule 44 (else_statement -> ELSE block .)
    ID              reduce using rule 44 (else_statement -> ELSE block .)
    IF              reduce using rule 44 (else_statement -> ELSE block .)
    UNSIGNED        reduce using rule 44 (else_statement -> ELSE block .)
    SHORT           reduce using rule 44 (else_statement -> ELSE block .)
    INT             reduce using rule 44 (else_statement -> ELSE block .)
    LONG            reduce using rule 44 (else_statement -> ELSE block .)
    FLOAT           reduce using rule 44 (else_statement -> ELSE block .)
    DOUBLE          reduce using rule 44 (else_statement -> ELSE block .)
    CHAR            reduce using rule 44 (else_statement -> ELSE block .)
    STRING          reduce using rule 44 (else_statement -> ELSE block .)
    BOOL            reduce using rule 44 (else_statement -> ELSE block .)
    VOID            reduce using rule 44 (else_statement -> ELSE block .)


state 132

    (48) return_statement -> GO BACK TO THE_2 . ABYSS
    (49) return_statement -> GO BACK TO THE_2 . ABYSS expression

    ABYSS           shift and go to state 152


state 133

    (43) if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS . block
    (29) block -> . OPEN_BRACE statements_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 39

    block                          shift and go to state 153

state 134

    (71) call_function -> ID OPEN_PARENTHESIS args . CLOSE_PARENTHESIS

    CLOSE_PARENTHESIS shift and go to state 154


state 135

    (72) args -> args_list .
    (75) args_list -> args_list . COMMA expression

    CLOSE_PARENTHESIS reduce using rule 72 (args -> args_list .)
    COMMA           shift and go to state 155


state 136

    (73) args -> empty .

    CLOSE_PARENTHESIS reduce using rule 73 (args -> empty .)


state 137

    (74) args_list -> expression .
    (76) expression -> expression . ADD values
    (77) expression -> expression . SUB values
    (78) expression -> expression . DIV values
    (79) expression -> expression . MULT values
    (80) expression -> expression . MOD values
    (81) expression -> expression . POW values
    (82) expression -> expression . BITWISE_OR values
    (83) expression -> expression . BITWISE_AND values
    (84) expression -> expression . BITWISE_XOR values

    COMMA           reduce using rule 74 (args_list -> expression .)
    CLOSE_PARENTHESIS reduce using rule 74 (args_list -> expression .)
    ADD             shift and go to state 105
    SUB             shift and go to state 106
    DIV             shift and go to state 107
    MULT            shift and go to state 108
    MOD             shift and go to state 109
    POW             shift and go to state 110
    BITWISE_OR      shift and go to state 111
    BITWISE_AND     shift and go to state 112
    BITWISE_XOR     shift and go to state 113


state 138

    (76) expression -> expression ADD values .

    ADD             reduce using rule 76 (expression -> expression ADD values .)
    SUB             reduce using rule 76 (expression -> expression ADD values .)
    DIV             reduce using rule 76 (expression -> expression ADD values .)
    MULT            reduce using rule 76 (expression -> expression ADD values .)
    MOD             reduce using rule 76 (expression -> expression ADD values .)
    POW             reduce using rule 76 (expression -> expression ADD values .)
    BITWISE_OR      reduce using rule 76 (expression -> expression ADD values .)
    BITWISE_AND     reduce using rule 76 (expression -> expression ADD values .)
    BITWISE_XOR     reduce using rule 76 (expression -> expression ADD values .)
    SEMICOLON       reduce using rule 76 (expression -> expression ADD values .)
    EXCLAMATION     reduce using rule 76 (expression -> expression ADD values .)
    NEWLINE         reduce using rule 76 (expression -> expression ADD values .)
    EQUAL           reduce using rule 76 (expression -> expression ADD values .)
    LESS            reduce using rule 76 (expression -> expression ADD values .)
    LESS_EQUAL      reduce using rule 76 (expression -> expression ADD values .)
    GREATER         reduce using rule 76 (expression -> expression ADD values .)
    GREATER_EQUAL   reduce using rule 76 (expression -> expression ADD values .)
    DIFF            reduce using rule 76 (expression -> expression ADD values .)
    CLOSE_PARENTHESIS reduce using rule 76 (expression -> expression ADD values .)
    AND             reduce using rule 76 (expression -> expression ADD values .)
    OR              reduce using rule 76 (expression -> expression ADD values .)
    XOR             reduce using rule 76 (expression -> expression ADD values .)
    COMMA           reduce using rule 76 (expression -> expression ADD values .)


state 139

    (77) expression -> expression SUB values .

    ADD             reduce using rule 77 (expression -> expression SUB values .)
    SUB             reduce using rule 77 (expression -> expression SUB values .)
    DIV             reduce using rule 77 (expression -> expression SUB values .)
    MULT            reduce using rule 77 (expression -> expression SUB values .)
    MOD             reduce using rule 77 (expression -> expression SUB values .)
    POW             reduce using rule 77 (expression -> expression SUB values .)
    BITWISE_OR      reduce using rule 77 (expression -> expression SUB values .)
    BITWISE_AND     reduce using rule 77 (expression -> expression SUB values .)
    BITWISE_XOR     reduce using rule 77 (expression -> expression SUB values .)
    SEMICOLON       reduce using rule 77 (expression -> expression SUB values .)
    EXCLAMATION     reduce using rule 77 (expression -> expression SUB values .)
    NEWLINE         reduce using rule 77 (expression -> expression SUB values .)
    EQUAL           reduce using rule 77 (expression -> expression SUB values .)
    LESS            reduce using rule 77 (expression -> expression SUB values .)
    LESS_EQUAL      reduce using rule 77 (expression -> expression SUB values .)
    GREATER         reduce using rule 77 (expression -> expression SUB values .)
    GREATER_EQUAL   reduce using rule 77 (expression -> expression SUB values .)
    DIFF            reduce using rule 77 (expression -> expression SUB values .)
    CLOSE_PARENTHESIS reduce using rule 77 (expression -> expression SUB values .)
    AND             reduce using rule 77 (expression -> expression SUB values .)
    OR              reduce using rule 77 (expression -> expression SUB values .)
    XOR             reduce using rule 77 (expression -> expression SUB values .)
    COMMA           reduce using rule 77 (expression -> expression SUB values .)


state 140

    (78) expression -> expression DIV values .

    ADD             reduce using rule 78 (expression -> expression DIV values .)
    SUB             reduce using rule 78 (expression -> expression DIV values .)
    DIV             reduce using rule 78 (expression -> expression DIV values .)
    MULT            reduce using rule 78 (expression -> expression DIV values .)
    MOD             reduce using rule 78 (expression -> expression DIV values .)
    POW             reduce using rule 78 (expression -> expression DIV values .)
    BITWISE_OR      reduce using rule 78 (expression -> expression DIV values .)
    BITWISE_AND     reduce using rule 78 (expression -> expression DIV values .)
    BITWISE_XOR     reduce using rule 78 (expression -> expression DIV values .)
    SEMICOLON       reduce using rule 78 (expression -> expression DIV values .)
    EXCLAMATION     reduce using rule 78 (expression -> expression DIV values .)
    NEWLINE         reduce using rule 78 (expression -> expression DIV values .)
    EQUAL           reduce using rule 78 (expression -> expression DIV values .)
    LESS            reduce using rule 78 (expression -> expression DIV values .)
    LESS_EQUAL      reduce using rule 78 (expression -> expression DIV values .)
    GREATER         reduce using rule 78 (expression -> expression DIV values .)
    GREATER_EQUAL   reduce using rule 78 (expression -> expression DIV values .)
    DIFF            reduce using rule 78 (expression -> expression DIV values .)
    CLOSE_PARENTHESIS reduce using rule 78 (expression -> expression DIV values .)
    AND             reduce using rule 78 (expression -> expression DIV values .)
    OR              reduce using rule 78 (expression -> expression DIV values .)
    XOR             reduce using rule 78 (expression -> expression DIV values .)
    COMMA           reduce using rule 78 (expression -> expression DIV values .)


state 141

    (79) expression -> expression MULT values .

    ADD             reduce using rule 79 (expression -> expression MULT values .)
    SUB             reduce using rule 79 (expression -> expression MULT values .)
    DIV             reduce using rule 79 (expression -> expression MULT values .)
    MULT            reduce using rule 79 (expression -> expression MULT values .)
    MOD             reduce using rule 79 (expression -> expression MULT values .)
    POW             reduce using rule 79 (expression -> expression MULT values .)
    BITWISE_OR      reduce using rule 79 (expression -> expression MULT values .)
    BITWISE_AND     reduce using rule 79 (expression -> expression MULT values .)
    BITWISE_XOR     reduce using rule 79 (expression -> expression MULT values .)
    SEMICOLON       reduce using rule 79 (expression -> expression MULT values .)
    EXCLAMATION     reduce using rule 79 (expression -> expression MULT values .)
    NEWLINE         reduce using rule 79 (expression -> expression MULT values .)
    EQUAL           reduce using rule 79 (expression -> expression MULT values .)
    LESS            reduce using rule 79 (expression -> expression MULT values .)
    LESS_EQUAL      reduce using rule 79 (expression -> expression MULT values .)
    GREATER         reduce using rule 79 (expression -> expression MULT values .)
    GREATER_EQUAL   reduce using rule 79 (expression -> expression MULT values .)
    DIFF            reduce using rule 79 (expression -> expression MULT values .)
    CLOSE_PARENTHESIS reduce using rule 79 (expression -> expression MULT values .)
    AND             reduce using rule 79 (expression -> expression MULT values .)
    OR              reduce using rule 79 (expression -> expression MULT values .)
    XOR             reduce using rule 79 (expression -> expression MULT values .)
    COMMA           reduce using rule 79 (expression -> expression MULT values .)


state 142

    (80) expression -> expression MOD values .

    ADD             reduce using rule 80 (expression -> expression MOD values .)
    SUB             reduce using rule 80 (expression -> expression MOD values .)
    DIV             reduce using rule 80 (expression -> expression MOD values .)
    MULT            reduce using rule 80 (expression -> expression MOD values .)
    MOD             reduce using rule 80 (expression -> expression MOD values .)
    POW             reduce using rule 80 (expression -> expression MOD values .)
    BITWISE_OR      reduce using rule 80 (expression -> expression MOD values .)
    BITWISE_AND     reduce using rule 80 (expression -> expression MOD values .)
    BITWISE_XOR     reduce using rule 80 (expression -> expression MOD values .)
    SEMICOLON       reduce using rule 80 (expression -> expression MOD values .)
    EXCLAMATION     reduce using rule 80 (expression -> expression MOD values .)
    NEWLINE         reduce using rule 80 (expression -> expression MOD values .)
    EQUAL           reduce using rule 80 (expression -> expression MOD values .)
    LESS            reduce using rule 80 (expression -> expression MOD values .)
    LESS_EQUAL      reduce using rule 80 (expression -> expression MOD values .)
    GREATER         reduce using rule 80 (expression -> expression MOD values .)
    GREATER_EQUAL   reduce using rule 80 (expression -> expression MOD values .)
    DIFF            reduce using rule 80 (expression -> expression MOD values .)
    CLOSE_PARENTHESIS reduce using rule 80 (expression -> expression MOD values .)
    AND             reduce using rule 80 (expression -> expression MOD values .)
    OR              reduce using rule 80 (expression -> expression MOD values .)
    XOR             reduce using rule 80 (expression -> expression MOD values .)
    COMMA           reduce using rule 80 (expression -> expression MOD values .)


state 143

    (81) expression -> expression POW values .

    ADD             reduce using rule 81 (expression -> expression POW values .)
    SUB             reduce using rule 81 (expression -> expression POW values .)
    DIV             reduce using rule 81 (expression -> expression POW values .)
    MULT            reduce using rule 81 (expression -> expression POW values .)
    MOD             reduce using rule 81 (expression -> expression POW values .)
    POW             reduce using rule 81 (expression -> expression POW values .)
    BITWISE_OR      reduce using rule 81 (expression -> expression POW values .)
    BITWISE_AND     reduce using rule 81 (expression -> expression POW values .)
    BITWISE_XOR     reduce using rule 81 (expression -> expression POW values .)
    SEMICOLON       reduce using rule 81 (expression -> expression POW values .)
    EXCLAMATION     reduce using rule 81 (expression -> expression POW values .)
    NEWLINE         reduce using rule 81 (expression -> expression POW values .)
    EQUAL           reduce using rule 81 (expression -> expression POW values .)
    LESS            reduce using rule 81 (expression -> expression POW values .)
    LESS_EQUAL      reduce using rule 81 (expression -> expression POW values .)
    GREATER         reduce using rule 81 (expression -> expression POW values .)
    GREATER_EQUAL   reduce using rule 81 (expression -> expression POW values .)
    DIFF            reduce using rule 81 (expression -> expression POW values .)
    CLOSE_PARENTHESIS reduce using rule 81 (expression -> expression POW values .)
    AND             reduce using rule 81 (expression -> expression POW values .)
    OR              reduce using rule 81 (expression -> expression POW values .)
    XOR             reduce using rule 81 (expression -> expression POW values .)
    COMMA           reduce using rule 81 (expression -> expression POW values .)


state 144

    (82) expression -> expression BITWISE_OR values .

    ADD             reduce using rule 82 (expression -> expression BITWISE_OR values .)
    SUB             reduce using rule 82 (expression -> expression BITWISE_OR values .)
    DIV             reduce using rule 82 (expression -> expression BITWISE_OR values .)
    MULT            reduce using rule 82 (expression -> expression BITWISE_OR values .)
    MOD             reduce using rule 82 (expression -> expression BITWISE_OR values .)
    POW             reduce using rule 82 (expression -> expression BITWISE_OR values .)
    BITWISE_OR      reduce using rule 82 (expression -> expression BITWISE_OR values .)
    BITWISE_AND     reduce using rule 82 (expression -> expression BITWISE_OR values .)
    BITWISE_XOR     reduce using rule 82 (expression -> expression BITWISE_OR values .)
    SEMICOLON       reduce using rule 82 (expression -> expression BITWISE_OR values .)
    EXCLAMATION     reduce using rule 82 (expression -> expression BITWISE_OR values .)
    NEWLINE         reduce using rule 82 (expression -> expression BITWISE_OR values .)
    EQUAL           reduce using rule 82 (expression -> expression BITWISE_OR values .)
    LESS            reduce using rule 82 (expression -> expression BITWISE_OR values .)
    LESS_EQUAL      reduce using rule 82 (expression -> expression BITWISE_OR values .)
    GREATER         reduce using rule 82 (expression -> expression BITWISE_OR values .)
    GREATER_EQUAL   reduce using rule 82 (expression -> expression BITWISE_OR values .)
    DIFF            reduce using rule 82 (expression -> expression BITWISE_OR values .)
    CLOSE_PARENTHESIS reduce using rule 82 (expression -> expression BITWISE_OR values .)
    AND             reduce using rule 82 (expression -> expression BITWISE_OR values .)
    OR              reduce using rule 82 (expression -> expression BITWISE_OR values .)
    XOR             reduce using rule 82 (expression -> expression BITWISE_OR values .)
    COMMA           reduce using rule 82 (expression -> expression BITWISE_OR values .)


state 145

    (83) expression -> expression BITWISE_AND values .

    ADD             reduce using rule 83 (expression -> expression BITWISE_AND values .)
    SUB             reduce using rule 83 (expression -> expression BITWISE_AND values .)
    DIV             reduce using rule 83 (expression -> expression BITWISE_AND values .)
    MULT            reduce using rule 83 (expression -> expression BITWISE_AND values .)
    MOD             reduce using rule 83 (expression -> expression BITWISE_AND values .)
    POW             reduce using rule 83 (expression -> expression BITWISE_AND values .)
    BITWISE_OR      reduce using rule 83 (expression -> expression BITWISE_AND values .)
    BITWISE_AND     reduce using rule 83 (expression -> expression BITWISE_AND values .)
    BITWISE_XOR     reduce using rule 83 (expression -> expression BITWISE_AND values .)
    SEMICOLON       reduce using rule 83 (expression -> expression BITWISE_AND values .)
    EXCLAMATION     reduce using rule 83 (expression -> expression BITWISE_AND values .)
    NEWLINE         reduce using rule 83 (expression -> expression BITWISE_AND values .)
    EQUAL           reduce using rule 83 (expression -> expression BITWISE_AND values .)
    LESS            reduce using rule 83 (expression -> expression BITWISE_AND values .)
    LESS_EQUAL      reduce using rule 83 (expression -> expression BITWISE_AND values .)
    GREATER         reduce using rule 83 (expression -> expression BITWISE_AND values .)
    GREATER_EQUAL   reduce using rule 83 (expression -> expression BITWISE_AND values .)
    DIFF            reduce using rule 83 (expression -> expression BITWISE_AND values .)
    CLOSE_PARENTHESIS reduce using rule 83 (expression -> expression BITWISE_AND values .)
    AND             reduce using rule 83 (expression -> expression BITWISE_AND values .)
    OR              reduce using rule 83 (expression -> expression BITWISE_AND values .)
    XOR             reduce using rule 83 (expression -> expression BITWISE_AND values .)
    COMMA           reduce using rule 83 (expression -> expression BITWISE_AND values .)


state 146

    (84) expression -> expression BITWISE_XOR values .

    ADD             reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    SUB             reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    DIV             reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    MULT            reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    MOD             reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    POW             reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    BITWISE_OR      reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    BITWISE_AND     reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    BITWISE_XOR     reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    SEMICOLON       reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    EXCLAMATION     reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    NEWLINE         reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    EQUAL           reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    LESS            reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    LESS_EQUAL      reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    GREATER         reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    GREATER_EQUAL   reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    DIFF            reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    CLOSE_PARENTHESIS reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    AND             reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    OR              reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    XOR             reduce using rule 84 (expression -> expression BITWISE_XOR values .)
    COMMA           reduce using rule 84 (expression -> expression BITWISE_XOR values .)


state 147

    (85) expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .

    ADD             reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    SUB             reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    DIV             reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    MULT            reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    MOD             reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    POW             reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    BITWISE_OR      reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    BITWISE_AND     reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    BITWISE_XOR     reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    SEMICOLON       reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    EXCLAMATION     reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    NEWLINE         reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    EQUAL           reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    LESS            reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    LESS_EQUAL      reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    GREATER         reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    GREATER_EQUAL   reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    DIFF            reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    CLOSE_PARENTHESIS reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    AND             reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    OR              reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    XOR             reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)
    COMMA           reduce using rule 85 (expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS .)


state 148

    (39) while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .

    CLOSE_BRACE     reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    WHILE           reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    THE_1           reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    YOU             reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    GO              reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    ID              reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    IF              reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    UNSIGNED        reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    SHORT           reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    INT             reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    LONG            reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    FLOAT           reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    DOUBLE          reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    CHAR            reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    STRING          reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    BOOL            reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    VOID            reduce using rule 39 (while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)


state 149

    (51) comparison_list -> comparison_list logic_operator comparison .

    CLOSE_PARENTHESIS reduce using rule 51 (comparison_list -> comparison_list logic_operator comparison .)
    AND             reduce using rule 51 (comparison_list -> comparison_list logic_operator comparison .)
    OR              reduce using rule 51 (comparison_list -> comparison_list logic_operator comparison .)
    XOR             reduce using rule 51 (comparison_list -> comparison_list logic_operator comparison .)


state 150

    (53) comparison -> expression value_operators expression .
    (76) expression -> expression . ADD values
    (77) expression -> expression . SUB values
    (78) expression -> expression . DIV values
    (79) expression -> expression . MULT values
    (80) expression -> expression . MOD values
    (81) expression -> expression . POW values
    (82) expression -> expression . BITWISE_OR values
    (83) expression -> expression . BITWISE_AND values
    (84) expression -> expression . BITWISE_XOR values

    CLOSE_PARENTHESIS reduce using rule 53 (comparison -> expression value_operators expression .)
    AND             reduce using rule 53 (comparison -> expression value_operators expression .)
    OR              reduce using rule 53 (comparison -> expression value_operators expression .)
    XOR             reduce using rule 53 (comparison -> expression value_operators expression .)
    ADD             shift and go to state 105
    SUB             shift and go to state 106
    DIV             shift and go to state 107
    MULT            shift and go to state 108
    MOD             shift and go to state 109
    POW             shift and go to state 110
    BITWISE_OR      shift and go to state 111
    BITWISE_AND     shift and go to state 112
    BITWISE_XOR     shift and go to state 113


state 151

    (46) elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS . comparison_list CLOSE_PARENTHESIS block
    (50) comparison_list -> . comparison
    (51) comparison_list -> . comparison_list logic_operator comparison
    (52) comparison -> . expression
    (53) comparison -> . expression value_operators expression
    (76) expression -> . expression ADD values
    (77) expression -> . expression SUB values
    (78) expression -> . expression DIV values
    (79) expression -> . expression MULT values
    (80) expression -> . expression MOD values
    (81) expression -> . expression POW values
    (82) expression -> . expression BITWISE_OR values
    (83) expression -> . expression BITWISE_AND values
    (84) expression -> . expression BITWISE_XOR values
    (85) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (86) expression -> . values
    (89) expression -> . SUB expression
    (90) expression -> . BITWISE_NOT expression
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    OPEN_PARENTHESIS shift and go to state 81
    SUB             shift and go to state 83
    BITWISE_NOT     shift and go to state 84
    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    comparison_list                shift and go to state 156
    comparison                     shift and go to state 93
    expression                     shift and go to state 94
    values                         shift and go to state 82
    literal                        shift and go to state 85

state 152

    (48) return_statement -> GO BACK TO THE_2 ABYSS .
    (49) return_statement -> GO BACK TO THE_2 ABYSS . expression
    (76) expression -> . expression ADD values
    (77) expression -> . expression SUB values
    (78) expression -> . expression DIV values
    (79) expression -> . expression MULT values
    (80) expression -> . expression MOD values
    (81) expression -> . expression POW values
    (82) expression -> . expression BITWISE_OR values
    (83) expression -> . expression BITWISE_AND values
    (84) expression -> . expression BITWISE_XOR values
    (85) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (86) expression -> . values
    (89) expression -> . SUB expression
    (90) expression -> . BITWISE_NOT expression
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    SEMICOLON       reduce using rule 48 (return_statement -> GO BACK TO THE_2 ABYSS .)
    EXCLAMATION     reduce using rule 48 (return_statement -> GO BACK TO THE_2 ABYSS .)
    NEWLINE         reduce using rule 48 (return_statement -> GO BACK TO THE_2 ABYSS .)
    OPEN_PARENTHESIS shift and go to state 81
    SUB             shift and go to state 83
    BITWISE_NOT     shift and go to state 84
    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    expression                     shift and go to state 157
    values                         shift and go to state 82
    literal                        shift and go to state 85

state 153

    (43) if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .

    HOWEVER         reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    ELSE            reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    CLOSE_BRACE     reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    WHILE           reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    THE_1           reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    YOU             reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    GO              reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    ID              reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    IF              reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    UNSIGNED        reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    SHORT           reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    INT             reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    LONG            reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    FLOAT           reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    DOUBLE          reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    CHAR            reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    STRING          reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    BOOL            reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    VOID            reduce using rule 43 (if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)


state 154

    (71) call_function -> ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS .

    SEMICOLON       reduce using rule 71 (call_function -> ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS .)
    EXCLAMATION     reduce using rule 71 (call_function -> ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS .)
    NEWLINE         reduce using rule 71 (call_function -> ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS .)


state 155

    (75) args_list -> args_list COMMA . expression
    (76) expression -> . expression ADD values
    (77) expression -> . expression SUB values
    (78) expression -> . expression DIV values
    (79) expression -> . expression MULT values
    (80) expression -> . expression MOD values
    (81) expression -> . expression POW values
    (82) expression -> . expression BITWISE_OR values
    (83) expression -> . expression BITWISE_AND values
    (84) expression -> . expression BITWISE_XOR values
    (85) expression -> . OPEN_PARENTHESIS expression CLOSE_PARENTHESIS
    (86) expression -> . values
    (89) expression -> . SUB expression
    (90) expression -> . BITWISE_NOT expression
    (87) values -> . literal
    (88) values -> . ID
    (63) literal -> . INT_LITERAL
    (64) literal -> . FLOAT_LITERAL
    (65) literal -> . CHAR_LITERAL
    (66) literal -> . STRING_LITERAL
    (67) literal -> . BOOL_FALSE
    (68) literal -> . BOOL_TRUE

    OPEN_PARENTHESIS shift and go to state 81
    SUB             shift and go to state 83
    BITWISE_NOT     shift and go to state 84
    ID              shift and go to state 95
    INT_LITERAL     shift and go to state 86
    FLOAT_LITERAL   shift and go to state 87
    CHAR_LITERAL    shift and go to state 88
    STRING_LITERAL  shift and go to state 89
    BOOL_FALSE      shift and go to state 90
    BOOL_TRUE       shift and go to state 91

    expression                     shift and go to state 158
    values                         shift and go to state 82
    literal                        shift and go to state 85

state 156

    (46) elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list . CLOSE_PARENTHESIS block
    (51) comparison_list -> comparison_list . logic_operator comparison
    (60) logic_operator -> . AND
    (61) logic_operator -> . OR
    (62) logic_operator -> . XOR

    CLOSE_PARENTHESIS shift and go to state 159
    AND             shift and go to state 119
    OR              shift and go to state 120
    XOR             shift and go to state 121

    logic_operator                 shift and go to state 118

state 157

    (49) return_statement -> GO BACK TO THE_2 ABYSS expression .
    (76) expression -> expression . ADD values
    (77) expression -> expression . SUB values
    (78) expression -> expression . DIV values
    (79) expression -> expression . MULT values
    (80) expression -> expression . MOD values
    (81) expression -> expression . POW values
    (82) expression -> expression . BITWISE_OR values
    (83) expression -> expression . BITWISE_AND values
    (84) expression -> expression . BITWISE_XOR values

    SEMICOLON       reduce using rule 49 (return_statement -> GO BACK TO THE_2 ABYSS expression .)
    EXCLAMATION     reduce using rule 49 (return_statement -> GO BACK TO THE_2 ABYSS expression .)
    NEWLINE         reduce using rule 49 (return_statement -> GO BACK TO THE_2 ABYSS expression .)
    ADD             shift and go to state 105
    SUB             shift and go to state 106
    DIV             shift and go to state 107
    MULT            shift and go to state 108
    MOD             shift and go to state 109
    POW             shift and go to state 110
    BITWISE_OR      shift and go to state 111
    BITWISE_AND     shift and go to state 112
    BITWISE_XOR     shift and go to state 113


state 158

    (75) args_list -> args_list COMMA expression .
    (76) expression -> expression . ADD values
    (77) expression -> expression . SUB values
    (78) expression -> expression . DIV values
    (79) expression -> expression . MULT values
    (80) expression -> expression . MOD values
    (81) expression -> expression . POW values
    (82) expression -> expression . BITWISE_OR values
    (83) expression -> expression . BITWISE_AND values
    (84) expression -> expression . BITWISE_XOR values

    COMMA           reduce using rule 75 (args_list -> args_list COMMA expression .)
    CLOSE_PARENTHESIS reduce using rule 75 (args_list -> args_list COMMA expression .)
    ADD             shift and go to state 105
    SUB             shift and go to state 106
    DIV             shift and go to state 107
    MULT            shift and go to state 108
    MOD             shift and go to state 109
    POW             shift and go to state 110
    BITWISE_OR      shift and go to state 111
    BITWISE_AND     shift and go to state 112
    BITWISE_XOR     shift and go to state 113


state 159

    (46) elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS . block
    (29) block -> . OPEN_BRACE statements_list CLOSE_BRACE

    OPEN_BRACE      shift and go to state 39

    block                          shift and go to state 160

state 160

    (46) elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .

    HOWEVER         reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    ELSE            reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    CLOSE_BRACE     reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    WHILE           reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    THE_1           reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    YOU             reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    GO              reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    ID              reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    IF              reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    UNSIGNED        reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    SHORT           reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    INT             reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    LONG            reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    FLOAT           reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    DOUBLE          reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    CHAR            reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    STRING          reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    BOOL            reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)
    VOID            reduce using rule 46 (elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block .)

