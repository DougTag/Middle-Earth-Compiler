
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftADDSUBleftMULTDIVrightUSUBUBITWISENOTABYSS ADD AND ASSIGN BACK BEGINS BITWISE_AND BITWISE_NOT BITWISE_OR BITWISE_XOR BOOL BOOL_FALSE BOOL_TRUE CHAR CHAR_LITERAL CLOSE_BRACE CLOSE_PARENTHESIS COMMA CONTINUES DIFF DIV DOUBLE ELSE EQUAL EXCLAMATION FLOAT FLOAT_LITERAL FUNCTION GO GREATER GREATER_EQUAL HERE HOWEVER ID IF INT INT_LITERAL JOURNEY LESS LESS_EQUAL LONG MOD MULT NEWLINE NOT OPEN_BRACE OPEN_PARENTHESIS OR PASS POW QUEST SEMICOLON SHALL SHORT STRING STRING_LITERAL SUB THE_1 THE_2 TO UNSIGNED VOID WHEN WHILE XOR YOUprogram : global main_statement\n    global : declaration_statement end global\n           | function_statement global\n           | empty\n    function_statement : FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block\n    params : params_list\n           | empty\n    \n    params_list : declaration_statement\n                | params_list COMMA declaration_statement\n    main_statement : THE_1 JOURNEY BEGINS HERE block\n    declaration_statement : type ID\n    \n    declaration_statement_list : declaration_statement\n                               | declaration_statement_list COMMA ID \n    \n    type : UNSIGNED\n         | SHORT\n         | INT\n         | LONG\n         | FLOAT\n         | DOUBLE\n         | CHAR\n         | STRING\n         | BOOL\n         | VOID\n    \n    end : SEMICOLON\n        | EXCLAMATION\n        | error_end\n    error_end : NEWLINEempty :\n    block : OPEN_BRACE statements_list CLOSE_BRACE\n    \n    statements_list : statements_list statements\n                    | empty\n    \n    statements : declaration_statement_list end\n               | while_statement\n               | continue_statement end\n               | break_statement end\n               | if_else_statement\n               | return_statement end\n               | assign_statement end\n    while_statement : WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS blockcontinue_statement : THE_1 QUEST CONTINUESbreak_statement : YOU SHALL NOT PASSif_else_statement : if_statement elif_statement else_statementif_statement : IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block\n    else_statement : ELSE block\n                   | empty\n    \n    elif_statement : elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block \n                   | empty\n    \n    return_statement : GO BACK TO THE_2 ABYSS\n                     | GO BACK TO THE_2 ABYSS expression\n    \n    comparison_list : comparison\n                    | comparison_list logic_operator comparison\n    \n    comparison : expression\n               | expression value_operators expression\n    \n    value_operators : EQUAL\n                    | LESS\n                    | LESS_EQUAL\n                    | GREATER\n                    | GREATER_EQUAL\n                    | DIFF\n    \n    logic_operator : AND\n                   | OR\n                   | XOR\n    \n    literal : INT_LITERAL\n            | FLOAT_LITERAL\n            | CHAR_LITERAL\n            | STRING_LITERAL\n            | BOOL_FALSE\n            | BOOL_TRUE\n    \n    assign_statement : ID ASSIGN call_function\n                     | ID ASSIGN expression\n    call_function : ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS\n    args : args_list\n         | empty\n    \n    args_list : expression\n              | args_list COMMA expression\n    \n    expression : expression ADD values\n               | expression SUB values\n               | expression DIV values\n               | expression MULT values\n               | expression MOD values\n               | expression POW values\n               | expression BITWISE_OR values\n               | expression BITWISE_AND values\n               | expression BITWISE_XOR values\n               | OPEN_PARENTHESIS expression CLOSE_PARENTHESIS\n               | values     \n    \n    values : literal\n           | ID\n    expression : SUB expression %prec USUBexpression : BITWISE_NOT expression %prec UBITWISENOT'
    
_lr_action_items = {'FUNCTION':([0,4,20,21,22,23,24,44,46,],[7,7,7,-24,-25,-26,-27,-5,-29,]),'THE_1':([0,2,4,5,20,21,22,23,24,25,29,39,42,43,44,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[-28,19,-28,-4,-28,-24,-25,-26,-27,-3,-2,-28,58,-31,-5,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'UNSIGNED':([0,4,7,20,21,22,23,24,32,39,41,42,43,44,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[8,8,8,8,-24,-25,-26,-27,8,-28,8,8,-31,-5,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'SHORT':([0,4,7,20,21,22,23,24,32,39,41,42,43,44,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[9,9,9,9,-24,-25,-26,-27,9,-28,9,9,-31,-5,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'INT':([0,4,7,20,21,22,23,24,32,39,41,42,43,44,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[10,10,10,10,-24,-25,-26,-27,10,-28,10,10,-31,-5,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'LONG':([0,4,7,20,21,22,23,24,32,39,41,42,43,44,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[11,11,11,11,-24,-25,-26,-27,11,-28,11,11,-31,-5,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'FLOAT':([0,4,7,20,21,22,23,24,32,39,41,42,43,44,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[12,12,12,12,-24,-25,-26,-27,12,-28,12,12,-31,-5,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'DOUBLE':([0,4,7,20,21,22,23,24,32,39,41,42,43,44,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[13,13,13,13,-24,-25,-26,-27,13,-28,13,13,-31,-5,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'CHAR':([0,4,7,20,21,22,23,24,32,39,41,42,43,44,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[14,14,14,14,-24,-25,-26,-27,14,-28,14,14,-31,-5,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'STRING':([0,4,7,20,21,22,23,24,32,39,41,42,43,44,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[15,15,15,15,-24,-25,-26,-27,15,-28,15,15,-31,-5,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'BOOL':([0,4,7,20,21,22,23,24,32,39,41,42,43,44,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[16,16,16,16,-24,-25,-26,-27,16,-28,16,16,-31,-5,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'VOID':([0,4,7,20,21,22,23,24,32,39,41,42,43,44,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[17,17,17,17,-24,-25,-26,-27,17,-28,17,17,-31,-5,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'$end':([1,18,38,46,],[0,-1,-10,-29,]),'SEMICOLON':([3,26,48,50,51,53,54,55,77,78,79,80,82,85,86,87,88,89,90,91,95,96,115,116,129,138,139,140,141,142,143,144,145,146,147,152,154,157,],[21,-11,21,21,21,21,21,-12,-13,-88,-69,-70,-86,-87,-63,-64,-65,-66,-67,-68,-88,-40,-89,-90,-41,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-48,-71,-49,]),'EXCLAMATION':([3,26,48,50,51,53,54,55,77,78,79,80,82,85,86,87,88,89,90,91,95,96,115,116,129,138,139,140,141,142,143,144,145,146,147,152,154,157,],[22,-11,22,22,22,22,22,-12,-13,-88,-69,-70,-86,-87,-63,-64,-65,-66,-67,-68,-88,-40,-89,-90,-41,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-48,-71,-49,]),'NEWLINE':([3,26,48,50,51,53,54,55,77,78,79,80,82,85,86,87,88,89,90,91,95,96,115,116,129,138,139,140,141,142,143,144,145,146,147,152,154,157,],[24,-11,24,24,24,24,24,-12,-13,-88,-69,-70,-86,-87,-63,-64,-65,-66,-67,-68,-88,-40,-89,-90,-41,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-48,-71,-49,]),'ID':([6,8,9,10,11,12,13,14,15,16,17,21,22,23,24,27,39,42,43,46,47,49,52,60,63,64,65,66,67,68,69,70,73,74,76,81,83,84,98,101,104,105,106,107,108,109,110,111,112,113,118,119,120,121,122,123,124,125,126,127,128,131,148,151,152,153,155,160,],[26,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,30,-28,56,-31,-29,-30,-33,-36,-28,-32,77,-34,-35,-37,-38,78,95,-28,-47,95,95,95,95,-42,-45,95,95,95,95,95,95,95,95,95,95,95,-60,-61,-62,95,-54,-55,-56,-57,-58,-59,-44,-39,95,95,-43,95,-46,]),'JOURNEY':([19,],[28,]),'CLOSE_BRACE':([21,22,23,24,39,42,43,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[-24,-25,-26,-27,-28,46,-31,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'WHILE':([21,22,23,24,39,42,43,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[-24,-25,-26,-27,-28,57,-31,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'YOU':([21,22,23,24,39,42,43,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[-24,-25,-26,-27,-28,59,-31,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'GO':([21,22,23,24,39,42,43,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[-24,-25,-26,-27,-28,61,-31,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'IF':([21,22,23,24,39,42,43,46,47,49,52,60,63,65,66,67,68,73,74,98,101,131,148,153,160,],[-24,-25,-26,-27,-28,62,-31,-29,-30,-33,-36,-28,-32,-34,-35,-37,-38,-28,-47,-42,-45,-44,-39,-43,-46,]),'COMMA':([26,35,37,45,48,55,77,82,85,86,87,88,89,90,91,95,115,116,135,137,138,139,140,141,142,143,144,145,146,147,158,],[-11,41,-8,-9,64,-12,-13,-86,-87,-63,-64,-65,-66,-67,-68,-88,-89,-90,155,-74,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-75,]),'CLOSE_PARENTHESIS':([26,32,34,35,36,37,45,82,85,86,87,88,89,90,91,92,93,94,95,103,104,114,115,116,134,135,136,137,138,139,140,141,142,143,144,145,146,147,149,150,156,158,],[-11,-28,40,-6,-7,-8,-9,-86,-87,-63,-64,-65,-66,-67,-68,117,-50,-52,-88,133,-28,147,-89,-90,154,-72,-73,-74,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-51,-53,159,-75,]),'BEGINS':([28,],[31,]),'OPEN_PARENTHESIS':([30,57,62,69,70,76,78,81,83,84,104,118,119,120,121,122,123,124,125,126,127,128,130,151,152,155,],[32,70,76,81,81,81,104,81,81,81,81,81,-60,-61,-62,81,-54,-55,-56,-57,-58,-59,151,81,81,81,]),'HERE':([31,],[33,]),'OPEN_BRACE':([33,40,100,117,133,159,],[39,39,39,39,39,39,]),'HOWEVER':([46,60,73,74,153,160,],[-29,-28,99,-47,-43,-46,]),'ELSE':([46,60,73,74,153,160,],[-29,-28,100,-47,-43,-46,]),'ASSIGN':([56,],[69,]),'QUEST':([58,],[71,]),'SHALL':([59,],[72,]),'BACK':([61,],[75,]),'SUB':([69,70,76,78,80,81,82,83,84,85,86,87,88,89,90,91,94,95,104,114,115,116,118,119,120,121,122,123,124,125,126,127,128,137,138,139,140,141,142,143,144,145,146,147,150,151,152,155,157,158,],[83,83,83,-88,106,83,-86,83,83,-87,-63,-64,-65,-66,-67,-68,106,-88,83,106,-89,-90,83,-60,-61,-62,83,-54,-55,-56,-57,-58,-59,106,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,106,83,83,83,106,106,]),'BITWISE_NOT':([69,70,76,81,83,84,104,118,119,120,121,122,123,124,125,126,127,128,151,152,155,],[84,84,84,84,84,84,84,84,-60,-61,-62,84,-54,-55,-56,-57,-58,-59,84,84,84,]),'INT_LITERAL':([69,70,76,81,83,84,104,105,106,107,108,109,110,111,112,113,118,119,120,121,122,123,124,125,126,127,128,151,152,155,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-60,-61,-62,86,-54,-55,-56,-57,-58,-59,86,86,86,]),'FLOAT_LITERAL':([69,70,76,81,83,84,104,105,106,107,108,109,110,111,112,113,118,119,120,121,122,123,124,125,126,127,128,151,152,155,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-60,-61,-62,87,-54,-55,-56,-57,-58,-59,87,87,87,]),'CHAR_LITERAL':([69,70,76,81,83,84,104,105,106,107,108,109,110,111,112,113,118,119,120,121,122,123,124,125,126,127,128,151,152,155,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-60,-61,-62,88,-54,-55,-56,-57,-58,-59,88,88,88,]),'STRING_LITERAL':([69,70,76,81,83,84,104,105,106,107,108,109,110,111,112,113,118,119,120,121,122,123,124,125,126,127,128,151,152,155,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-60,-61,-62,89,-54,-55,-56,-57,-58,-59,89,89,89,]),'BOOL_FALSE':([69,70,76,81,83,84,104,105,106,107,108,109,110,111,112,113,118,119,120,121,122,123,124,125,126,127,128,151,152,155,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-60,-61,-62,90,-54,-55,-56,-57,-58,-59,90,90,90,]),'BOOL_TRUE':([69,70,76,81,83,84,104,105,106,107,108,109,110,111,112,113,118,119,120,121,122,123,124,125,126,127,128,151,152,155,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-60,-61,-62,91,-54,-55,-56,-57,-58,-59,91,91,91,]),'CONTINUES':([71,],[96,]),'NOT':([72,],[97,]),'TO':([75,],[102,]),'ADD':([78,80,82,85,86,87,88,89,90,91,94,95,114,115,116,137,138,139,140,141,142,143,144,145,146,147,150,157,158,],[-88,105,-86,-87,-63,-64,-65,-66,-67,-68,105,-88,105,-89,-90,105,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,105,105,105,]),'DIV':([78,80,82,85,86,87,88,89,90,91,94,95,114,115,116,137,138,139,140,141,142,143,144,145,146,147,150,157,158,],[-88,107,-86,-87,-63,-64,-65,-66,-67,-68,107,-88,107,-89,-90,107,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,107,107,107,]),'MULT':([78,80,82,85,86,87,88,89,90,91,94,95,114,115,116,137,138,139,140,141,142,143,144,145,146,147,150,157,158,],[-88,108,-86,-87,-63,-64,-65,-66,-67,-68,108,-88,108,-89,-90,108,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,108,108,108,]),'MOD':([78,80,82,85,86,87,88,89,90,91,94,95,114,115,116,137,138,139,140,141,142,143,144,145,146,147,150,157,158,],[-88,109,-86,-87,-63,-64,-65,-66,-67,-68,109,-88,109,-89,-90,109,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,109,109,109,]),'POW':([78,80,82,85,86,87,88,89,90,91,94,95,114,115,116,137,138,139,140,141,142,143,144,145,146,147,150,157,158,],[-88,110,-86,-87,-63,-64,-65,-66,-67,-68,110,-88,110,-89,-90,110,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,110,110,110,]),'BITWISE_OR':([78,80,82,85,86,87,88,89,90,91,94,95,114,115,116,137,138,139,140,141,142,143,144,145,146,147,150,157,158,],[-88,111,-86,-87,-63,-64,-65,-66,-67,-68,111,-88,111,-89,-90,111,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,111,111,111,]),'BITWISE_AND':([78,80,82,85,86,87,88,89,90,91,94,95,114,115,116,137,138,139,140,141,142,143,144,145,146,147,150,157,158,],[-88,112,-86,-87,-63,-64,-65,-66,-67,-68,112,-88,112,-89,-90,112,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,112,112,112,]),'BITWISE_XOR':([78,80,82,85,86,87,88,89,90,91,94,95,114,115,116,137,138,139,140,141,142,143,144,145,146,147,150,157,158,],[-88,113,-86,-87,-63,-64,-65,-66,-67,-68,113,-88,113,-89,-90,113,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,113,113,113,]),'EQUAL':([82,85,86,87,88,89,90,91,94,95,115,116,138,139,140,141,142,143,144,145,146,147,],[-86,-87,-63,-64,-65,-66,-67,-68,123,-88,-89,-90,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,]),'LESS':([82,85,86,87,88,89,90,91,94,95,115,116,138,139,140,141,142,143,144,145,146,147,],[-86,-87,-63,-64,-65,-66,-67,-68,124,-88,-89,-90,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,]),'LESS_EQUAL':([82,85,86,87,88,89,90,91,94,95,115,116,138,139,140,141,142,143,144,145,146,147,],[-86,-87,-63,-64,-65,-66,-67,-68,125,-88,-89,-90,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,]),'GREATER':([82,85,86,87,88,89,90,91,94,95,115,116,138,139,140,141,142,143,144,145,146,147,],[-86,-87,-63,-64,-65,-66,-67,-68,126,-88,-89,-90,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,]),'GREATER_EQUAL':([82,85,86,87,88,89,90,91,94,95,115,116,138,139,140,141,142,143,144,145,146,147,],[-86,-87,-63,-64,-65,-66,-67,-68,127,-88,-89,-90,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,]),'DIFF':([82,85,86,87,88,89,90,91,94,95,115,116,138,139,140,141,142,143,144,145,146,147,],[-86,-87,-63,-64,-65,-66,-67,-68,128,-88,-89,-90,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,]),'AND':([82,85,86,87,88,89,90,91,92,93,94,95,103,115,116,138,139,140,141,142,143,144,145,146,147,149,150,156,],[-86,-87,-63,-64,-65,-66,-67,-68,119,-50,-52,-88,119,-89,-90,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-51,-53,119,]),'OR':([82,85,86,87,88,89,90,91,92,93,94,95,103,115,116,138,139,140,141,142,143,144,145,146,147,149,150,156,],[-86,-87,-63,-64,-65,-66,-67,-68,120,-50,-52,-88,120,-89,-90,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-51,-53,120,]),'XOR':([82,85,86,87,88,89,90,91,92,93,94,95,103,115,116,138,139,140,141,142,143,144,145,146,147,149,150,156,],[-86,-87,-63,-64,-65,-66,-67,-68,121,-50,-52,-88,121,-89,-90,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-51,-53,121,]),'PASS':([97,],[129,]),'WHEN':([99,],[130,]),'THE_2':([102,],[132,]),'ABYSS':([132,],[152,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global':([0,4,20,],[2,25,29,]),'declaration_statement':([0,4,20,32,41,42,],[3,3,3,37,45,55,]),'function_statement':([0,4,20,],[4,4,4,]),'empty':([0,4,20,32,39,60,73,104,],[5,5,5,36,43,74,101,136,]),'type':([0,4,7,20,32,41,42,],[6,6,27,6,6,6,6,]),'main_statement':([2,],[18,]),'end':([3,48,50,51,53,54,],[20,63,65,66,67,68,]),'error_end':([3,48,50,51,53,54,],[23,23,23,23,23,23,]),'params':([32,],[34,]),'params_list':([32,],[35,]),'block':([33,40,100,117,133,159,],[38,44,131,148,153,160,]),'statements_list':([39,],[42,]),'statements':([42,],[47,]),'declaration_statement_list':([42,],[48,]),'while_statement':([42,],[49,]),'continue_statement':([42,],[50,]),'break_statement':([42,],[51,]),'if_else_statement':([42,],[52,]),'return_statement':([42,],[53,]),'assign_statement':([42,],[54,]),'if_statement':([42,],[60,]),'elif_statement':([60,],[73,]),'call_function':([69,],[79,]),'expression':([69,70,76,81,83,84,104,118,122,151,152,155,],[80,94,94,114,115,116,137,94,150,94,157,158,]),'values':([69,70,76,81,83,84,104,105,106,107,108,109,110,111,112,113,118,122,151,152,155,],[82,82,82,82,82,82,82,138,139,140,141,142,143,144,145,146,82,82,82,82,82,]),'literal':([69,70,76,81,83,84,104,105,106,107,108,109,110,111,112,113,118,122,151,152,155,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'comparison_list':([70,76,151,],[92,103,156,]),'comparison':([70,76,118,151,],[93,93,149,93,]),'else_statement':([73,],[98,]),'logic_operator':([92,103,156,],[118,118,118,]),'value_operators':([94,],[122,]),'args':([104,],[134,]),'args_list':([104,],[135,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global main_statement','program',2,'p_program','mepp_parser.py',5),
  ('global -> declaration_statement end global','global',3,'p_global','mepp_parser.py',9),
  ('global -> function_statement global','global',2,'p_global','mepp_parser.py',10),
  ('global -> empty','global',1,'p_global','mepp_parser.py',11),
  ('function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block','function_statement',7,'p_function_statement','mepp_parser.py',15),
  ('params -> params_list','params',1,'p_params','mepp_parser.py',19),
  ('params -> empty','params',1,'p_params','mepp_parser.py',20),
  ('params_list -> declaration_statement','params_list',1,'p_params_list','mepp_parser.py',25),
  ('params_list -> params_list COMMA declaration_statement','params_list',3,'p_params_list','mepp_parser.py',26),
  ('main_statement -> THE_1 JOURNEY BEGINS HERE block','main_statement',5,'p_main_statement','mepp_parser.py',31),
  ('declaration_statement -> type ID','declaration_statement',2,'p_declaration_statement','mepp_parser.py',35),
  ('declaration_statement_list -> declaration_statement','declaration_statement_list',1,'p_declaration_statement_list','mepp_parser.py',40),
  ('declaration_statement_list -> declaration_statement_list COMMA ID','declaration_statement_list',3,'p_declaration_statement_list','mepp_parser.py',41),
  ('type -> UNSIGNED','type',1,'p_type','mepp_parser.py',46),
  ('type -> SHORT','type',1,'p_type','mepp_parser.py',47),
  ('type -> INT','type',1,'p_type','mepp_parser.py',48),
  ('type -> LONG','type',1,'p_type','mepp_parser.py',49),
  ('type -> FLOAT','type',1,'p_type','mepp_parser.py',50),
  ('type -> DOUBLE','type',1,'p_type','mepp_parser.py',51),
  ('type -> CHAR','type',1,'p_type','mepp_parser.py',52),
  ('type -> STRING','type',1,'p_type','mepp_parser.py',53),
  ('type -> BOOL','type',1,'p_type','mepp_parser.py',54),
  ('type -> VOID','type',1,'p_type','mepp_parser.py',55),
  ('end -> SEMICOLON','end',1,'p_end','mepp_parser.py',61),
  ('end -> EXCLAMATION','end',1,'p_end','mepp_parser.py',62),
  ('end -> error_end','end',1,'p_end','mepp_parser.py',63),
  ('error_end -> NEWLINE','error_end',1,'p_error_end','mepp_parser.py',67),
  ('empty -> <empty>','empty',0,'p_empty','mepp_parser.py',71),
  ('block -> OPEN_BRACE statements_list CLOSE_BRACE','block',3,'p_block','mepp_parser.py',76),
  ('statements_list -> statements_list statements','statements_list',2,'p_statements_list','mepp_parser.py',81),
  ('statements_list -> empty','statements_list',1,'p_statements_list','mepp_parser.py',82),
  ('statements -> declaration_statement_list end','statements',2,'p_statements','mepp_parser.py',87),
  ('statements -> while_statement','statements',1,'p_statements','mepp_parser.py',88),
  ('statements -> continue_statement end','statements',2,'p_statements','mepp_parser.py',89),
  ('statements -> break_statement end','statements',2,'p_statements','mepp_parser.py',90),
  ('statements -> if_else_statement','statements',1,'p_statements','mepp_parser.py',91),
  ('statements -> return_statement end','statements',2,'p_statements','mepp_parser.py',92),
  ('statements -> assign_statement end','statements',2,'p_statements','mepp_parser.py',93),
  ('while_statement -> WHILE OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block','while_statement',5,'p_while_statement','mepp_parser.py',97),
  ('continue_statement -> THE_1 QUEST CONTINUES','continue_statement',3,'p_continue_statement','mepp_parser.py',100),
  ('break_statement -> YOU SHALL NOT PASS','break_statement',4,'p_break_statement','mepp_parser.py',103),
  ('if_else_statement -> if_statement elif_statement else_statement','if_else_statement',3,'p_if_else_statement','mepp_parser.py',106),
  ('if_statement -> IF OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block','if_statement',5,'p_if_statement','mepp_parser.py',109),
  ('else_statement -> ELSE block','else_statement',2,'p_else_statement','mepp_parser.py',113),
  ('else_statement -> empty','else_statement',1,'p_else_statement','mepp_parser.py',114),
  ('elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparison_list CLOSE_PARENTHESIS block','elif_statement',7,'p_elif_statement','mepp_parser.py',119),
  ('elif_statement -> empty','elif_statement',1,'p_elif_statement','mepp_parser.py',120),
  ('return_statement -> GO BACK TO THE_2 ABYSS','return_statement',5,'p_return_statement','mepp_parser.py',125),
  ('return_statement -> GO BACK TO THE_2 ABYSS expression','return_statement',6,'p_return_statement','mepp_parser.py',126),
  ('comparison_list -> comparison','comparison_list',1,'p_comparison_list','mepp_parser.py',131),
  ('comparison_list -> comparison_list logic_operator comparison','comparison_list',3,'p_comparison_list','mepp_parser.py',132),
  ('comparison -> expression','comparison',1,'p_comparasion','mepp_parser.py',137),
  ('comparison -> expression value_operators expression','comparison',3,'p_comparasion','mepp_parser.py',138),
  ('value_operators -> EQUAL','value_operators',1,'p_operators','mepp_parser.py',143),
  ('value_operators -> LESS','value_operators',1,'p_operators','mepp_parser.py',144),
  ('value_operators -> LESS_EQUAL','value_operators',1,'p_operators','mepp_parser.py',145),
  ('value_operators -> GREATER','value_operators',1,'p_operators','mepp_parser.py',146),
  ('value_operators -> GREATER_EQUAL','value_operators',1,'p_operators','mepp_parser.py',147),
  ('value_operators -> DIFF','value_operators',1,'p_operators','mepp_parser.py',148),
  ('logic_operator -> AND','logic_operator',1,'p_logic_operator','mepp_parser.py',153),
  ('logic_operator -> OR','logic_operator',1,'p_logic_operator','mepp_parser.py',154),
  ('logic_operator -> XOR','logic_operator',1,'p_logic_operator','mepp_parser.py',155),
  ('literal -> INT_LITERAL','literal',1,'p_literal','mepp_parser.py',160),
  ('literal -> FLOAT_LITERAL','literal',1,'p_literal','mepp_parser.py',161),
  ('literal -> CHAR_LITERAL','literal',1,'p_literal','mepp_parser.py',162),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','mepp_parser.py',163),
  ('literal -> BOOL_FALSE','literal',1,'p_literal','mepp_parser.py',164),
  ('literal -> BOOL_TRUE','literal',1,'p_literal','mepp_parser.py',165),
  ('assign_statement -> ID ASSIGN call_function','assign_statement',3,'p_assign_statement','mepp_parser.py',171),
  ('assign_statement -> ID ASSIGN expression','assign_statement',3,'p_assign_statement','mepp_parser.py',172),
  ('call_function -> ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS','call_function',4,'p_function','mepp_parser.py',176),
  ('args -> args_list','args',1,'p_args','mepp_parser.py',180),
  ('args -> empty','args',1,'p_args','mepp_parser.py',181),
  ('args_list -> expression','args_list',1,'p_args_list','mepp_parser.py',186),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list','mepp_parser.py',187),
  ('expression -> expression ADD values','expression',3,'p_expression','mepp_parser.py',193),
  ('expression -> expression SUB values','expression',3,'p_expression','mepp_parser.py',194),
  ('expression -> expression DIV values','expression',3,'p_expression','mepp_parser.py',195),
  ('expression -> expression MULT values','expression',3,'p_expression','mepp_parser.py',196),
  ('expression -> expression MOD values','expression',3,'p_expression','mepp_parser.py',197),
  ('expression -> expression POW values','expression',3,'p_expression','mepp_parser.py',198),
  ('expression -> expression BITWISE_OR values','expression',3,'p_expression','mepp_parser.py',199),
  ('expression -> expression BITWISE_AND values','expression',3,'p_expression','mepp_parser.py',200),
  ('expression -> expression BITWISE_XOR values','expression',3,'p_expression','mepp_parser.py',201),
  ('expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS','expression',3,'p_expression','mepp_parser.py',202),
  ('expression -> values','expression',1,'p_expression','mepp_parser.py',203),
  ('values -> literal','values',1,'p_values','mepp_parser.py',208),
  ('values -> ID','values',1,'p_values','mepp_parser.py',209),
  ('expression -> SUB expression','expression',2,'p_expr_usub','mepp_parser.py',213),
  ('expression -> BITWISE_NOT expression','expression',2,'p_expr_ubitwisenot','mepp_parser.py',216),
]
