
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABYSS ADD AND ASSIGN BACK BEGINS BITWISE_AND BITWISE_NOT BITWISE_OR BITWISE_XOR BOOL BOOL_FALSE BOOL_TRUE CHAR CHAR_LITERAL CLOSE_BRACE CLOSE_PARENTHESIS COMMA CONTINUES DIV DOUBLE ELSE EQUAL FLOAT FLOAT_LITERAL FUNCTION GO GREATER GREATER_EQUAL HERE HOWEVER ID IF INT INT_LITERAL JOURNEY LESS LESS_EQUAL LONG MOD MULT NOT OPEN_BRACE OPEN_PARENTHESIS OR PASS POW QUEST SEMICOLON SHALL SHORT STRING STRING_LITERAL SUB THE_1 THE_2 TO UNSIGNED VOID WHEN WHILE XOR YOUprogram : global main_statement\n    global : declaration_statement end global\n           | function_statement global\n           | empty\n    function_statement : FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block\n    params : params_list\n           | empty\n    \n    params_list : declaration_statement\n                | params_list COMMA declaration_statement\n    main_statement : THE_1 JOURNEY BEGINS HERE block\n    declaration_statement : type ID\n    \n    declaration_statement_list : declaration_statement\n                               | declaration_statement_list COMMA ID \n    \n    type : UNSIGNED\n         | SHORT\n         | INT\n         | LONG\n         | FLOAT\n         | DOUBLE\n         | CHAR\n         | STRING\n         | BOOL\n         | VOID\n    end : SEMICOLONempty :\n    block : OPEN_BRACE statements_list CLOSE_BRACE\n    \n    statements_list : statements_list statements\n                    | empty\n    \n    statements : declaration_statement_list end\n               | while_statement\n               | continue_statement end\n               | break_statement end\n               | if_else_statement\n               | return_statement end\n               | assign_statement end\n    while_statement : WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS blockcontinue_statement : THE_1 QUEST CONTINUESbreak_statement : YOU SHALL NOT PASSif_else_statement : if_statement elif_statement else_statementif_statement : IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block\n    else_statement : ELSE block\n                   | empty\n    \n    elif_statement : elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block \n                   | empty\n    \n    return_statement : GO BACK TO THE_2 ABYSS\n                     | GO BACK TO THE_2 ABYSS ID\n                     | GO BACK TO THE_2 ABYSS literal\n    \n    comparasion_list : comparasion\n                     | comparasion_list logic_operator comparasion\n    \n    comparasion : expression\n                | expression value_operators expression\n    \n    value_operators : EQUAL\n                    | LESS\n                    | LESS_EQUAL\n                    | GREATER\n                    | GREATER_EQUAL\n    \n    logic_operator : AND\n                   | OR\n                   | XOR\n    \n    literal : INT_LITERAL\n            | FLOAT_LITERAL\n            | CHAR_LITERAL\n            | STRING_LITERAL\n            | BOOL_FALSE\n            | BOOL_TRUE\n    \n    assign_statement : ID ASSIGN call_function\n                     | ID ASSIGN expression\n    call_function : ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS\n    args : args_list\n         | empty\n    \n    args_list : values\n              | args_list COMMA values\n    \n    expression : expression ADD values\n               | expression SUB values\n               | expression DIV values\n               | expression MULT values\n               | expression MOD values\n               | expression POW values\n               | expression BITWISE_OR values\n               | expression BITWISE_AND values\n               | expression BITWISE_XOR values\n               | OPEN_PARENTHESIS expression CLOSE_PARENTHESIS\n               | values     \n    \n    values : literal\n           | ID\n    '
    
_lr_action_items = {'FUNCTION':([0,4,20,21,41,43,],[7,7,7,-24,-5,-26,]),'THE_1':([0,2,4,5,20,21,22,26,36,39,40,41,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[-25,19,-25,-4,-25,-24,-3,-2,-25,55,-28,-5,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'UNSIGNED':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[8,8,8,8,-24,8,-25,8,8,-28,-5,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'SHORT':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[9,9,9,9,-24,9,-25,9,9,-28,-5,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'INT':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[10,10,10,10,-24,10,-25,10,10,-28,-5,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'LONG':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[11,11,11,11,-24,11,-25,11,11,-28,-5,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'FLOAT':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[12,12,12,12,-24,12,-25,12,12,-28,-5,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'DOUBLE':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[13,13,13,13,-24,13,-25,13,13,-28,-5,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'CHAR':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[14,14,14,14,-24,14,-25,14,14,-28,-5,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'STRING':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[15,15,15,15,-24,15,-25,15,15,-28,-5,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'BOOL':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[16,16,16,16,-24,16,-25,16,16,-28,-5,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'VOID':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[17,17,17,17,-24,17,-25,17,17,-28,-5,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'$end':([1,18,35,43,],[0,-1,-10,-26,]),'SEMICOLON':([3,23,45,47,48,50,51,52,74,75,76,77,79,80,81,82,83,84,85,86,90,91,121,130,131,132,133,134,135,136,137,138,139,144,146,149,150,],[21,-11,21,21,21,21,21,-12,-13,-85,-66,-67,-83,-84,-60,-61,-62,-63,-64,-65,-85,-37,-38,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-45,-68,-46,-47,]),'ID':([6,8,9,10,11,12,13,14,15,16,17,21,24,36,39,40,43,44,46,49,57,60,61,62,63,64,65,66,67,70,71,73,78,93,96,99,100,101,102,103,104,105,106,107,108,111,112,113,114,115,116,117,118,119,120,123,140,143,144,145,147,153,],[23,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,27,-25,53,-28,-26,-27,-30,-33,-25,-29,74,-31,-32,-34,-35,75,90,-25,-44,90,90,-39,-42,90,90,90,90,90,90,90,90,90,90,90,-57,-58,-59,90,-52,-53,-54,-55,-56,-41,-36,90,149,-40,90,-43,]),'JOURNEY':([19,],[25,]),'CLOSE_BRACE':([21,36,39,40,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[-24,-25,43,-28,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'WHILE':([21,36,39,40,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[-24,-25,54,-28,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'YOU':([21,36,39,40,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[-24,-25,56,-28,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'GO':([21,36,39,40,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[-24,-25,58,-28,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'IF':([21,36,39,40,43,44,46,49,57,60,62,63,64,65,70,71,93,96,123,140,145,153,],[-24,-25,59,-28,-26,-27,-30,-33,-25,-29,-31,-32,-34,-35,-25,-44,-39,-42,-41,-36,-40,-43,]),'COMMA':([23,32,34,42,45,52,74,80,81,82,83,84,85,86,90,127,129,151,],[-11,38,-8,-9,61,-12,-13,-84,-60,-61,-62,-63,-64,-65,-85,147,-71,-72,]),'CLOSE_PARENTHESIS':([23,29,31,32,33,34,42,79,80,81,82,83,84,85,86,87,88,89,90,98,99,109,126,127,128,129,130,131,132,133,134,135,136,137,138,139,141,142,148,151,],[-11,-25,37,-6,-7,-8,-9,-83,-84,-60,-61,-62,-63,-64,-65,110,-48,-50,-85,125,-25,139,146,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-49,-51,152,-72,]),'BEGINS':([25,],[28,]),'OPEN_PARENTHESIS':([27,54,59,66,67,73,75,78,111,112,113,114,115,116,117,118,119,120,122,143,],[29,67,73,78,78,78,99,78,78,-57,-58,-59,78,-52,-53,-54,-55,-56,143,78,]),'HERE':([28,],[30,]),'OPEN_BRACE':([30,37,95,110,125,152,],[36,36,36,36,36,36,]),'HOWEVER':([43,57,70,71,145,153,],[-26,-25,94,-44,-40,-43,]),'ELSE':([43,57,70,71,145,153,],[-26,-25,95,-44,-40,-43,]),'ASSIGN':([53,],[66,]),'QUEST':([55,],[68,]),'SHALL':([56,],[69,]),'BACK':([58,],[72,]),'INT_LITERAL':([66,67,73,78,99,100,101,102,103,104,105,106,107,108,111,112,113,114,115,116,117,118,119,120,143,144,147,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-57,-58,-59,81,-52,-53,-54,-55,-56,81,81,81,]),'FLOAT_LITERAL':([66,67,73,78,99,100,101,102,103,104,105,106,107,108,111,112,113,114,115,116,117,118,119,120,143,144,147,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-57,-58,-59,82,-52,-53,-54,-55,-56,82,82,82,]),'CHAR_LITERAL':([66,67,73,78,99,100,101,102,103,104,105,106,107,108,111,112,113,114,115,116,117,118,119,120,143,144,147,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-57,-58,-59,83,-52,-53,-54,-55,-56,83,83,83,]),'STRING_LITERAL':([66,67,73,78,99,100,101,102,103,104,105,106,107,108,111,112,113,114,115,116,117,118,119,120,143,144,147,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-57,-58,-59,84,-52,-53,-54,-55,-56,84,84,84,]),'BOOL_FALSE':([66,67,73,78,99,100,101,102,103,104,105,106,107,108,111,112,113,114,115,116,117,118,119,120,143,144,147,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-57,-58,-59,85,-52,-53,-54,-55,-56,85,85,85,]),'BOOL_TRUE':([66,67,73,78,99,100,101,102,103,104,105,106,107,108,111,112,113,114,115,116,117,118,119,120,143,144,147,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-57,-58,-59,86,-52,-53,-54,-55,-56,86,86,86,]),'CONTINUES':([68,],[91,]),'NOT':([69,],[92,]),'TO':([72,],[97,]),'ADD':([75,77,79,80,81,82,83,84,85,86,89,90,109,130,131,132,133,134,135,136,137,138,139,142,],[-85,100,-83,-84,-60,-61,-62,-63,-64,-65,100,-85,100,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,100,]),'SUB':([75,77,79,80,81,82,83,84,85,86,89,90,109,130,131,132,133,134,135,136,137,138,139,142,],[-85,101,-83,-84,-60,-61,-62,-63,-64,-65,101,-85,101,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,101,]),'DIV':([75,77,79,80,81,82,83,84,85,86,89,90,109,130,131,132,133,134,135,136,137,138,139,142,],[-85,102,-83,-84,-60,-61,-62,-63,-64,-65,102,-85,102,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,102,]),'MULT':([75,77,79,80,81,82,83,84,85,86,89,90,109,130,131,132,133,134,135,136,137,138,139,142,],[-85,103,-83,-84,-60,-61,-62,-63,-64,-65,103,-85,103,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,103,]),'MOD':([75,77,79,80,81,82,83,84,85,86,89,90,109,130,131,132,133,134,135,136,137,138,139,142,],[-85,104,-83,-84,-60,-61,-62,-63,-64,-65,104,-85,104,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,104,]),'POW':([75,77,79,80,81,82,83,84,85,86,89,90,109,130,131,132,133,134,135,136,137,138,139,142,],[-85,105,-83,-84,-60,-61,-62,-63,-64,-65,105,-85,105,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,105,]),'BITWISE_OR':([75,77,79,80,81,82,83,84,85,86,89,90,109,130,131,132,133,134,135,136,137,138,139,142,],[-85,106,-83,-84,-60,-61,-62,-63,-64,-65,106,-85,106,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,106,]),'BITWISE_AND':([75,77,79,80,81,82,83,84,85,86,89,90,109,130,131,132,133,134,135,136,137,138,139,142,],[-85,107,-83,-84,-60,-61,-62,-63,-64,-65,107,-85,107,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,107,]),'BITWISE_XOR':([75,77,79,80,81,82,83,84,85,86,89,90,109,130,131,132,133,134,135,136,137,138,139,142,],[-85,108,-83,-84,-60,-61,-62,-63,-64,-65,108,-85,108,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,108,]),'EQUAL':([79,80,81,82,83,84,85,86,89,90,130,131,132,133,134,135,136,137,138,139,],[-83,-84,-60,-61,-62,-63,-64,-65,116,-85,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,]),'LESS':([79,80,81,82,83,84,85,86,89,90,130,131,132,133,134,135,136,137,138,139,],[-83,-84,-60,-61,-62,-63,-64,-65,117,-85,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,]),'LESS_EQUAL':([79,80,81,82,83,84,85,86,89,90,130,131,132,133,134,135,136,137,138,139,],[-83,-84,-60,-61,-62,-63,-64,-65,118,-85,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,]),'GREATER':([79,80,81,82,83,84,85,86,89,90,130,131,132,133,134,135,136,137,138,139,],[-83,-84,-60,-61,-62,-63,-64,-65,119,-85,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,]),'GREATER_EQUAL':([79,80,81,82,83,84,85,86,89,90,130,131,132,133,134,135,136,137,138,139,],[-83,-84,-60,-61,-62,-63,-64,-65,120,-85,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,]),'AND':([79,80,81,82,83,84,85,86,87,88,89,90,98,130,131,132,133,134,135,136,137,138,139,141,142,148,],[-83,-84,-60,-61,-62,-63,-64,-65,112,-48,-50,-85,112,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-49,-51,112,]),'OR':([79,80,81,82,83,84,85,86,87,88,89,90,98,130,131,132,133,134,135,136,137,138,139,141,142,148,],[-83,-84,-60,-61,-62,-63,-64,-65,113,-48,-50,-85,113,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-49,-51,113,]),'XOR':([79,80,81,82,83,84,85,86,87,88,89,90,98,130,131,132,133,134,135,136,137,138,139,141,142,148,],[-83,-84,-60,-61,-62,-63,-64,-65,114,-48,-50,-85,114,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-49,-51,114,]),'PASS':([92,],[121,]),'WHEN':([94,],[122,]),'THE_2':([97,],[124,]),'ABYSS':([124,],[144,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global':([0,4,20,],[2,22,26,]),'declaration_statement':([0,4,20,29,38,39,],[3,3,3,34,42,52,]),'function_statement':([0,4,20,],[4,4,4,]),'empty':([0,4,20,29,36,57,70,99,],[5,5,5,33,40,71,96,128,]),'type':([0,4,7,20,29,38,39,],[6,6,24,6,6,6,6,]),'main_statement':([2,],[18,]),'end':([3,45,47,48,50,51,],[20,60,62,63,64,65,]),'params':([29,],[31,]),'params_list':([29,],[32,]),'block':([30,37,95,110,125,152,],[35,41,123,140,145,153,]),'statements_list':([36,],[39,]),'statements':([39,],[44,]),'declaration_statement_list':([39,],[45,]),'while_statement':([39,],[46,]),'continue_statement':([39,],[47,]),'break_statement':([39,],[48,]),'if_else_statement':([39,],[49,]),'return_statement':([39,],[50,]),'assign_statement':([39,],[51,]),'if_statement':([39,],[57,]),'elif_statement':([57,],[70,]),'call_function':([66,],[76,]),'expression':([66,67,73,78,111,115,143,],[77,89,89,109,89,142,89,]),'values':([66,67,73,78,99,100,101,102,103,104,105,106,107,108,111,115,143,147,],[79,79,79,79,129,130,131,132,133,134,135,136,137,138,79,79,79,151,]),'literal':([66,67,73,78,99,100,101,102,103,104,105,106,107,108,111,115,143,144,147,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,150,80,]),'comparasion_list':([67,73,143,],[87,98,148,]),'comparasion':([67,73,111,143,],[88,88,141,88,]),'else_statement':([70,],[93,]),'logic_operator':([87,98,148,],[111,111,111,]),'value_operators':([89,],[115,]),'args':([99,],[126,]),'args_list':([99,],[127,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global main_statement','program',2,'p_program','mepp_parser.py',5),
  ('global -> declaration_statement end global','global',3,'p_global','mepp_parser.py',9),
  ('global -> function_statement global','global',2,'p_global','mepp_parser.py',10),
  ('global -> empty','global',1,'p_global','mepp_parser.py',11),
  ('function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block','function_statement',7,'p_function_statement','mepp_parser.py',15),
  ('params -> params_list','params',1,'p_params','mepp_parser.py',19),
  ('params -> empty','params',1,'p_params','mepp_parser.py',20),
  ('params_list -> declaration_statement','params_list',1,'p_params_list','mepp_parser.py',25),
  ('params_list -> params_list COMMA declaration_statement','params_list',3,'p_params_list','mepp_parser.py',26),
  ('main_statement -> THE_1 JOURNEY BEGINS HERE block','main_statement',5,'p_main_statement','mepp_parser.py',31),
  ('declaration_statement -> type ID','declaration_statement',2,'p_declaration_statement','mepp_parser.py',35),
  ('declaration_statement_list -> declaration_statement','declaration_statement_list',1,'p_declaration_statement_list','mepp_parser.py',40),
  ('declaration_statement_list -> declaration_statement_list COMMA ID','declaration_statement_list',3,'p_declaration_statement_list','mepp_parser.py',41),
  ('type -> UNSIGNED','type',1,'p_type','mepp_parser.py',46),
  ('type -> SHORT','type',1,'p_type','mepp_parser.py',47),
  ('type -> INT','type',1,'p_type','mepp_parser.py',48),
  ('type -> LONG','type',1,'p_type','mepp_parser.py',49),
  ('type -> FLOAT','type',1,'p_type','mepp_parser.py',50),
  ('type -> DOUBLE','type',1,'p_type','mepp_parser.py',51),
  ('type -> CHAR','type',1,'p_type','mepp_parser.py',52),
  ('type -> STRING','type',1,'p_type','mepp_parser.py',53),
  ('type -> BOOL','type',1,'p_type','mepp_parser.py',54),
  ('type -> VOID','type',1,'p_type','mepp_parser.py',55),
  ('end -> SEMICOLON','end',1,'p_end','mepp_parser.py',59),
  ('empty -> <empty>','empty',0,'p_empty','mepp_parser.py',62),
  ('block -> OPEN_BRACE statements_list CLOSE_BRACE','block',3,'p_block','mepp_parser.py',67),
  ('statements_list -> statements_list statements','statements_list',2,'p_statements_list','mepp_parser.py',72),
  ('statements_list -> empty','statements_list',1,'p_statements_list','mepp_parser.py',73),
  ('statements -> declaration_statement_list end','statements',2,'p_statements','mepp_parser.py',78),
  ('statements -> while_statement','statements',1,'p_statements','mepp_parser.py',79),
  ('statements -> continue_statement end','statements',2,'p_statements','mepp_parser.py',80),
  ('statements -> break_statement end','statements',2,'p_statements','mepp_parser.py',81),
  ('statements -> if_else_statement','statements',1,'p_statements','mepp_parser.py',82),
  ('statements -> return_statement end','statements',2,'p_statements','mepp_parser.py',83),
  ('statements -> assign_statement end','statements',2,'p_statements','mepp_parser.py',84),
  ('while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block','while_statement',5,'p_while_statement','mepp_parser.py',88),
  ('continue_statement -> THE_1 QUEST CONTINUES','continue_statement',3,'p_continue_statement','mepp_parser.py',91),
  ('break_statement -> YOU SHALL NOT PASS','break_statement',4,'p_break_statement','mepp_parser.py',94),
  ('if_else_statement -> if_statement elif_statement else_statement','if_else_statement',3,'p_if_else_statement','mepp_parser.py',97),
  ('if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block','if_statement',5,'p_if_statement','mepp_parser.py',100),
  ('else_statement -> ELSE block','else_statement',2,'p_else_statement','mepp_parser.py',104),
  ('else_statement -> empty','else_statement',1,'p_else_statement','mepp_parser.py',105),
  ('elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block','elif_statement',7,'p_elif_statement','mepp_parser.py',110),
  ('elif_statement -> empty','elif_statement',1,'p_elif_statement','mepp_parser.py',111),
  ('return_statement -> GO BACK TO THE_2 ABYSS','return_statement',5,'p_return_statement','mepp_parser.py',116),
  ('return_statement -> GO BACK TO THE_2 ABYSS ID','return_statement',6,'p_return_statement','mepp_parser.py',117),
  ('return_statement -> GO BACK TO THE_2 ABYSS literal','return_statement',6,'p_return_statement','mepp_parser.py',118),
  ('comparasion_list -> comparasion','comparasion_list',1,'p_comparasion_list','mepp_parser.py',123),
  ('comparasion_list -> comparasion_list logic_operator comparasion','comparasion_list',3,'p_comparasion_list','mepp_parser.py',124),
  ('comparasion -> expression','comparasion',1,'p_comparasion','mepp_parser.py',129),
  ('comparasion -> expression value_operators expression','comparasion',3,'p_comparasion','mepp_parser.py',130),
  ('value_operators -> EQUAL','value_operators',1,'p_operators','mepp_parser.py',135),
  ('value_operators -> LESS','value_operators',1,'p_operators','mepp_parser.py',136),
  ('value_operators -> LESS_EQUAL','value_operators',1,'p_operators','mepp_parser.py',137),
  ('value_operators -> GREATER','value_operators',1,'p_operators','mepp_parser.py',138),
  ('value_operators -> GREATER_EQUAL','value_operators',1,'p_operators','mepp_parser.py',139),
  ('logic_operator -> AND','logic_operator',1,'p_logic_operator','mepp_parser.py',144),
  ('logic_operator -> OR','logic_operator',1,'p_logic_operator','mepp_parser.py',145),
  ('logic_operator -> XOR','logic_operator',1,'p_logic_operator','mepp_parser.py',146),
  ('literal -> INT_LITERAL','literal',1,'p_literal','mepp_parser.py',151),
  ('literal -> FLOAT_LITERAL','literal',1,'p_literal','mepp_parser.py',152),
  ('literal -> CHAR_LITERAL','literal',1,'p_literal','mepp_parser.py',153),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','mepp_parser.py',154),
  ('literal -> BOOL_FALSE','literal',1,'p_literal','mepp_parser.py',155),
  ('literal -> BOOL_TRUE','literal',1,'p_literal','mepp_parser.py',156),
  ('assign_statement -> ID ASSIGN call_function','assign_statement',3,'p_assign_statement','mepp_parser.py',162),
  ('assign_statement -> ID ASSIGN expression','assign_statement',3,'p_assign_statement','mepp_parser.py',163),
  ('call_function -> ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS','call_function',4,'p_function','mepp_parser.py',167),
  ('args -> args_list','args',1,'p_args','mepp_parser.py',171),
  ('args -> empty','args',1,'p_args','mepp_parser.py',172),
  ('args_list -> values','args_list',1,'p_args_list','mepp_parser.py',177),
  ('args_list -> args_list COMMA values','args_list',3,'p_args_list','mepp_parser.py',178),
  ('expression -> expression ADD values','expression',3,'p_expression','mepp_parser.py',184),
  ('expression -> expression SUB values','expression',3,'p_expression','mepp_parser.py',185),
  ('expression -> expression DIV values','expression',3,'p_expression','mepp_parser.py',186),
  ('expression -> expression MULT values','expression',3,'p_expression','mepp_parser.py',187),
  ('expression -> expression MOD values','expression',3,'p_expression','mepp_parser.py',188),
  ('expression -> expression POW values','expression',3,'p_expression','mepp_parser.py',189),
  ('expression -> expression BITWISE_OR values','expression',3,'p_expression','mepp_parser.py',190),
  ('expression -> expression BITWISE_AND values','expression',3,'p_expression','mepp_parser.py',191),
  ('expression -> expression BITWISE_XOR values','expression',3,'p_expression','mepp_parser.py',192),
  ('expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS','expression',3,'p_expression','mepp_parser.py',193),
  ('expression -> values','expression',1,'p_expression','mepp_parser.py',194),
  ('values -> literal','values',1,'p_values','mepp_parser.py',199),
  ('values -> ID','values',1,'p_values','mepp_parser.py',200),
]
