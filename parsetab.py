
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABYSS ADD AND ASSIGN BACK BEGINS BITWISE_AND BITWISE_NOT BITWISE_OR BITWISE_XOR BOOL BOOL_FALSE BOOL_TRUE CHAR CHAR_LITERAL CLOSE_BRACE CLOSE_PARENTHESIS COMMA CONTINUES DIV DOUBLE ELSE EQUAL FLOAT FLOAT_LITERAL FUNCTION GO GREATER GREATER_EQUAL HERE HOWEVER ID IF INT INT_LITERAL JOURNEY LESS LESS_EQUAL LONG MOD MULT NOT OPEN_BRACE OPEN_PARENTHESIS OR PASS POW QUEST SEMICOLON SHALL SHORT STRING STRING_LITERAL SUB THE_1 THE_2 TO UNSIGNED VOID WHEN WHILE XOR YOUprogram : global main_statement\n    global : declaration_statement end global\n           | function_statement global\n           | empty\n    function_statement : FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block\n    params : params_list\n           | empty\n    \n    params_list : declaration_statement\n                | params_list COMMA declaration_statement\n    main_statement : THE_1 JOURNEY BEGINS HERE block\n    declaration_statement : type ID\n    \n    type : UNSIGNED\n         | SHORT\n         | INT\n         | LONG\n         | FLOAT\n         | DOUBLE\n         | CHAR\n         | STRING\n         | BOOL\n         | VOID\n    end : SEMICOLONempty :\n    block : OPEN_BRACE statements_list CLOSE_BRACE\n    \n    statements_list : statements_list statements\n                    | empty\n    \n    statements : declaration_statement end\n               | while_statement\n               | continue_statement end\n               | break_statement end\n               | if_else_statement\n               | return_statement end\n               | assign_statement end\n    while_statement : WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS blockcontinue_statement : THE_1 QUEST CONTINUESbreak_statement : YOU SHALL NOT PASSif_else_statement : if_statement elif_statement else_statementif_statement : IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block\n    else_statement : ELSE block\n                   | empty\n    \n    elif_statement : elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block \n                   | empty\n    \n    return_statement : GO BACK TO THE_2 ABYSS\n                     | GO BACK TO THE_2 ABYSS ID\n                     | GO BACK TO THE_2 ABYSS literal\n    \n    comparasion_list : comparasion\n                     | comparasion_list logic_operator comparasion\n    \n    comparasion : values\n                | values value_operators values\n    \n    value_operators : EQUAL\n                    | LESS\n                    | LESS_EQUAL\n                    | GREATER\n                    | GREATER_EQUAL\n    \n    logic_operator : AND\n                   | OR\n                   | XOR\n    \n    literal : INT_LITERAL\n            | FLOAT_LITERAL\n            | CHAR_LITERAL\n            | STRING_LITERAL\n            | BOOL_FALSE\n            | BOOL_TRUE\n    \n    assign_statement : ID ASSIGN values\n                     | ID ASSIGN call_function\n    call_function : ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS\n    args : args_list\n         | empty\n    \n    args_list : values\n              | args_list COMMA values\n    \n    values : literal\n           | ID\n           | expression\n    \n    expression : expression ADD expression\n               | expression SUB expression\n               | expression DIV expression\n               | expression MULT expression\n               | expression MOD expression\n               | expression POW expression\n    \n    expression : literal\n               | ID\n    '
    
_lr_action_items = {'FUNCTION':([0,4,20,21,41,43,],[7,7,7,-22,-5,-24,]),'THE_1':([0,2,4,5,20,21,22,26,36,39,40,41,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[-23,19,-23,-4,-23,-22,-3,-2,-23,54,-26,-5,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'UNSIGNED':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[8,8,8,8,-22,8,-23,8,8,-26,-5,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'SHORT':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[9,9,9,9,-22,9,-23,9,9,-26,-5,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'INT':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[10,10,10,10,-22,10,-23,10,10,-26,-5,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'LONG':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[11,11,11,11,-22,11,-23,11,11,-26,-5,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'FLOAT':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[12,12,12,12,-22,12,-23,12,12,-26,-5,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'DOUBLE':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[13,13,13,13,-22,13,-23,13,13,-26,-5,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'CHAR':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[14,14,14,14,-22,14,-23,14,14,-26,-5,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'STRING':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[15,15,15,15,-22,15,-23,15,15,-26,-5,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'BOOL':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[16,16,16,16,-22,16,-23,16,16,-26,-5,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'VOID':([0,4,7,20,21,29,36,38,39,40,41,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[17,17,17,17,-22,17,-23,17,17,-26,-5,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'$end':([1,18,35,43,],[0,-1,-10,-24,]),'SEMICOLON':([3,23,45,47,48,50,51,72,73,74,75,76,77,78,79,80,81,82,87,113,122,123,124,125,126,127,128,129,134,136,139,140,],[21,-11,21,21,21,21,21,-72,-64,-65,-71,-73,-58,-59,-60,-61,-62,-63,-35,-36,-74,-80,-81,-75,-76,-77,-78,-79,-43,-66,-44,-45,]),'ID':([6,8,9,10,11,12,13,14,15,16,17,21,24,36,39,40,43,44,46,49,56,59,60,61,62,63,64,65,68,69,71,89,92,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,115,130,133,134,135,137,143,],[23,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,27,-23,52,-26,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,72,86,-23,-42,86,-37,-40,86,124,124,124,124,124,124,86,-55,-56,-57,86,-50,-51,-52,-53,-54,-39,-34,86,139,-38,86,-41,]),'JOURNEY':([19,],[25,]),'CLOSE_BRACE':([21,36,39,40,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[-22,-23,43,-26,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'WHILE':([21,36,39,40,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[-22,-23,53,-26,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'YOU':([21,36,39,40,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[-22,-23,55,-26,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'GO':([21,36,39,40,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[-22,-23,57,-26,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'IF':([21,36,39,40,43,44,46,49,56,59,60,61,62,63,68,69,89,92,115,130,135,143,],[-22,-23,58,-26,-24,-25,-28,-31,-23,-27,-29,-30,-32,-33,-23,-42,-37,-40,-39,-34,-38,-41,]),'COMMA':([23,32,34,42,75,76,77,78,79,80,81,82,86,119,121,122,123,124,125,126,127,128,129,141,],[-11,38,-8,-9,-71,-73,-58,-59,-60,-61,-62,-63,-72,137,-69,-74,-80,-81,-75,-76,-77,-78,-79,-70,]),'CLOSE_PARENTHESIS':([23,29,31,32,33,34,42,75,76,77,78,79,80,81,82,83,84,85,86,94,95,118,119,120,121,122,123,124,125,126,127,128,129,131,132,138,141,],[-11,-23,37,-6,-7,-8,-9,-71,-73,-58,-59,-60,-61,-62,-63,102,-46,-48,-72,117,-23,136,-67,-68,-69,-74,-80,-81,-75,-76,-77,-78,-79,-47,-49,142,-70,]),'BEGINS':([25,],[28,]),'OPEN_PARENTHESIS':([27,53,58,72,114,],[29,65,71,95,133,]),'HERE':([28,],[30,]),'OPEN_BRACE':([30,37,91,102,117,142,],[36,36,36,36,36,36,]),'HOWEVER':([43,56,68,69,135,143,],[-24,-23,90,-42,-38,-41,]),'ELSE':([43,56,68,69,135,143,],[-24,-23,91,-42,-38,-41,]),'ASSIGN':([52,],[64,]),'QUEST':([54,],[66,]),'SHALL':([55,],[67,]),'BACK':([57,],[70,]),'INT_LITERAL':([64,65,71,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,133,134,137,],[77,77,77,77,77,77,77,77,77,77,77,-55,-56,-57,77,-50,-51,-52,-53,-54,77,77,77,]),'FLOAT_LITERAL':([64,65,71,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,133,134,137,],[78,78,78,78,78,78,78,78,78,78,78,-55,-56,-57,78,-50,-51,-52,-53,-54,78,78,78,]),'CHAR_LITERAL':([64,65,71,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,133,134,137,],[79,79,79,79,79,79,79,79,79,79,79,-55,-56,-57,79,-50,-51,-52,-53,-54,79,79,79,]),'STRING_LITERAL':([64,65,71,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,133,134,137,],[80,80,80,80,80,80,80,80,80,80,80,-55,-56,-57,80,-50,-51,-52,-53,-54,80,80,80,]),'BOOL_FALSE':([64,65,71,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,133,134,137,],[81,81,81,81,81,81,81,81,81,81,81,-55,-56,-57,81,-50,-51,-52,-53,-54,81,81,81,]),'BOOL_TRUE':([64,65,71,95,96,97,98,99,100,101,103,104,105,106,107,108,109,110,111,112,133,134,137,],[82,82,82,82,82,82,82,82,82,82,82,-55,-56,-57,82,-50,-51,-52,-53,-54,82,82,82,]),'CONTINUES':([66,],[87,]),'NOT':([67,],[88,]),'TO':([70,],[93,]),'ADD':([72,75,76,77,78,79,80,81,82,86,122,123,124,125,126,127,128,129,],[-81,-80,96,-58,-59,-60,-61,-62,-63,-81,96,-80,-81,96,96,96,96,96,]),'SUB':([72,75,76,77,78,79,80,81,82,86,122,123,124,125,126,127,128,129,],[-81,-80,97,-58,-59,-60,-61,-62,-63,-81,97,-80,-81,97,97,97,97,97,]),'DIV':([72,75,76,77,78,79,80,81,82,86,122,123,124,125,126,127,128,129,],[-81,-80,98,-58,-59,-60,-61,-62,-63,-81,98,-80,-81,98,98,98,98,98,]),'MULT':([72,75,76,77,78,79,80,81,82,86,122,123,124,125,126,127,128,129,],[-81,-80,99,-58,-59,-60,-61,-62,-63,-81,99,-80,-81,99,99,99,99,99,]),'MOD':([72,75,76,77,78,79,80,81,82,86,122,123,124,125,126,127,128,129,],[-81,-80,100,-58,-59,-60,-61,-62,-63,-81,100,-80,-81,100,100,100,100,100,]),'POW':([72,75,76,77,78,79,80,81,82,86,122,123,124,125,126,127,128,129,],[-81,-80,101,-58,-59,-60,-61,-62,-63,-81,101,-80,-81,101,101,101,101,101,]),'EQUAL':([75,76,77,78,79,80,81,82,85,86,122,123,124,125,126,127,128,129,],[-71,-73,-58,-59,-60,-61,-62,-63,108,-72,-74,-80,-81,-75,-76,-77,-78,-79,]),'LESS':([75,76,77,78,79,80,81,82,85,86,122,123,124,125,126,127,128,129,],[-71,-73,-58,-59,-60,-61,-62,-63,109,-72,-74,-80,-81,-75,-76,-77,-78,-79,]),'LESS_EQUAL':([75,76,77,78,79,80,81,82,85,86,122,123,124,125,126,127,128,129,],[-71,-73,-58,-59,-60,-61,-62,-63,110,-72,-74,-80,-81,-75,-76,-77,-78,-79,]),'GREATER':([75,76,77,78,79,80,81,82,85,86,122,123,124,125,126,127,128,129,],[-71,-73,-58,-59,-60,-61,-62,-63,111,-72,-74,-80,-81,-75,-76,-77,-78,-79,]),'GREATER_EQUAL':([75,76,77,78,79,80,81,82,85,86,122,123,124,125,126,127,128,129,],[-71,-73,-58,-59,-60,-61,-62,-63,112,-72,-74,-80,-81,-75,-76,-77,-78,-79,]),'AND':([75,76,77,78,79,80,81,82,83,84,85,86,94,122,123,124,125,126,127,128,129,131,132,138,],[-71,-73,-58,-59,-60,-61,-62,-63,104,-46,-48,-72,104,-74,-80,-81,-75,-76,-77,-78,-79,-47,-49,104,]),'OR':([75,76,77,78,79,80,81,82,83,84,85,86,94,122,123,124,125,126,127,128,129,131,132,138,],[-71,-73,-58,-59,-60,-61,-62,-63,105,-46,-48,-72,105,-74,-80,-81,-75,-76,-77,-78,-79,-47,-49,105,]),'XOR':([75,76,77,78,79,80,81,82,83,84,85,86,94,122,123,124,125,126,127,128,129,131,132,138,],[-71,-73,-58,-59,-60,-61,-62,-63,106,-46,-48,-72,106,-74,-80,-81,-75,-76,-77,-78,-79,-47,-49,106,]),'PASS':([88,],[113,]),'WHEN':([90,],[114,]),'THE_2':([93,],[116,]),'ABYSS':([116,],[134,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global':([0,4,20,],[2,22,26,]),'declaration_statement':([0,4,20,29,38,39,],[3,3,3,34,42,45,]),'function_statement':([0,4,20,],[4,4,4,]),'empty':([0,4,20,29,36,56,68,95,],[5,5,5,33,40,69,92,120,]),'type':([0,4,7,20,29,38,39,],[6,6,24,6,6,6,6,]),'main_statement':([2,],[18,]),'end':([3,45,47,48,50,51,],[20,59,60,61,62,63,]),'params':([29,],[31,]),'params_list':([29,],[32,]),'block':([30,37,91,102,117,142,],[35,41,115,130,135,143,]),'statements_list':([36,],[39,]),'statements':([39,],[44,]),'while_statement':([39,],[46,]),'continue_statement':([39,],[47,]),'break_statement':([39,],[48,]),'if_else_statement':([39,],[49,]),'return_statement':([39,],[50,]),'assign_statement':([39,],[51,]),'if_statement':([39,],[56,]),'elif_statement':([56,],[68,]),'values':([64,65,71,95,103,107,133,137,],[73,85,85,121,85,132,85,141,]),'call_function':([64,],[74,]),'literal':([64,65,71,95,96,97,98,99,100,101,103,107,133,134,137,],[75,75,75,75,123,123,123,123,123,123,75,75,75,140,75,]),'expression':([64,65,71,95,96,97,98,99,100,101,103,107,133,137,],[76,76,76,76,122,125,126,127,128,129,76,76,76,76,]),'comparasion_list':([65,71,133,],[83,94,138,]),'comparasion':([65,71,103,133,],[84,84,131,84,]),'else_statement':([68,],[89,]),'logic_operator':([83,94,138,],[103,103,103,]),'value_operators':([85,],[107,]),'args':([95,],[118,]),'args_list':([95,],[119,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global main_statement','program',2,'p_program','mepp_parser.py',5),
  ('global -> declaration_statement end global','global',3,'p_global','mepp_parser.py',9),
  ('global -> function_statement global','global',2,'p_global','mepp_parser.py',10),
  ('global -> empty','global',1,'p_global','mepp_parser.py',11),
  ('function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block','function_statement',7,'p_function_statement','mepp_parser.py',15),
  ('params -> params_list','params',1,'p_params','mepp_parser.py',19),
  ('params -> empty','params',1,'p_params','mepp_parser.py',20),
  ('params_list -> declaration_statement','params_list',1,'p_params_list','mepp_parser.py',25),
  ('params_list -> params_list COMMA declaration_statement','params_list',3,'p_params_list','mepp_parser.py',26),
  ('main_statement -> THE_1 JOURNEY BEGINS HERE block','main_statement',5,'p_main_statement','mepp_parser.py',31),
  ('declaration_statement -> type ID','declaration_statement',2,'p_declaration_statement','mepp_parser.py',35),
  ('type -> UNSIGNED','type',1,'p_type','mepp_parser.py',40),
  ('type -> SHORT','type',1,'p_type','mepp_parser.py',41),
  ('type -> INT','type',1,'p_type','mepp_parser.py',42),
  ('type -> LONG','type',1,'p_type','mepp_parser.py',43),
  ('type -> FLOAT','type',1,'p_type','mepp_parser.py',44),
  ('type -> DOUBLE','type',1,'p_type','mepp_parser.py',45),
  ('type -> CHAR','type',1,'p_type','mepp_parser.py',46),
  ('type -> STRING','type',1,'p_type','mepp_parser.py',47),
  ('type -> BOOL','type',1,'p_type','mepp_parser.py',48),
  ('type -> VOID','type',1,'p_type','mepp_parser.py',49),
  ('end -> SEMICOLON','end',1,'p_end','mepp_parser.py',53),
  ('empty -> <empty>','empty',0,'p_empty','mepp_parser.py',56),
  ('block -> OPEN_BRACE statements_list CLOSE_BRACE','block',3,'p_block','mepp_parser.py',61),
  ('statements_list -> statements_list statements','statements_list',2,'p_statements_list','mepp_parser.py',66),
  ('statements_list -> empty','statements_list',1,'p_statements_list','mepp_parser.py',67),
  ('statements -> declaration_statement end','statements',2,'p_statements','mepp_parser.py',72),
  ('statements -> while_statement','statements',1,'p_statements','mepp_parser.py',73),
  ('statements -> continue_statement end','statements',2,'p_statements','mepp_parser.py',74),
  ('statements -> break_statement end','statements',2,'p_statements','mepp_parser.py',75),
  ('statements -> if_else_statement','statements',1,'p_statements','mepp_parser.py',76),
  ('statements -> return_statement end','statements',2,'p_statements','mepp_parser.py',77),
  ('statements -> assign_statement end','statements',2,'p_statements','mepp_parser.py',78),
  ('while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block','while_statement',5,'p_while_statement','mepp_parser.py',82),
  ('continue_statement -> THE_1 QUEST CONTINUES','continue_statement',3,'p_continue_statement','mepp_parser.py',85),
  ('break_statement -> YOU SHALL NOT PASS','break_statement',4,'p_break_statement','mepp_parser.py',88),
  ('if_else_statement -> if_statement elif_statement else_statement','if_else_statement',3,'p_if_else_statement','mepp_parser.py',91),
  ('if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block','if_statement',5,'p_if_statement','mepp_parser.py',94),
  ('else_statement -> ELSE block','else_statement',2,'p_else_statement','mepp_parser.py',98),
  ('else_statement -> empty','else_statement',1,'p_else_statement','mepp_parser.py',99),
  ('elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block','elif_statement',7,'p_elif_statement','mepp_parser.py',104),
  ('elif_statement -> empty','elif_statement',1,'p_elif_statement','mepp_parser.py',105),
  ('return_statement -> GO BACK TO THE_2 ABYSS','return_statement',5,'p_return_statement','mepp_parser.py',110),
  ('return_statement -> GO BACK TO THE_2 ABYSS ID','return_statement',6,'p_return_statement','mepp_parser.py',111),
  ('return_statement -> GO BACK TO THE_2 ABYSS literal','return_statement',6,'p_return_statement','mepp_parser.py',112),
  ('comparasion_list -> comparasion','comparasion_list',1,'p_comparasion_list','mepp_parser.py',117),
  ('comparasion_list -> comparasion_list logic_operator comparasion','comparasion_list',3,'p_comparasion_list','mepp_parser.py',118),
  ('comparasion -> values','comparasion',1,'p_comparasion','mepp_parser.py',123),
  ('comparasion -> values value_operators values','comparasion',3,'p_comparasion','mepp_parser.py',124),
  ('value_operators -> EQUAL','value_operators',1,'p_operators','mepp_parser.py',129),
  ('value_operators -> LESS','value_operators',1,'p_operators','mepp_parser.py',130),
  ('value_operators -> LESS_EQUAL','value_operators',1,'p_operators','mepp_parser.py',131),
  ('value_operators -> GREATER','value_operators',1,'p_operators','mepp_parser.py',132),
  ('value_operators -> GREATER_EQUAL','value_operators',1,'p_operators','mepp_parser.py',133),
  ('logic_operator -> AND','logic_operator',1,'p_logic_operator','mepp_parser.py',138),
  ('logic_operator -> OR','logic_operator',1,'p_logic_operator','mepp_parser.py',139),
  ('logic_operator -> XOR','logic_operator',1,'p_logic_operator','mepp_parser.py',140),
  ('literal -> INT_LITERAL','literal',1,'p_literal','mepp_parser.py',145),
  ('literal -> FLOAT_LITERAL','literal',1,'p_literal','mepp_parser.py',146),
  ('literal -> CHAR_LITERAL','literal',1,'p_literal','mepp_parser.py',147),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','mepp_parser.py',148),
  ('literal -> BOOL_FALSE','literal',1,'p_literal','mepp_parser.py',149),
  ('literal -> BOOL_TRUE','literal',1,'p_literal','mepp_parser.py',150),
  ('assign_statement -> ID ASSIGN values','assign_statement',3,'p_assign_statement','mepp_parser.py',156),
  ('assign_statement -> ID ASSIGN call_function','assign_statement',3,'p_assign_statement','mepp_parser.py',157),
  ('call_function -> ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS','call_function',4,'p_function','mepp_parser.py',161),
  ('args -> args_list','args',1,'p_args','mepp_parser.py',165),
  ('args -> empty','args',1,'p_args','mepp_parser.py',166),
  ('args_list -> values','args_list',1,'p_args_list','mepp_parser.py',171),
  ('args_list -> args_list COMMA values','args_list',3,'p_args_list','mepp_parser.py',172),
  ('values -> literal','values',1,'p_values','mepp_parser.py',177),
  ('values -> ID','values',1,'p_values','mepp_parser.py',178),
  ('values -> expression','values',1,'p_values','mepp_parser.py',179),
  ('expression -> expression ADD expression','expression',3,'p_expression','mepp_parser.py',184),
  ('expression -> expression SUB expression','expression',3,'p_expression','mepp_parser.py',185),
  ('expression -> expression DIV expression','expression',3,'p_expression','mepp_parser.py',186),
  ('expression -> expression MULT expression','expression',3,'p_expression','mepp_parser.py',187),
  ('expression -> expression MOD expression','expression',3,'p_expression','mepp_parser.py',188),
  ('expression -> expression POW expression','expression',3,'p_expression','mepp_parser.py',189),
  ('expression -> literal','expression',1,'p_expression_number','mepp_parser.py',194),
  ('expression -> ID','expression',1,'p_expression_number','mepp_parser.py',195),
]
