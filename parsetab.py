
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ABYSS ADD AND ASSIGN BACK BEGINS BITWISE_AND BITWISE_NOT BITWISE_OR BITWISE_XOR BOOL BOOL_FALSE BOOL_TRUE CHAR CHAR_LITERAL CLOSE_BRACE CLOSE_PARENTHESIS COMMA CONTINUES DIV DOUBLE ELSE EQUAL EXCLAMATION FLOAT FLOAT_LITERAL FUNCTION GO GREATER GREATER_EQUAL HERE HOWEVER ID IF INT INT_LITERAL JOURNEY LESS LESS_EQUAL LONG MOD MULT NOT OPEN_BRACE OPEN_PARENTHESIS OR PASS POW QUEST SEMICOLON SHALL SHORT STRING STRING_LITERAL SUB THE_1 THE_2 TO UNSIGNED VOID WHEN WHILE XOR YOUprogram : global main_statement\n    global : declaration_statement end global\n           | function_statement global\n           | empty\n    function_statement : FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block\n    params : params_list\n           | empty\n    \n    params_list : declaration_statement\n                | params_list COMMA declaration_statement\n    main_statement : THE_1 JOURNEY BEGINS HERE block\n    declaration_statement : type ID\n    \n    declaration_statement_list : declaration_statement\n                               | declaration_statement_list COMMA ID \n    \n    type : UNSIGNED\n         | SHORT\n         | INT\n         | LONG\n         | FLOAT\n         | DOUBLE\n         | CHAR\n         | STRING\n         | BOOL\n         | VOID\n    \n    end : SEMICOLON\n        | EXCLAMATION\n    empty :\n    block : OPEN_BRACE statements_list CLOSE_BRACE\n    \n    statements_list : statements_list statements\n                    | empty\n    \n    statements : declaration_statement_list end\n               | while_statement\n               | continue_statement end\n               | break_statement end\n               | if_else_statement\n               | return_statement end\n               | assign_statement end\n    while_statement : WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS blockcontinue_statement : THE_1 QUEST CONTINUESbreak_statement : YOU SHALL NOT PASSif_else_statement : if_statement elif_statement else_statementif_statement : IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block\n    else_statement : ELSE block\n                   | empty\n    \n    elif_statement : elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block \n                   | empty\n    \n    return_statement : GO BACK TO THE_2 ABYSS\n                     | GO BACK TO THE_2 ABYSS expression\n    \n    comparasion_list : comparasion\n                     | comparasion_list logic_operator comparasion\n    \n    comparasion : expression\n                | expression value_operators expression\n    \n    value_operators : EQUAL\n                    | LESS\n                    | LESS_EQUAL\n                    | GREATER\n                    | GREATER_EQUAL\n    \n    logic_operator : AND\n                   | OR\n                   | XOR\n    \n    literal : INT_LITERAL\n            | FLOAT_LITERAL\n            | CHAR_LITERAL\n            | STRING_LITERAL\n            | BOOL_FALSE\n            | BOOL_TRUE\n    \n    assign_statement : ID ASSIGN call_function\n                     | ID ASSIGN expression\n    call_function : ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS\n    args : args_list\n         | empty\n    \n    args_list : expression\n              | args_list COMMA expression\n    \n    expression : expression ADD values\n               | expression SUB values\n               | expression DIV values\n               | expression MULT values\n               | expression MOD values\n               | expression POW values\n               | expression BITWISE_OR values\n               | expression BITWISE_AND values\n               | expression BITWISE_XOR values\n               | OPEN_PARENTHESIS expression CLOSE_PARENTHESIS\n               | values     \n    \n    values : literal\n           | ID\n    '
    
_lr_action_items = {'FUNCTION':([0,4,20,21,22,42,44,],[7,7,7,-24,-25,-5,-27,]),'THE_1':([0,2,4,5,20,21,22,23,27,37,40,41,42,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[-26,19,-26,-4,-26,-24,-25,-3,-2,-26,56,-29,-5,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'UNSIGNED':([0,4,7,20,21,22,30,37,39,40,41,42,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[8,8,8,8,-24,-25,8,-26,8,8,-29,-5,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'SHORT':([0,4,7,20,21,22,30,37,39,40,41,42,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[9,9,9,9,-24,-25,9,-26,9,9,-29,-5,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'INT':([0,4,7,20,21,22,30,37,39,40,41,42,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[10,10,10,10,-24,-25,10,-26,10,10,-29,-5,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'LONG':([0,4,7,20,21,22,30,37,39,40,41,42,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[11,11,11,11,-24,-25,11,-26,11,11,-29,-5,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'FLOAT':([0,4,7,20,21,22,30,37,39,40,41,42,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[12,12,12,12,-24,-25,12,-26,12,12,-29,-5,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'DOUBLE':([0,4,7,20,21,22,30,37,39,40,41,42,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[13,13,13,13,-24,-25,13,-26,13,13,-29,-5,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'CHAR':([0,4,7,20,21,22,30,37,39,40,41,42,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[14,14,14,14,-24,-25,14,-26,14,14,-29,-5,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'STRING':([0,4,7,20,21,22,30,37,39,40,41,42,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[15,15,15,15,-24,-25,15,-26,15,15,-29,-5,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'BOOL':([0,4,7,20,21,22,30,37,39,40,41,42,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[16,16,16,16,-24,-25,16,-26,16,16,-29,-5,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'VOID':([0,4,7,20,21,22,30,37,39,40,41,42,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[17,17,17,17,-24,-25,17,-26,17,17,-29,-5,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'$end':([1,18,36,44,],[0,-1,-10,-27,]),'SEMICOLON':([3,24,46,48,49,51,52,53,75,76,77,78,80,81,82,83,84,85,86,87,91,92,122,131,132,133,134,135,136,137,138,139,140,145,147,150,],[21,-11,21,21,21,21,21,-12,-13,-85,-66,-67,-83,-84,-60,-61,-62,-63,-64,-65,-85,-38,-39,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-46,-68,-47,]),'EXCLAMATION':([3,24,46,48,49,51,52,53,75,76,77,78,80,81,82,83,84,85,86,87,91,92,122,131,132,133,134,135,136,137,138,139,140,145,147,150,],[22,-11,22,22,22,22,22,-12,-13,-85,-66,-67,-83,-84,-60,-61,-62,-63,-64,-65,-85,-38,-39,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-46,-68,-47,]),'ID':([6,8,9,10,11,12,13,14,15,16,17,21,22,25,37,40,41,44,45,47,50,58,61,62,63,64,65,66,67,68,71,72,74,79,94,97,100,101,102,103,104,105,106,107,108,109,112,113,114,115,116,117,118,119,120,121,124,141,144,145,146,148,153,],[24,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,28,-26,54,-29,-27,-28,-31,-34,-26,-30,75,-32,-33,-35,-36,76,91,-26,-45,91,91,-40,-43,91,91,91,91,91,91,91,91,91,91,91,-57,-58,-59,91,-52,-53,-54,-55,-56,-42,-37,91,91,-41,91,-44,]),'JOURNEY':([19,],[26,]),'CLOSE_BRACE':([21,22,37,40,41,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[-24,-25,-26,44,-29,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'WHILE':([21,22,37,40,41,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[-24,-25,-26,55,-29,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'YOU':([21,22,37,40,41,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[-24,-25,-26,57,-29,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'GO':([21,22,37,40,41,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[-24,-25,-26,59,-29,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'IF':([21,22,37,40,41,44,45,47,50,58,61,63,64,65,66,71,72,94,97,124,141,146,153,],[-24,-25,-26,60,-29,-27,-28,-31,-34,-26,-30,-32,-33,-35,-36,-26,-45,-40,-43,-42,-37,-41,-44,]),'COMMA':([24,33,35,43,46,53,75,80,81,82,83,84,85,86,87,91,128,130,131,132,133,134,135,136,137,138,139,140,151,],[-11,39,-8,-9,62,-12,-13,-83,-84,-60,-61,-62,-63,-64,-65,-85,148,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-72,]),'CLOSE_PARENTHESIS':([24,30,32,33,34,35,43,80,81,82,83,84,85,86,87,88,89,90,91,99,100,110,127,128,129,130,131,132,133,134,135,136,137,138,139,140,142,143,149,151,],[-11,-26,38,-6,-7,-8,-9,-83,-84,-60,-61,-62,-63,-64,-65,111,-48,-50,-85,126,-26,140,147,-69,-70,-71,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-49,-51,152,-72,]),'BEGINS':([26,],[29,]),'OPEN_PARENTHESIS':([28,55,60,67,68,74,76,79,100,112,113,114,115,116,117,118,119,120,121,123,144,145,148,],[30,68,74,79,79,79,100,79,79,79,-57,-58,-59,79,-52,-53,-54,-55,-56,144,79,79,79,]),'HERE':([29,],[31,]),'OPEN_BRACE':([31,38,96,111,126,152,],[37,37,37,37,37,37,]),'HOWEVER':([44,58,71,72,146,153,],[-27,-26,95,-45,-41,-44,]),'ELSE':([44,58,71,72,146,153,],[-27,-26,96,-45,-41,-44,]),'ASSIGN':([54,],[67,]),'QUEST':([56,],[69,]),'SHALL':([57,],[70,]),'BACK':([59,],[73,]),'INT_LITERAL':([67,68,74,79,100,101,102,103,104,105,106,107,108,109,112,113,114,115,116,117,118,119,120,121,144,145,148,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-57,-58,-59,82,-52,-53,-54,-55,-56,82,82,82,]),'FLOAT_LITERAL':([67,68,74,79,100,101,102,103,104,105,106,107,108,109,112,113,114,115,116,117,118,119,120,121,144,145,148,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-57,-58,-59,83,-52,-53,-54,-55,-56,83,83,83,]),'CHAR_LITERAL':([67,68,74,79,100,101,102,103,104,105,106,107,108,109,112,113,114,115,116,117,118,119,120,121,144,145,148,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-57,-58,-59,84,-52,-53,-54,-55,-56,84,84,84,]),'STRING_LITERAL':([67,68,74,79,100,101,102,103,104,105,106,107,108,109,112,113,114,115,116,117,118,119,120,121,144,145,148,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-57,-58,-59,85,-52,-53,-54,-55,-56,85,85,85,]),'BOOL_FALSE':([67,68,74,79,100,101,102,103,104,105,106,107,108,109,112,113,114,115,116,117,118,119,120,121,144,145,148,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-57,-58,-59,86,-52,-53,-54,-55,-56,86,86,86,]),'BOOL_TRUE':([67,68,74,79,100,101,102,103,104,105,106,107,108,109,112,113,114,115,116,117,118,119,120,121,144,145,148,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-57,-58,-59,87,-52,-53,-54,-55,-56,87,87,87,]),'CONTINUES':([69,],[92,]),'NOT':([70,],[93,]),'TO':([73,],[98,]),'ADD':([76,78,80,81,82,83,84,85,86,87,90,91,110,130,131,132,133,134,135,136,137,138,139,140,143,150,151,],[-85,101,-83,-84,-60,-61,-62,-63,-64,-65,101,-85,101,101,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,101,101,101,]),'SUB':([76,78,80,81,82,83,84,85,86,87,90,91,110,130,131,132,133,134,135,136,137,138,139,140,143,150,151,],[-85,102,-83,-84,-60,-61,-62,-63,-64,-65,102,-85,102,102,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,102,102,102,]),'DIV':([76,78,80,81,82,83,84,85,86,87,90,91,110,130,131,132,133,134,135,136,137,138,139,140,143,150,151,],[-85,103,-83,-84,-60,-61,-62,-63,-64,-65,103,-85,103,103,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,103,103,103,]),'MULT':([76,78,80,81,82,83,84,85,86,87,90,91,110,130,131,132,133,134,135,136,137,138,139,140,143,150,151,],[-85,104,-83,-84,-60,-61,-62,-63,-64,-65,104,-85,104,104,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,104,104,104,]),'MOD':([76,78,80,81,82,83,84,85,86,87,90,91,110,130,131,132,133,134,135,136,137,138,139,140,143,150,151,],[-85,105,-83,-84,-60,-61,-62,-63,-64,-65,105,-85,105,105,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,105,105,105,]),'POW':([76,78,80,81,82,83,84,85,86,87,90,91,110,130,131,132,133,134,135,136,137,138,139,140,143,150,151,],[-85,106,-83,-84,-60,-61,-62,-63,-64,-65,106,-85,106,106,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,106,106,106,]),'BITWISE_OR':([76,78,80,81,82,83,84,85,86,87,90,91,110,130,131,132,133,134,135,136,137,138,139,140,143,150,151,],[-85,107,-83,-84,-60,-61,-62,-63,-64,-65,107,-85,107,107,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,107,107,107,]),'BITWISE_AND':([76,78,80,81,82,83,84,85,86,87,90,91,110,130,131,132,133,134,135,136,137,138,139,140,143,150,151,],[-85,108,-83,-84,-60,-61,-62,-63,-64,-65,108,-85,108,108,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,108,108,108,]),'BITWISE_XOR':([76,78,80,81,82,83,84,85,86,87,90,91,110,130,131,132,133,134,135,136,137,138,139,140,143,150,151,],[-85,109,-83,-84,-60,-61,-62,-63,-64,-65,109,-85,109,109,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,109,109,109,]),'EQUAL':([80,81,82,83,84,85,86,87,90,91,131,132,133,134,135,136,137,138,139,140,],[-83,-84,-60,-61,-62,-63,-64,-65,117,-85,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,]),'LESS':([80,81,82,83,84,85,86,87,90,91,131,132,133,134,135,136,137,138,139,140,],[-83,-84,-60,-61,-62,-63,-64,-65,118,-85,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,]),'LESS_EQUAL':([80,81,82,83,84,85,86,87,90,91,131,132,133,134,135,136,137,138,139,140,],[-83,-84,-60,-61,-62,-63,-64,-65,119,-85,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,]),'GREATER':([80,81,82,83,84,85,86,87,90,91,131,132,133,134,135,136,137,138,139,140,],[-83,-84,-60,-61,-62,-63,-64,-65,120,-85,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,]),'GREATER_EQUAL':([80,81,82,83,84,85,86,87,90,91,131,132,133,134,135,136,137,138,139,140,],[-83,-84,-60,-61,-62,-63,-64,-65,121,-85,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,]),'AND':([80,81,82,83,84,85,86,87,88,89,90,91,99,131,132,133,134,135,136,137,138,139,140,142,143,149,],[-83,-84,-60,-61,-62,-63,-64,-65,113,-48,-50,-85,113,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-49,-51,113,]),'OR':([80,81,82,83,84,85,86,87,88,89,90,91,99,131,132,133,134,135,136,137,138,139,140,142,143,149,],[-83,-84,-60,-61,-62,-63,-64,-65,114,-48,-50,-85,114,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-49,-51,114,]),'XOR':([80,81,82,83,84,85,86,87,88,89,90,91,99,131,132,133,134,135,136,137,138,139,140,142,143,149,],[-83,-84,-60,-61,-62,-63,-64,-65,115,-48,-50,-85,115,-73,-74,-75,-76,-77,-78,-79,-80,-81,-82,-49,-51,115,]),'PASS':([93,],[122,]),'WHEN':([95,],[123,]),'THE_2':([98,],[125,]),'ABYSS':([125,],[145,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global':([0,4,20,],[2,23,27,]),'declaration_statement':([0,4,20,30,39,40,],[3,3,3,35,43,53,]),'function_statement':([0,4,20,],[4,4,4,]),'empty':([0,4,20,30,37,58,71,100,],[5,5,5,34,41,72,97,129,]),'type':([0,4,7,20,30,39,40,],[6,6,25,6,6,6,6,]),'main_statement':([2,],[18,]),'end':([3,46,48,49,51,52,],[20,61,63,64,65,66,]),'params':([30,],[32,]),'params_list':([30,],[33,]),'block':([31,38,96,111,126,152,],[36,42,124,141,146,153,]),'statements_list':([37,],[40,]),'statements':([40,],[45,]),'declaration_statement_list':([40,],[46,]),'while_statement':([40,],[47,]),'continue_statement':([40,],[48,]),'break_statement':([40,],[49,]),'if_else_statement':([40,],[50,]),'return_statement':([40,],[51,]),'assign_statement':([40,],[52,]),'if_statement':([40,],[58,]),'elif_statement':([58,],[71,]),'call_function':([67,],[77,]),'expression':([67,68,74,79,100,112,116,144,145,148,],[78,90,90,110,130,90,143,90,150,151,]),'values':([67,68,74,79,100,101,102,103,104,105,106,107,108,109,112,116,144,145,148,],[80,80,80,80,80,131,132,133,134,135,136,137,138,139,80,80,80,80,80,]),'literal':([67,68,74,79,100,101,102,103,104,105,106,107,108,109,112,116,144,145,148,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'comparasion_list':([68,74,144,],[88,99,149,]),'comparasion':([68,74,112,144,],[89,89,142,89,]),'else_statement':([71,],[94,]),'logic_operator':([88,99,149,],[112,112,112,]),'value_operators':([90,],[116,]),'args':([100,],[127,]),'args_list':([100,],[128,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global main_statement','program',2,'p_program','mepp_parser.py',5),
  ('global -> declaration_statement end global','global',3,'p_global','mepp_parser.py',9),
  ('global -> function_statement global','global',2,'p_global','mepp_parser.py',10),
  ('global -> empty','global',1,'p_global','mepp_parser.py',11),
  ('function_statement -> FUNCTION type ID OPEN_PARENTHESIS params CLOSE_PARENTHESIS block','function_statement',7,'p_function_statement','mepp_parser.py',15),
  ('params -> params_list','params',1,'p_params','mepp_parser.py',19),
  ('params -> empty','params',1,'p_params','mepp_parser.py',20),
  ('params_list -> declaration_statement','params_list',1,'p_params_list','mepp_parser.py',25),
  ('params_list -> params_list COMMA declaration_statement','params_list',3,'p_params_list','mepp_parser.py',26),
  ('main_statement -> THE_1 JOURNEY BEGINS HERE block','main_statement',5,'p_main_statement','mepp_parser.py',31),
  ('declaration_statement -> type ID','declaration_statement',2,'p_declaration_statement','mepp_parser.py',35),
  ('declaration_statement_list -> declaration_statement','declaration_statement_list',1,'p_declaration_statement_list','mepp_parser.py',40),
  ('declaration_statement_list -> declaration_statement_list COMMA ID','declaration_statement_list',3,'p_declaration_statement_list','mepp_parser.py',41),
  ('type -> UNSIGNED','type',1,'p_type','mepp_parser.py',46),
  ('type -> SHORT','type',1,'p_type','mepp_parser.py',47),
  ('type -> INT','type',1,'p_type','mepp_parser.py',48),
  ('type -> LONG','type',1,'p_type','mepp_parser.py',49),
  ('type -> FLOAT','type',1,'p_type','mepp_parser.py',50),
  ('type -> DOUBLE','type',1,'p_type','mepp_parser.py',51),
  ('type -> CHAR','type',1,'p_type','mepp_parser.py',52),
  ('type -> STRING','type',1,'p_type','mepp_parser.py',53),
  ('type -> BOOL','type',1,'p_type','mepp_parser.py',54),
  ('type -> VOID','type',1,'p_type','mepp_parser.py',55),
  ('end -> SEMICOLON','end',1,'p_end','mepp_parser.py',61),
  ('end -> EXCLAMATION','end',1,'p_end','mepp_parser.py',62),
  ('empty -> <empty>','empty',0,'p_empty','mepp_parser.py',66),
  ('block -> OPEN_BRACE statements_list CLOSE_BRACE','block',3,'p_block','mepp_parser.py',71),
  ('statements_list -> statements_list statements','statements_list',2,'p_statements_list','mepp_parser.py',76),
  ('statements_list -> empty','statements_list',1,'p_statements_list','mepp_parser.py',77),
  ('statements -> declaration_statement_list end','statements',2,'p_statements','mepp_parser.py',82),
  ('statements -> while_statement','statements',1,'p_statements','mepp_parser.py',83),
  ('statements -> continue_statement end','statements',2,'p_statements','mepp_parser.py',84),
  ('statements -> break_statement end','statements',2,'p_statements','mepp_parser.py',85),
  ('statements -> if_else_statement','statements',1,'p_statements','mepp_parser.py',86),
  ('statements -> return_statement end','statements',2,'p_statements','mepp_parser.py',87),
  ('statements -> assign_statement end','statements',2,'p_statements','mepp_parser.py',88),
  ('while_statement -> WHILE OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block','while_statement',5,'p_while_statement','mepp_parser.py',92),
  ('continue_statement -> THE_1 QUEST CONTINUES','continue_statement',3,'p_continue_statement','mepp_parser.py',95),
  ('break_statement -> YOU SHALL NOT PASS','break_statement',4,'p_break_statement','mepp_parser.py',98),
  ('if_else_statement -> if_statement elif_statement else_statement','if_else_statement',3,'p_if_else_statement','mepp_parser.py',101),
  ('if_statement -> IF OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block','if_statement',5,'p_if_statement','mepp_parser.py',104),
  ('else_statement -> ELSE block','else_statement',2,'p_else_statement','mepp_parser.py',108),
  ('else_statement -> empty','else_statement',1,'p_else_statement','mepp_parser.py',109),
  ('elif_statement -> elif_statement HOWEVER WHEN OPEN_PARENTHESIS comparasion_list CLOSE_PARENTHESIS block','elif_statement',7,'p_elif_statement','mepp_parser.py',114),
  ('elif_statement -> empty','elif_statement',1,'p_elif_statement','mepp_parser.py',115),
  ('return_statement -> GO BACK TO THE_2 ABYSS','return_statement',5,'p_return_statement','mepp_parser.py',120),
  ('return_statement -> GO BACK TO THE_2 ABYSS expression','return_statement',6,'p_return_statement','mepp_parser.py',121),
  ('comparasion_list -> comparasion','comparasion_list',1,'p_comparasion_list','mepp_parser.py',126),
  ('comparasion_list -> comparasion_list logic_operator comparasion','comparasion_list',3,'p_comparasion_list','mepp_parser.py',127),
  ('comparasion -> expression','comparasion',1,'p_comparasion','mepp_parser.py',132),
  ('comparasion -> expression value_operators expression','comparasion',3,'p_comparasion','mepp_parser.py',133),
  ('value_operators -> EQUAL','value_operators',1,'p_operators','mepp_parser.py',138),
  ('value_operators -> LESS','value_operators',1,'p_operators','mepp_parser.py',139),
  ('value_operators -> LESS_EQUAL','value_operators',1,'p_operators','mepp_parser.py',140),
  ('value_operators -> GREATER','value_operators',1,'p_operators','mepp_parser.py',141),
  ('value_operators -> GREATER_EQUAL','value_operators',1,'p_operators','mepp_parser.py',142),
  ('logic_operator -> AND','logic_operator',1,'p_logic_operator','mepp_parser.py',147),
  ('logic_operator -> OR','logic_operator',1,'p_logic_operator','mepp_parser.py',148),
  ('logic_operator -> XOR','logic_operator',1,'p_logic_operator','mepp_parser.py',149),
  ('literal -> INT_LITERAL','literal',1,'p_literal','mepp_parser.py',154),
  ('literal -> FLOAT_LITERAL','literal',1,'p_literal','mepp_parser.py',155),
  ('literal -> CHAR_LITERAL','literal',1,'p_literal','mepp_parser.py',156),
  ('literal -> STRING_LITERAL','literal',1,'p_literal','mepp_parser.py',157),
  ('literal -> BOOL_FALSE','literal',1,'p_literal','mepp_parser.py',158),
  ('literal -> BOOL_TRUE','literal',1,'p_literal','mepp_parser.py',159),
  ('assign_statement -> ID ASSIGN call_function','assign_statement',3,'p_assign_statement','mepp_parser.py',165),
  ('assign_statement -> ID ASSIGN expression','assign_statement',3,'p_assign_statement','mepp_parser.py',166),
  ('call_function -> ID OPEN_PARENTHESIS args CLOSE_PARENTHESIS','call_function',4,'p_function','mepp_parser.py',170),
  ('args -> args_list','args',1,'p_args','mepp_parser.py',174),
  ('args -> empty','args',1,'p_args','mepp_parser.py',175),
  ('args_list -> expression','args_list',1,'p_args_list','mepp_parser.py',180),
  ('args_list -> args_list COMMA expression','args_list',3,'p_args_list','mepp_parser.py',181),
  ('expression -> expression ADD values','expression',3,'p_expression','mepp_parser.py',187),
  ('expression -> expression SUB values','expression',3,'p_expression','mepp_parser.py',188),
  ('expression -> expression DIV values','expression',3,'p_expression','mepp_parser.py',189),
  ('expression -> expression MULT values','expression',3,'p_expression','mepp_parser.py',190),
  ('expression -> expression MOD values','expression',3,'p_expression','mepp_parser.py',191),
  ('expression -> expression POW values','expression',3,'p_expression','mepp_parser.py',192),
  ('expression -> expression BITWISE_OR values','expression',3,'p_expression','mepp_parser.py',193),
  ('expression -> expression BITWISE_AND values','expression',3,'p_expression','mepp_parser.py',194),
  ('expression -> expression BITWISE_XOR values','expression',3,'p_expression','mepp_parser.py',195),
  ('expression -> OPEN_PARENTHESIS expression CLOSE_PARENTHESIS','expression',3,'p_expression','mepp_parser.py',196),
  ('expression -> values','expression',1,'p_expression','mepp_parser.py',197),
  ('values -> literal','values',1,'p_values','mepp_parser.py',202),
  ('values -> ID','values',1,'p_values','mepp_parser.py',203),
]
