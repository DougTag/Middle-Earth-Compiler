
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftADDSUBleftMULTDIVleftMODleftPOWrightUNARYABYSS ADD AND ASSIGN BACK BEGINS BITWISE_AND BITWISE_NOT BITWISE_OR BITWISE_XOR BOOL BOOL_FALSE BOOL_TRUE CHAR CHAR_LITERAL CLOSE_BRACE CLOSE_PARENTHESIS COMMA CONTINUES DIV DOUBLE ELSE EQUAL EXCLAMATION FLOAT FLOAT_LITERAL FUNCTION GO GREATER GREATER_EQUAL HERE HOWEVER ID IF INT INT_LITERAL JOURNEY LESS LESS_EQUAL LONG MOD MULT NOT OPEN_BRACE OPEN_PARENTHESIS OR PASS POW QUEST SEMICOLON SHALL SHORT STRING STRING_LITERAL SUB THE_1 THE_2 TO UNSIGNED VOID WHEN WHILE XOR YOUexpression : SUB number %prec UNARY\n    expression : expression ADD expression\n               | expression SUB expression\n               | expression DIV expression\n               | expression MULT expression\n               | expression MOD expression\n               | expression POW expression\n    expression : number\n    number : INT_LITERAL\n           | FLOAT_LITERAL\n    '
    
_lr_action_items = {'SUB':([0,1,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,],[2,7,-8,-9,-10,2,2,2,2,2,2,-1,-2,-3,-4,-5,-6,-7,]),'INT_LITERAL':([0,2,6,7,8,9,10,11,],[4,4,4,4,4,4,4,4,]),'FLOAT_LITERAL':([0,2,6,7,8,9,10,11,],[5,5,5,5,5,5,5,5,]),'$end':([1,3,4,5,12,13,14,15,16,17,18,],[0,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,]),'ADD':([1,3,4,5,12,13,14,15,16,17,18,],[6,-8,-9,-10,-1,-2,-3,-4,-5,-6,-7,]),'DIV':([1,3,4,5,12,13,14,15,16,17,18,],[8,-8,-9,-10,-1,8,8,-4,-5,-6,-7,]),'MULT':([1,3,4,5,12,13,14,15,16,17,18,],[9,-8,-9,-10,-1,9,9,-4,-5,-6,-7,]),'MOD':([1,3,4,5,12,13,14,15,16,17,18,],[10,-8,-9,-10,-1,10,10,10,10,-6,-7,]),'POW':([1,3,4,5,12,13,14,15,16,17,18,],[11,-8,-9,-10,-1,11,11,11,11,11,-7,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,6,7,8,9,10,11,],[1,13,14,15,16,17,18,]),'number':([0,2,6,7,8,9,10,11,],[3,12,3,3,3,3,3,3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> SUB number','expression',2,'p_unary','mepp_parser.py',40),
  ('expression -> expression ADD expression','expression',3,'p_expression','mepp_parser.py',45),
  ('expression -> expression SUB expression','expression',3,'p_expression','mepp_parser.py',46),
  ('expression -> expression DIV expression','expression',3,'p_expression','mepp_parser.py',47),
  ('expression -> expression MULT expression','expression',3,'p_expression','mepp_parser.py',48),
  ('expression -> expression MOD expression','expression',3,'p_expression','mepp_parser.py',49),
  ('expression -> expression POW expression','expression',3,'p_expression','mepp_parser.py',50),
  ('expression -> number','expression',1,'p_expression_number','mepp_parser.py',67),
  ('number -> INT_LITERAL','number',1,'p_number','mepp_parser.py',72),
  ('number -> FLOAT_LITERAL','number',1,'p_number','mepp_parser.py',73),
]
