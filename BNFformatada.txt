# Feito para ser usado no site https://mdaines.github.io/grammophone/#/
# Ele gera a parsing table, ja que essa gramatica foi feita para ser LL(1).
# O proximo passo era pegar a tabela gerada e implementar o parser usando o metodo do livro do dragÃ£o (do Aho) p.226 

PROGRAM               -> DECLARATION_STATEMENT PROGRAM 
						  | FUNCTION_STATEMENT PROGRAM 
						  | MAIN_STATEMENT.

LITERAL               -> INT_LITERAL | FLOAT_LITERAL | BOOL_LITERAL | CHAR_LITERAL | STRING_LITERAL.

INT_LITERAL           -> "123".

FLOAT_LITERAL         -> "9.87".

BOOL_LITERAL          -> "good" | "evil".

STRING_LITERAL        -> "str".
CHAR_LITERAL			-> "c".

IDENTIFIER            -> "id".

TYPE                  -> "elf" | "draugr" | "hobbit" | "troll" | "tengwarr" | "sindarin" | "istari" | "wyvern" | "dragon" | "darkness".

END					-> ";" | "!" .




FUNCTION_STATEMENT    -> "Prologue" TYPE IDENTIFIER "(" FUNCTION_ARGUMENTS ")" BLOCK.
FUNCTION_ARGUMENTS    -> TYPE IDENTIFIER FUNCTION_ARGUMENTS2
                          | .
FUNCTION_ARGUMENTS2   -> "," TYPE IDENTIFIER FUNCTION_ARGUMENTS2
                          | .


MAIN_STATEMENT        -> "The journey begins here" BLOCK.


BLOCK					-> "{" STATEMENTS "}"
						  | STATEMENT_TYPE
						  | END.

STATEMENTS            -> STATEMENT_TYPE STATEMENTS 
						  | .

STATEMENT_TYPE		-> DECLARATION_STATEMENT
						  | ASSIGNMENT_STATEMENT
						  | IF_STATEMENT 
                          | WHILE_STATEMENT
                          | BREAK_STATEMENT
                          | CONTINUE_STATEMENT
                          | RETURN_STATEMENT.

DECLARATION_STATEMENT -> TYPE IDENTIFIER INITIALIZATION END.
INITIALIZATION		-> "=" EXPRESSION MULTIPLE_DECLARATION
						  | MULTIPLE_DECLARATION.
MULTIPLE_DECLARATION	-> "," IDENTIFIER INITIALIZATION
						  | .


ASSIGNMENT_STATEMENT 	-> IDENTIFIER IDENTIFIER_LIST ASSIGNMENT_TYPE EXPRESSION END.
IDENTIFIER_LIST		-> "," IDENTIFIER IDENTIFIER_LIST
					  	  | .
ASSIGNMENT_TYPE		->  "=" | "+=" | "-=" | "*=" | "/=" | "%=" | "**=" | "~=" | "&=" | "^=" | "|=".

IF_STATEMENT			-> IF IF_STATEMENT2 IF_STATEMENT3.
IF_STATEMENT2			-> ELSE_IF IF_STATEMENT2
					  	  | .
ELSE_IF_STATEMENT		-> ELSE
					  	  | .

IF                    -> "Given" "("EXPRESSION")" BLOCK.
ELSE_IF               -> "However when" "("EXPRESSION")" BLOCK.
ELSE					-> "Otherwise" BLOCK.

WHILE_STATEMENT       -> "Quest" "("EXPRESSION")" BLOCK.

BREAK_STATEMENT		-> "You shall not pass" END.
CONTINUE_STATEMENT	-> "The quest continues" END.

RETURN_STATEMENT      -> "Go back to the abyss" RETURN_STATEMENT2.
RETURN_STATEMENT2     -> EXPRESSION END
						  | END.

EXPRESSION			-> OR_EXPRESSION.

OR_EXPRESSION			-> XOR_EXPRESSION OR_EXPRESSION2.
OR_EXPRESSION2		-> "or" OR_EXPRESSION
					  	  | .
XOR_EXPRESSION		-> AND_EXPRESSION XOR_EXPRESSION2.
XOR_EXPRESSION2		-> "xor" XOR_EXPRESSION
					  	  | .
AND_EXPRESSION		-> BIT_OR_EXPRESSION AND_EXPRESSION2.
AND_EXPRESSION2		-> "and" AND_EXPRESSION
					  	  | .
BIT_OR_EXPRESSION		-> BIT_XOR_EXPRESSION BIT_OR_EXPRESSION2.
BIT_OR_EXPRESSION2	-> "|" BIT_OR_EXPRESSION
					  	  | .
BIT_XOR_EXPRESSION	-> BIT_AND_EXPRESSION BIT_XOR_EXPRESSION2.
BIT_XOR_EXPRESSION2	-> "^" BIT_XOR_EXPRESSION
					  	  | .
BIT_AND_EXPRESSION	-> EQUALITY_EXPRESSION BIT_AND_EXPRESSION2.
BIT_AND_EXPRESSION2	-> "&" BIT_AND_EXPRESSION
					  	  | .
EQUALITY_EXPRESSION	-> INEQUALITY_EXPRESSION EQUALITY_EXPRESSION2.
EQUALITY_EXPRESSION2	-> "==" EQUALITY_EXPRESSION
						  | "<>" EQUALITY_EXPRESSION
					  	  | .
INEQUALITY_EXPRESSION	-> SUM_EXPRESSION INEQUALITY_EXPRESSION2.
INEQUALITY_EXPRESSION2-> "<" INEQUALITY_EXPRESSION
						  | "<=" INEQUALITY_EXPRESSION
						  | ">" INEQUALITY_EXPRESSION
						  | ">=" INEQUALITY_EXPRESSION
					  	  | .
SUM_EXPRESSION		-> MULTIPLIC_EXPRESSION SUM_EXPRESSION2.
SUM_EXPRESSION2		-> "+" SUM_EXPRESSION
						  | "-" SUM_EXPRESSION
					  	  | .
MULTIPLIC_EXPRESSION	-> MODULO_EXPRESSION MULTIPLIC_EXPRESSION2.
MULTIPLIC_EXPRESSION2	-> "*" MULTIPLIC_EXPRESSION
						  | "/" MULTIPLIC_EXPRESSION
					  	  | .
MODULO_EXPRESSION		-> POWER_EXPRESSION MODULO_EXPRESSION2.
MODULO_EXPRESSION2	-> "%" MODULO_EXPRESSION
					  	  | .
POWER_EXPRESSION		-> UNARY_EXPRESSION POWER_EXPRESSION2.
POWER_EXPRESSION2		-> "**" POWER_EXPRESSION
					  	  | .
UNARY_EXPRESSION		-> "+" UNARY_EXPRESSION
						  | "-" UNARY_EXPRESSION
						  | "~" UNARY_EXPRESSION
						  | "(" EXPRESSION ")"
						  | IDENTIFIER UNARY_EXPRESSION2
						  | LITERAL.

UNARY_EXPRESSION2		-> "(" ARGUMENTS ")" 
					  	  | .

ARGUMENTS				-> EXPRESSION ARGUMENTS2
					  	  | .
ARGUMENTS2			-> "," EXPRESSION ARGUMENTS2
					  	  | .
